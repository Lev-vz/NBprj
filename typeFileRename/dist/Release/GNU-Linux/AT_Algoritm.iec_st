<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE Program >
<Program UUID="4D7FAB7841B17841F0C1B69365198418" Name="Algoritm" Period="100" PutDataAtEndOfCycle="false">
    <Variables>
        <Variable UUID="D1952C1A456FD3B835C0A79E98C58931" Name="PROC_AI" Type="FB_AI" TypeUUID="718EB19A4E8BA46A8A97C094F46314F0" Usage="internal" />
        <Variable UUID="8557889C4D4CFE6E4D35EF9EDFC60010" Name="tmpREALtime" Type="LREAL" TypeUUID="65F1DDD44EDA9C0776BB16BBDFE36B1F" Usage="internal" />
        <Variable UUID="FC3036CC4C8E6447BE95DC80E3023573" Name="tmpREALtime_prev" Type="LREAL" TypeUUID="65F1DDD44EDA9C0776BB16BBDFE36B1F" Usage="internal" />
        <Variable UUID="3A25DA3E4AA4AFB3C17C47B1871DE7C5" Name="tmpREALtime1" Type="LREAL" TypeUUID="65F1DDD44EDA9C0776BB16BBDFE36B1F" Usage="internal" />
        <Variable UUID="4EC432F841362A13B950D3BEE31579CE" Name="Proc_PPU_HR" Type="FB_PPU_HR0" TypeUUID="753BCBAA44A7A02021D0B6A8449340B3" Usage="internal" />
        <Variable UUID="78A03EB4427DDED4B9861DBCDDC6732B" Name="Proc_PPU_GR" Type="FB_PPU_GR0" TypeUUID="A0BE131A44DAE534FAAD81A12D04775E" Usage="internal" />
        <Variable UUID="09D3253A49863513836A9CA37F4EFA6E" Name="Proc_AS" Type="FB_AS0" TypeUUID="138B98144DAEE2BD0B1EA793FDA1A9AB" Usage="internal" />
        <Variable UUID="91B15E724AAE8AC8AF4232B82677222D" Name="Proc_PS" Type="FB_PS0" TypeUUID="A1DE2A054998B5CA26FF579B98758F2F" Usage="internal" />
        <Variable UUID="718AF35547F9309D871D6299DE5D311F" Name="Proc_Time_Init" Type="FB_Time_Init" TypeUUID="F05BF1B44C3DEBD0E5FBFBB6BE9DE0FD" Usage="internal" />
        <Variable UUID="3FB0953A4B3AEB92A61FCE83D3D6AB90" Name="TMR_INIT" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
        <Variable UUID="E17736A142FD2AABB520A6B89DEB4D93" Name="tmr_init_f" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Usage="internal" />
        <Variable UUID="19E04D6649FF1053C8290C933F604E25" Name="tmo_init" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
        <Variable UUID="DEF909AE42981041302774ACED0A5395" Name="Proc_DI" Type="FB_DI0" TypeUUID="8AAD82304A3ABCB1C27E3DA4EE7975C0" Usage="internal" />
        <Variable UUID="103F6A6C4EDF817718E4EAACE46E045D" Name="Proc_DO" Type="FB_DO0" TypeUUID="05343FAA415F138AB30C1FBCD89A0F01" Usage="internal" />
        <Variable UUID="7FA404BC46DB1DCC5F80368CACBD4960" Name="Proc_Ust_Init" Type="FB_Ust_init0" TypeUUID="D1BDBA494F2C93D4369003A11AFB781E" Usage="internal" />
        <Variable UUID="A31B7333449C46BBBC8399BB81A53DBE" Name="Proc_LG" Type="FB_LG" TypeUUID="065D61C444E01D8F22C9379B416DF4A7" Usage="internal" />
        <Variable UUID="366DE124423542781CDA1A9B386D1B58" Name="Proc_ALG_AM" Type="FB_ALG_AM" TypeUUID="9CE2465C4A01BD2A3769F9BD95F4BF66" Usage="internal" />
        <Variable UUID="34B2211C480252E630FEDF9BB0608DB0" Name="Proc_UnitState" Type="FB_UnitState" TypeUUID="8B9AB9814ED47321E618BE864C0B4427" Usage="internal" />
        <Variable UUID="A30C56DC46A69262A11863AF389BA10A" Name="Proc_TS" Type="FB_TS" TypeUUID="78618AE142A53E74F357FC9B49A56F58" Usage="internal" />
        <Variable UUID="AEF047CE4FC121D1D3BFC89D5ED9F2B1" Name="Proc_IMIT_FB" Type="FB_IMIT" TypeUUID="DC1B475B4853798BBEEA9F96AF4BD173" Usage="internal" />
        <Variable UUID="157F33454E41E227FD6891A0A4EEEDDD" Name="Proc_handling_AM" Type="FB_handling_AM" TypeUUID="C04905BA4CF2A506837C48AEAF84EA78" Usage="internal" />
        <Variable UUID="B1104CB74CD46A50BBA3929273777EF3" Name="PRU_link" Type="FB_PRU" TypeUUID="61AB208F4C9998B42EEB7B9131DABEB8" Usage="internal" />
        <Variable UUID="1EAF193A4F387B1DF97C979D94BDD33E" Name="FR_link" Type="FR_Link" TypeUUID="BA587BD342181E2EAFC5FF881A69F546" Usage="internal" />
        <Variable UUID="0460DFB946F020AE8B55C0A9BDA2ED91" Name="Proc_protection" Type="FB_protection" TypeUUID="36D3D2FB472934ACD75228BC2B42B603" Usage="internal" />
        <Variable UUID="12690AD54E92B8B932EE39A7F4A8B888" Name="Proc_Drum_init" Type="FB_Drum_Submode" TypeUUID="A56D90B14BA959B7654CEF9FE3802AB6" Usage="internal" />
        <Variable UUID="B8F6650B44E62481FDB758A3C34A0FE6" Name="Proc_Calc_AI" Type="FB_Calc_AI" TypeUUID="116E068544A68BD9AFA91AB5EFDFD8EA" Usage="internal" />
        <Variable UUID="3D6D9E784E54AC1D1175A09EF26EA45A" Name="Proc_KC" Type="FB_KC" TypeUUID="26600F52433D8E42261516BD8F838EBE" Usage="internal" />
        <Variable UUID="9DD643944D89FEA698D3D8AA8EFE6C67" Name="Proc_Stat" Type="Statistica" TypeUUID="86AB60FA4B051FB0EBF98782DAD47C3C" Usage="internal" />
        <Variable UUID="D2F7F13849D0BE9C4DA9D1AEE0C47D92" Name="Proc_Stat1" Type="Statistica1" TypeUUID="310654DC4DDFDEFFA3C02D9497EB83C2" Usage="internal" />
    </Variables>
    <ST><![CDATA[//Измерение фактического времени выполнения приложения
//cycle_time: 0-LOGIC, 1-RT,  2-AS
tmpREALtime := CLOCK();
del_T := LREAL_TO_REAL(tmpREALtime - tmpREALtime_prev);
//delta := tmpREALtime - tmpREALtime_prev;
tmpREALtime_prev := tmpREALtime;
//ACCU[4]:= CLOCK();
tmpREALtime1:=CLOCK();
////////////////////////////////////////////////////////////////////////
//ГЕНЕРАТОР ДЛЯ АНАЛИЗА РАБОТЫ ДАННОГО ПРИЛОЖЕНИЯ В ПРИЛОЖЕНИИ БЭАО
////////////////////////////////////////////////////////////////////////
if BEO.GENERATOR_LOGIC = 101 then BEO.GENERATOR_LOGIC := 0; end_if;
BEO.GENERATOR_LOGIC := BEO.GENERATOR_LOGIC + 1;

//Обработка входных сигналов
//Включение имитатора
LG.IMIT_ON :=  BTN.IMIT_ON OR LG.IMIT_ON AND NOT BTN.IMIT_OF; 
Proc_IMIT_FB();
PROC_AI();
cycle_time[11]:= LREAL_TO_REAL(CLOCK() - tmpREALtime1)*1000.0;
tmpREALtime1:=CLOCK();
Proc_Ust_Init(APP_FST_SCN);
Proc_DI();
Proc_LG();
//Исполнительные механизмы
Proc_handling_AM();
Proc_ALG_AM();

Proc_DO();
//Proc_AnOut();
Proc_KC();
//ППУ 
Proc_PPU_GR();
Proc_PPU_HR();

//АПС
if NOT APP_FST_SCN then 
Proc_AS(del_T,LG.deblock);
Proc_PS(del_T);
end_if;

//Режимы

Proc_protection();
Proc_Drum_init(); //вернуть!

Proc_Time_Init();
Proc_UnitState();
Proc_TS();
Proc_Calc_AI();
APR_link(); 
FR_link();
Proc_Stat(); //Наработка
Proc_Stat1(); //Наработка
//Передача данных вПРУ 
PRU_link();


BTN.IMIT_ON := FALSE;
BTN.IMIT_OF := FALSE;


BTN.PZM := False;
TMR_INIT( APP_FST_SCN, T#5s, tmo_init, tmr_init_f);
IF tmo_init then
APP_FST_SCN := false;
end_if;

cycle_time[0]:= del_T*1000.0; ]]></ST>
    <DataTypes>
        <Struct UUID="4C99358D49D97BBFF079AEAAFB2FDDD3" Name="AI_">
            <Field UUID="320393664796D414EEE541BB9E499327" Name="fault_common" Comment="общая неисправность канала" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="1D2891814EB623B6A2177C8E52D96124" Name="simulation" Comment="режим симуляции включен" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="19B2F17A4BB568846D6850B9C163F350" Name="repair" Comment="в ремонте" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="35BBB4274C8D26DC25AEB69E278DF862" Name="repair_time_less_10_percent" Comment="время ремонта истекает" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="7C74AD4E40598C67B4BDB2BA071C1569" Name="up_scale" Comment="больше чем max_fault_sensor_Eu" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="241E7A0B486837D643F6348AE7F39734" Name="down_scale" Comment="меньше чем min_fault_sensor_Eu" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="3A8878DD4B8809AEFA6E22B04B11D0B8" Name="ROC" Comment="ROC превышен" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="6733064D4826D6D9EC2D9FAE4A9A9E9A" Name="init_err" Comment="ошибка инициализации" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="3722EB2F4972A3DD7B25EAAF4CE921B0" Name="res" Comment="резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="77AE2CE043A5A720D4EADA9920F6C01C" Name="simulation_on" Comment="включить режим симуляции из HMI" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="D038B8D34993B8F9AF40BD824FFAA3D7" Name="repair_on" Comment="включить режим ремонта из HMI" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9308A2364CAE685CBEF3E5B7A034EE69" Name="repair_extension" Comment="продлить время ремонта из HMI" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="8D1BF9A744DED3DCE98FBCA44E039DAA" Name="ps" Comment="для посветки желтым" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="ABB24F6443C1E1D85D970488B4E77D27" Name="orr" Comment="ограничение режима" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="929D2ED54388FF5D070139B202B37AB7" Name="as" Comment="для посветки красным" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="F8749F754994935836C41A87CE57DE35" Name="ROC_enabled" Comment="включение функции ROC" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="205BA42B43E2213FC6B4EA87700659C7" Name="res2" Comment="резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="3FC4AB9446CCEFEFCE7144A3AC5C977D" Name="res3" Comment="резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="7DC565C6438B44421E8F65B96ADC1441" Name="res4" Comment="резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="853846974520C1BE4165B6A0B38344FF" Name="res5" Comment="резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="7D2AE31D4C0C92D9095DD7B58E1B61A9" Name="res6" Comment="резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="5C4EAAB340E0F06BB767F6AEE30C69DF" Name="AI_HMI">
            <Field UUID="6680870F41E57E1CD12DE7BD939D5023" Name="PV" Comment="сигнал с датчика, преобразованный к физическим единицам" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="F548944D4A7DC828DEA66BA8786ED508" Name="Condition" Comment="0-11 коды отказов канала, 12-15 команды с мнемосхемы" Type="AI_" TypeUUID="4C99358D49D97BBFF079AEAAFB2FDDD3" />
            <Field UUID="6829820143254586D6194B9A6F0736A6" Name="CurrentTimeOfRepair" Comment="текущее время ремонта канала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="CBDE481F460D861CF2BD17929A21107F" Name="Manual_Target" Comment="задание для выхода блока в ручном режиме" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
        </Struct>
        <Struct UUID="B290A1BE4D5D52B9175E13A9D47C40D2" Name="AI_PLC">
            <Field UUID="4517D8014BA5F1A31DC490A2FCD8E76C" Name="Span" Comment="диапазон датчика в EU" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="625B09604DB57060C6C6D9827263FB2B" Name="Offset" Comment="смещение датчика в EU" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="DAE597984FC2AFA050E92B89986AE362" Name="Tf" Comment="постоянная фильтра &gt; 0.001" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A875986F466C964AEDE6E09BAC1A420F" Name="min_ADC" Comment="минимальное значение в единицах АЦП для обрабатываемого канала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="EEEBBC024094CD578E5CC690A42B31BA" Name="max_ADC" Comment="максимальное значение в единицах АЦП для обрабатываемого канала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="8392C9FF4B63129DB1C5A5A5BF293B29" Name="min_fault_sensor_Eu" Comment="если сигнал с датчика Status.Input_sensor_eu меньше этого значения, то отказ канала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="0B3A58DE4B6F9A69D574C1A5202FA3D9" Name="max_fault_sensor_Eu" Comment="если сигнал с датчика Status.Input_sensor_eu больше этого значения, то отказ канала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="8FDDC5F142B3E3FD3E64F296CC14CF38" Name="ROC" Comment="скорость изменения сигнала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="1568C2D746CAB3E44D7DD794373B2957" Name="recovery_time" Comment="время восстановления канала после исчезновения неисправности" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="DFEE44C24DDA9848DAE5728113B9F98E" Name="repair_time" Comment="время через которое канал будет автоматически выведен из ручного режима" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="2966511E464A181C4955B29667D80BDF" Name="ROC_max" Comment="максимальное значение ROC, если ROC_enable = 1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="1E56F43440654B2C8F48AABCED63411C" Name="ROC_min" Comment="минимальное значение ROC, если ROC_enable = 1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="4176369549AFD27F4EE17384F721B073" Name="ROC_time" Comment="Время определения скорости изменения сигнала  (сек)" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A28F7A044DA4059028DB2DBA4EB976E5" Name="nAi" Comment="Номер канала" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
        </Struct>
        <Struct UUID="2318F94F4C3CEA2681DE4C8C432A66E9" Name="T_AI_FromProcessing" Comment="устанавливаются программой обработки канала">
            <Field UUID="19F27C8242D7A36082010591B7CF4F94" Name="PV" Comment="значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A3EB72B04BD66AA21B5AC7AE2F98299D" Name="measure" Comment="Пересчёт кода АЦП в инженерные единицы" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="38416DF64674643E8CA7A9BEBA367F95" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="91BA71324E5A549D017A04ADEA8F79D0" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="3C4E50D84C86F18E26AB11B82F29366B" Name="break" Comment="обрыв канала" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="0D6DA34841CAD4EC78135AB63D380E46" Name="up_scale" Comment="выход за верхний зашкал" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="5B8683E24E32517CC4004890703E4F48" Name="down_scale" Comment="выход за нижний зашкал" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="19BA9712445B10EBD6F5C8868CCD540D" Name="ROC" Comment="превышение скорости изменения вверх или вниз" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="18C0BED74B6CD173D937BCB0E13A9E0A" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="4C50A79642D731899CE3CF85880FAFF1" Name="manual" Comment="канал в дист.упр." Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="CC8456884B1A1197E95A94978DEFC35D" Name="repair" Comment="канал в ремонте" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="D1EBBA994EC52CDAECD32B9BF9865F01" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="FE06CA77455905083F02AA9B952DCC88" Name="T_AI_OnlyToHMI" Comment="цвет показаний канала. Если все FALSE - отображать зелёным цветом">
            <Field UUID="A6DC1D85424C687E688780B297D8E257" Name="as" Comment="отображать красным. Выставляется при выходе канала за аварийную уставку." Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="34D4A67E46AC6A056767E3AEA6CB288C" Name="os" Comment="отображать фиолетовым. Выставляется при выходе канала за ограничительную уставку." Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="76B4BE024A2B8A07798118AB07F1D7B3" Name="ps" Comment="отображать жёлтым. Выставляется при выходе канала за предупредительную уставку." Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="668FE9B94A603427C8EDBBB8917A7594" Name="T_AI_Settings" Comment="Настройки канала">
            <Field UUID="FB67A3DA420756403139A9A1A55A1E0B" Name="min" Comment="минимум шкалы канала, ед.изм. Не может быть &gt;= max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="DEBFDD8947671DAD4F62B3906E549D25" Name="max" Comment="максимум шкалы канала, ед.изм. Не может быть &lt;= min" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="F2019A6B428158F97791128B8B1A7793" Name="loLim" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= hiLim и &lt; min" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="6E72FC8C4F651BC8B53876B41271BA90" Name="hiLim" Comment="уровень зашкала вверх, ед.изм. Не может быть &lt;= loLim и &gt; max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="4E4459DF473A3E30D2F89AA9947EF0EC" Name="minADC" Comment="значение АЦП, соответствующее минимуму шкалы канала, б.р." Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="9089B91D425EF4959B8BA19E1A31D99F" Name="maxADC" Comment="значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A232AB4B47591CE39488C6B941E25388" Name="minROC" Comment="макс. допустимая скорость сниж. показаний, ед.изм./сек. Если «0» - скорость падения не анализируется" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A5E5FAC44F01EAEA13899DB13BDF15FF" Name="maxROC" Comment="макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="FB0EF9774036FFE88CBDF1A1289DFE2B" Name="ROC_time" Comment="время, за которое анализируется скорость изменения, сек. Если «0» - скорость не анализируется" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="4EB874C747AAFA074CD28E9CC46435A9" Name="recoveryTime" Comment="время восстановления после неисправности, сек." Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="E440FE654B539B836D917399FD4E5AA5" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть «0»" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="6ED460F74B6BA4406C4563B0886FDAD5" Name="tau" Comment="тау фильтра, сек. Если «0» - фильтрация отсутствует" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="3F395516439962F4E9E60DB41873E7C7" Name="id" Comment="номер по порядку" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
        </Struct>
        <Struct UUID="187F76AE49C59E950138DDA3067101D0" Name="T_AI_ToProcessing" Comment="команды из ЧМИ">
            <Field UUID="9348949040463C8F169FD29A9173462D" Name="manualTarget" Comment="Задание из ЧМИ" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="D63B3F7F408DA6E12FC9A9A74F52F12B" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="0C94283A41E3405A122190806F7544D1" Name="BTNmanualOf" Comment="Кнопка откл. задания значения из ЧМИ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="4A4F6536471B165FBEFF6FB957349DEC" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="A6703F1A4FD0BB3DEEBBECAF4ABBB5CA" Name="BTNrepairOf" Comment="Кнопка откл. ремонта" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="54E8D78F4D698EA03B7741941CD7DEE1" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="EFC2F1704642389525D840801681051A" Name="T_AM_Btn" Comment="Команды из ЧМИ">
            <Field UUID="EE772F3C427FF0AA1E5E2293A92221E0" Name="on" Comment="Кнопка &quot;включить/открыть&quot; (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="BE4222254E1390B490FEE4B1046551C5" Name="off" Comment="Кнопка &quot;отключить/закрыть&quot; (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="A9587CB84DC3816F748222A872962DEE" Name="manualOn" Comment="Кнопка включения режима Ручной (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="956D9E09435F00C25848949288E39BAA" Name="manualOff" Comment="Кнопка отключения режима Ручной (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="BB63D9F84C4E1DC4B9CCBC8A0CFB7A08" Name="takePos" Comment="Принять текущее положение, как правильное" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="A6D7875840F9E702E7824F8046D18141" Name="T_AM_FromProcessing" Comment="Сигналы, идущие из обработчика ИМ">
            <Field UUID="201C2A324E5B70F4DA1F5B8E2010211F" Name="qOn" Comment="Выход - &quot;включить&quot; (открыть, форсировка)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="11C1E90E4B60E9E2AC0164A8CD7688E7" Name="qOff" Comment="Выход - &quot;отключить&quot; (закрыть)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="5FE7AEEB43842E1B420E3A929065CF97" Name="qHoldOn" Comment="Выход - &quot;удержание&quot; (трехходовой клапан)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="0AFBD4A64FF8C309BDF4D9BBAF1A6E4E" Name="modeManual" Comment="Режим ручного управления" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="E0E79D9F4E8E2BDD77AF57B3E4827898" Name="fNotOn" Comment="Не включен" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="8BD39D29468096AD67F9498E5368625F" Name="fNotOff" Comment="Не отключен" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="55901A9549CB558C6C22C0950F7C98C1" Name="fNotStart" Comment="Не стронулся" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9017A0A34F59481F7870ABA8E8504720" Name="fSelfOn" Comment="Самопроизвольное включение" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="AE73561A43F8F72268B77AB5E6E1AD73" Name="fSelfOff" Comment="Самопроизвольное отключение" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="B7E4BD904864CFAF642845A7B7798A7C" Name="blockCommand" Comment="Команда заблокирована таймером макс. длительности" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="1133DD8F4DF10DEBA424AB8DE6F37054" Name="blockRecommand" Comment="Команда заблокирована счётчиком поджимов" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="11B902DC4884FB92CCAEEDAA6BEFCBFA" Name="fCommon" Comment="Обобщенная неисправность" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="32BA558A424E0C22E51AEAB8F6691BB0" Name="T_AM_Internal" Comment="Внетренние сигналы">
            <Field UUID="8BD39D29468096AD67F9498E5368625F" Name="on" Comment="был algOn или btnOn" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="55901A9549CB558C6C22C0950F7C98C1" Name="off" Comment="был algOff или btnOff" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9017A0A34F59481F7870ABA8E8504720" Name="onCom" Comment="Внутрення команда на откр/вкл" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="AE73561A43F8F72268B77AB5E6E1AD73" Name="offCom" Comment="Внутрення команда на закр/откл" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="315F560041ABFD91EFAEDF915F0B6D8D" Name="timerOnCom" Comment="Таймер включения/открытия" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="3B9747C64687596100E87AA15A2B8327" Name="timerOfCom" Comment="Таймер выключения/закрытия" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="CA31C77D4FC2844FB5B398B71D67EF2A" Name="timerExtraOn" Comment="Таймер дожима на открытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="9257796D44441394D821E09F2A00FC2D" Name="timerExtraOff" Comment="Таймер дожима на закрытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A4860242405A552738919AB6C6484378" Name="cntRecommand" Comment="Счётчик поджимов" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
        </Struct>
        <Struct UUID="256A18694412558E2A55A4B7624DD172" Name="T_AM_Setting" Comment="Настройки ИМ">
            <Field UUID="A9F2BD324D8460357D6708BCE1858E7A" Name="AMtype" Comment="Тип ИМ" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
            <Field UUID="3B9747C64687596100E87AA15A2B8327" Name="delayCommandTimeout" Comment="Время, при превышении которого снимается выходная команда" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="CA31C77D4FC2844FB5B398B71D67EF2A" Name="delayExtraOn" Comment="Время дожима на открытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="9257796D44441394D821E09F2A00FC2D" Name="delayExtraOff" Comment="Время дожима на закрытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A4860242405A552738919AB6C6484378" Name="delayNotMoveAlert" Comment="Задержка формирования нестрагивания" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="C963E92D47DA1945A4FE9B95F09610CF" Name="qRecommand" Comment="Разрешённое количество поджимов" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
        </Struct>
        <Struct UUID="88DE60EF4F8C47FD69A9F1B469621C9A" Name="T_AM_Simulaton" Comment="Параметры и данные для имитации">
            <Field UUID="DF3C63B84D3A2581E1BEBABBEE2B70E0" Name="deleyStartMove" Comment="Задержка на начало перестановки" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="D29C39984C714DF833BD819B7C957F49" Name="deleyEndMove" Comment="Задержка на завершение перестановки" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="ABA8F0C748F08DC3B194649DC1DDFF3C" Name="timerMove" Comment="Таймер перестановки" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="6FDF0AE841E5A058664A5AAEC07CE8B7" Name="position" Comment="Текущее положение - для имитации ан.пар." Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
        </Struct>
        <Struct UUID="779CB6804A1EFE299C44259879EE559D" Name="T_AM_ToProcessing" Comment="Сигналы, идущие в обработчик ИМ">
            <Field UUID="19D882B74B65A1AD618E1B9A1FECEACA" Name="on" Comment="Команда включения из алгоритма" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="6C02D4CE41FBAD9DDDBCCF8126F850C9" Name="off" Comment="Команда отключения из алгоритма" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="DFD4ADAC4C179329158E9795D2A10464" Name="prmManual" Comment="Разрешение ручного управления" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="11B902DC4884FB92CCAEEDAA6BEFCBFA" Name="exFault" Comment="Внешняя неисправность" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="3B9747C64687596100E87AA15A2B8327" Name="reset" Comment="Сброс счётчиков поджима и таймеров, блокирующих команды" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="9F0EDD3143DC10ACF03CBA8C4A870F2D" Name="T_DI_FromProcessing" Comment="устанавливаются программой обработки канала">
            <Field UUID="45AEBB7D480DAE7F30C284895D5A1C59" Name="PV" Comment="значение для САУ. Рассчитывается из  DI_DRV, DI_BRK, Manual_Target с учётом фильтрации" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9E63699B4FA402F6501E37825FD4E9D5" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="918E5C8743EA2FB219775CA28D03E00D" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9C070FE1417AC6B86199468AD200F933" Name="manual" Comment="канал в дист.упр." Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="3D1895D7430B9099490116926897089C" Name="repair" Comment="канал в ремонте" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="B9B86ED14BB5C2032CF32091244FD4EC" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="94C521C642227325371AE7BCC363E527" Name="T_DI_Setting" Comment="настройки дискретного канала">
            <Field UUID="F4E568F84F851C26BC98888E215BE0B4" Name="del" Comment="задержка для устранения дребезга, сек." Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A2EB714E44D93BF7914FCB98668244C4" Name="recoveryTime" Comment="время восстановления после неисправности, сек." Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="9A9862F749710A86B5EC96A4424155F8" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть «0»" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="CFDE822746172BCFCEA5E2AD018044BE" Name="inv" Comment="необходимость инвертирования измеренного значения" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="55B37D104E6E69A8BD7466B4968651A1" Name="T_DI_ToProcessing" Comment="команды из ЧМИ">
            <Field UUID="8C1FDD024010C62C7EB01A8B35880AAB" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9ED2B40E49BAA3DC17C4E6A34BE0EE72" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="C3606ECA4E40998E32B48AA467E477F9" Name="BTNmanualOf" Comment="Кнопка откл. задания значения из ЧМИ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="908FD99743B5C7334653B4989B84A416" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="60E47C4A48A9AA46738B5284516765E5" Name="BTNrepairOf" Comment="Кнопка откл. ремонта" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="6FBD32F442AC9DB3CE4BCFABEEEF8D86" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="F35CE5474F9ED831D3CDE984BA397134" Name="T_SP_Settings" Comment="Настройки уставки">
            <Field UUID="D9A556B9445296B748433EAA27F4A759" Name="spVal" Comment="значения уставки" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A482AD3D4DE33C82903528A701A28AC0" Name="target" Comment="назначение уставки: 0 – управляющая, 1 – аварийная, 2 – предупредительная, 3 – ограничительная, 4 - технологическая" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
            <Field UUID="BA40E4A546B01AE842584584C851B70C" Name="setForFault" Comment="значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
            <Field UUID="2691ED434FBDB2B1FBFB67A514B27416" Name="direct" Comment="направление срабатывания. TRUE - верхняя, FALSE - нижняя" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
        <Struct UUID="C106944B4821777BDF4444BFAF940D8C" Name="support_AM" Comment="v1.0 от 20170724">
            <Field UUID="A9F2BD324D8460357D6708BCE1858E7A" Name="AMtype" Comment="Тип ИМ" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" />
            <Field UUID="1A995F0248657661B1308380D9F4D87D" Name="iOn" Comment="Вход - &quot;включен&quot; (открыт)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="A4A187F345D46BFF7F1E74BAAC0A68DC" Name="iOff" Comment="Вход - &quot;отключен&quot; (закрыт)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="03F97D98411E9EC39A7712A9B4B20B06" Name="iCon" Comment="Вход - контроль цепи включения (открытия)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="759A0B224B61D47A8578AF8414C56F3D" Name="iCoff" Comment="Вход - контроль цепи отключения (закрытия)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="201C2A324E5B70F4DA1F5B8E2010211F" Name="qOn" Comment="Выход - &quot;включить&quot; (открыть, форсировка)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="11C1E90E4B60E9E2AC0164A8CD7688E7" Name="qOff" Comment="Выход - &quot;отключить&quot; (закрыть)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="5FE7AEEB43842E1B420E3A929065CF97" Name="qHoldOn" Comment="Выход - &quot;удержание&quot; (трехходовой клапан)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="19D882B74B65A1AD618E1B9A1FECEACA" Name="algOn" Comment="Команда включения из алгоритма" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="6C02D4CE41FBAD9DDDBCCF8126F850C9" Name="algOff" Comment="Команда отключения из алгоритма" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="0AFBD4A64FF8C309BDF4D9BBAF1A6E4E" Name="modeManual" Comment="Режим ручного управления" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="DFD4ADAC4C179329158E9795D2A10464" Name="disableManual" Comment="Блокировка ручного управления" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="5D54B84B4523F31E7E76568A084EC298" Name="disableCon" Comment="Не учитывать контроль цепи управления команды &apos;открыть&apos;" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="A76745A6499C76A5134D26BA24F6B0FF" Name="disableCoff" Comment="Не учитывать контроль цепи управления команды &apos;закрыть&apos;" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="A9587CB84DC3816F748222A872962DEE" Name="btnMode" Comment="Кнопка переключения режима Ручной/Авто (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="EE772F3C427FF0AA1E5E2293A92221E0" Name="btnOn" Comment="Кнопка &quot;включить&quot; (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="BE4222254E1390B490FEE4B1046551C5" Name="btnOff" Comment="Кнопка &quot;отключить&quot; (СКАДА)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="CC3B16024550DB62F0467489E47AE2AE" Name="prmBtnOn" Comment="Разрешение ручного включения в авто-режиме (для повтора команды)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="4BBED86E4627364227EE5FACC94EB2C0" Name="prmBtnOff" Comment="Разрешение ручного отключения в авто-режиме (для повтора команды)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="E0E79D9F4E8E2BDD77AF57B3E4827898" Name="fNotOn" Comment="Не включен" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="8BD39D29468096AD67F9498E5368625F" Name="fNotOff" Comment="Не отключен" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="55901A9549CB558C6C22C0950F7C98C1" Name="fNotStart" Comment="Не стронулся" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9017A0A34F59481F7870ABA8E8504720" Name="fSelfOn" Comment="Самопроизвольное включение" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="AE73561A43F8F72268B77AB5E6E1AD73" Name="fSelfOff" Comment="Самопроизвольное отключение" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="606C52A44EEFE033EE4698B7EB4FB9D4" Name="fFB" Comment="Двойное положение" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="28F8E9B34EA757B64F9D6C8C7608F482" Name="fCon" Comment="Нет контроля цепи включения" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="9CFA42B24C1EEAB80BFF6CB966F8718E" Name="fCoff" Comment="Нет контроля цепи отключения" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="11B902DC4884FB92CCAEEDAA6BEFCBFA" Name="fCommon" Comment="Обобщенная неисправность" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="315F560041ABFD91EFAEDF915F0B6D8D" Name="delayChangeOvertimeAlert" Comment="Время перестановки, при превышении которого выдается предупреждение" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="3B9747C64687596100E87AA15A2B8327" Name="delayQTimeout" Comment="Время перестановки, при превышении которого снимается выходная команда" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="CA31C77D4FC2844FB5B398B71D67EF2A" Name="delayExtraOn" Comment="Время дожима на открытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="9257796D44441394D821E09F2A00FC2D" Name="delayExtraOff" Comment="Время дожима на закрытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="A4860242405A552738919AB6C6484378" Name="delayNotMoveAlert" Comment="Задержка формирования нестрагивания" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="FB2BAAEE4F7F1CC355E123A2BBBDD150" Name="delayCircBrkAlert" Comment="Задержка формирования обрыва контроля цепи" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" />
            <Field UUID="1C044B42495E9100DD4AADA7909A789D" Name="_miOnEx" Comment="Резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="84E411A74D61EAB3B3010F9F5751BB35" Name="_miOffEx" Comment="Резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="B65811BD456B0F52D44E8A86A7E7C060" Name="_mqOnEx" Comment="Резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
            <Field UUID="7A7BD2814D25523890C040B139EC7233" Name="_mqOffEx" Comment="Резерв" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" />
        </Struct>
    </DataTypes>
    <FBLibrary>
        <Folder Name="00_AI_AO_DI_DO" Comment="" Data="" UUID="F1B0B5CA4B67178FFE180486EB4B5AC3">
            <Function UUID="399A26C74422FCAB2CB407B0C660178C" Name="AI_Init_Auto" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="78351BA7422AD5DC6A4F30846CC6CE84" Name="AI_HMI" Type="AI_HMI" TypeUUID="5C4EAAB340E0F06BB767F6AEE30C69DF" Usage="inout" />
                    <Variable UUID="96836725409FE9BCB4C4F598CE6B9782" Name="AI_PLC" Type="AI_PLC" TypeUUID="B290A1BE4D5D52B9175E13A9D47C40D2" Usage="inout" />
                    <Variable UUID="ED821802413B4B6902668284F12F2DEE" Name="Span" Comment="диапазон датчика в EU" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="E86960D545B3D11FA31A73B1E22919E2" Name="Offset" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="5D92099245858BBE94C4A091549A8550" Name="Tf" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="35F9EC884074ACE44CA57CACEA1173FB" Name="min_ADC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="AA20C5634E9ED82B59FE2F8D9CF9D32F" Name="max_ADC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="AF18B9B04A9C5A676DCB59B49CDBAC7E" Name="min_fault_sensor_Eu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="DEA88C7549559EE26ED64C85F4B8D6EA" Name="max_fault_sensor_Eu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="D4B346344CD6A88F95EB39B690B05BAC" Name="ROC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="58B630F340F8E8B23C0A25AB9203E375" Name="recovery_time" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="9B4C7AEF422ADDD2816291B99D583693" Name="repair_time" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="A679120D445559602D2AF98C3B8ABE99" Name="ROC_time" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="58EF0B6B4F387BD839243F9045E7969E" Name="nAi" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="input" />
                    <Variable UUID="027086F249BCC424D90FC8B861D1A4F9" Name="ROC_enabled" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                </Variables>
                <ST><![CDATA[AI_PLC.Span := Span;
AI_PLC.Offset := Offset;
AI_PLC.Tf := Tf;
AI_PLC.min_ADC := min_ADC;
AI_PLC.max_ADC := max_ADC;
AI_PLC.min_fault_sensor_Eu := min_fault_sensor_Eu;
AI_PLC.max_fault_sensor_Eu := max_fault_sensor_Eu;
AI_PLC.ROC := ROC;
AI_PLC.recovery_time := recovery_time;
AI_PLC.repair_time := repair_time;
AI_PLC.ROC_time := ROC_time;
AI_PLC.nAi := nAi;
AI_HMI.Condition.ROC_enabled := ROC_enabled;

if AI_PLC.min_fault_sensor_Eu >= AI_PLC.max_fault_sensor_Eu OR (AI_PLC.Span <= 0.0 OR AI_PLC.min_ADC >= AI_PLC.max_ADC OR AI_PLC.Tf <= 0.0) then AI_HMI.Condition.init_err := TRUE; else AI_HMI.Condition.init_err := FALSE; end_if;]]></ST>
            </Function>
            <!--FunctionBlock UUID="718EB19A4E8BA46A8A97C094F46314F0" Name="FB_AI">
                <Variables>
                    <Variable UUID="AA8649554D2E838487ECBB9B73957F71" Name="Proc_Tv_KGT" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="ABE395EB4BB9A0DC5C62318B7DB638F0" Name="Proc_Tg_in_KND_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="BF6159E34D4A6D1DD88C30865C84B71B" Name="Proc_Tg_in_KND_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="6DF59E454ED51354DC3516A85EECD9A8" Name="Proc_Tg_out_TND_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="C660BA684CF8CA8922D76A979316695A" Name="Proc_Tg_out_TND_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="3589AAD641E7DEF84CAC738DA32E1B06" Name="Proc_Tg_out_TND_3" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="14C1550C4154BC36AA5FA4B7DDFF9C25" Name="Proc_Tg_out_TND_4" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="8C07FF694E625B2C11CBA88A9FC8D03E" Name="Proc_Tg_out_TND_5" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="DE1B934F40CE050B4D7EA0A241F9AB7E" Name="Proc_Tg_out_TND_6" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="A38784DA40B52B7F01D54986124CF9A4" Name="Proc_Tg_out_TND_7" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="D68FB8C0475BBE331228508FF9A17252" Name="Proc_Tg_out_TND_8" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="164D2108422726B361D021BFBE2D3E34" Name="Proc_Tg_out_TND_9" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="0D991DE74847AA8FA1C2D2A0E1E38052" Name="Proc_Tg_out_TND_10" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="6BAE58E543DA0CD43D4647B72D2A2CD3" Name="Proc_Tg_out_TND_11" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="8ACCFA3A4FC2EBEEA270E2B6939D194F" Name="Proc_Tg_out_TND_12" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="35BBD8A740613DD2F7EFC293645D4009" Name="Proc_Tg_out_TND_13" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="BBA1CF04437DEFC31193EEBBA855B4E0" Name="Proc_Tg_out_TND_14" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="D51AD69D461BAF19D678B785BCEF3B3F" Name="Proc_Tg_out_TND_15" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="7694AA7540BC23D552342992C5E63A97" Name="Proc_Tg_out_TND_16" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="70556F7147BEB2C2F5B27EA6AA6E62B4" Name="Proc_Tg_in_TND_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="092950DD4C8767D578EEDBB9CBD39C0E" Name="Proc_Tg_in_TND_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="50D169424C0D6EC9F91707A164EA5FA1" Name="Proc_Tm_out_Per" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="F1E626B74869B9DA7221308C919AEED7" Name="Proc_Tm_out_KVD" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="0DF3090E4B1A4D9529ECF19C667ED714" Name="Proc_Tm_out_TND" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="6DE4B1914C3A6D80A70C6B9A24DE1228" Name="Proc_Tm_out_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="99C00D554BC60FAD934EA0BB321392C9" Name="Proc_Tm_in_MBN" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="0497EB35491382C9AE64D1AA7F7D1A16" Name="Proc_Tm_in_MBD" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="2ABF4F094DE34559CE408897FFD2FA7A" Name="Proc_Tm_in_D" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="00D55A594A27019BCC03E5B67C6535FF" Name="Proc_T_POD_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="239DF0E54CF24036CEAF1BBB642C2FB8" Name="Proc_T_POD_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="3CF8ABBB4A4FDCB95F3197AA26EA400E" Name="Proc_Tg_in_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="B2B429714C079BA5CB59769686D926B7" Name="Proc_Tg_out_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="58CFA5464A03FE06DEFDDA8FEBB2F2C4" Name="Proc_T_PON" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="3BD9FCF54727A413A97F17BC696878FD" Name="Proc_Tp_N_opora" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="093841EE430B2BCC4CBEB2B6DFD447CD" Name="Proc_Tp_N_work" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="23B09EB94D3969A7C5A3B0A1C96CAD17" Name="Proc_Tp_N_ust" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="2FF9FFD746E0C7245404529C29BF070F" Name="Proc_Tg_in_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="31C4B86F451ED3D14D9DF993EE9D5F84" Name="Proc_Tg_out_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="B72A07EF44216E801B2590B91687F452" Name="Proc_T_PON" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="CCDF9EA64F4768E194CF668EC63258F1" Name="Proc_Tp_N_opora" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="2F7E0F594157281520ABC58288BC319B" Name="Proc_Tp_N_work" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="958AD34D4A7F1F87BC3F6D850C70C54F" Name="Proc_Tp_N_ust" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="170CB03F420209A51F925F954D515366" Name="Proc_Razr_out_D" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="6A89EAE642B7E49ACEC7AD8E501814A6" Name="Proc_Pm_D" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="D20CF0384EF9FD8EAE6737AD0997EB2A" Name="Proc_Pm_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="5A5038874CAAFE680A4B99A578B9A888" Name="Proc_dP_mg" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="EC31201A425FCF7A977AB49C93D40D79" Name="Proc_Ptg_in_BTA" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="EE14F0E54E777AED861D51A2BF65E03E" Name="Proc_dPtg_in_filtr" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="1899995B40AB6DAC95FC588565DB846C" Name="Proc_Pg_in_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="AA3AB31047D829B1538DC5805B900E61" Name="Proc_Ptg_zamer" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="9CB3E703442EBB5B09F217825B6105E9" Name="Proc_dPtg_in_diaf" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="D1B0A62C4B5835E5F4B61D83795F6F8F" Name="Proc_Pg_out_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="27F430F5450DE9BA8D4749B4E68184FA" Name="Proc_dP_conf" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="7A8CC0AB470785DC944942BB28068164" Name="Proc_P_atm" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="AB57226548012D77BBC743B0F24048B7" Name="Proc_dPg_fors" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="3E77E2A14F12785FEA996BBFCC14D888" Name="Proc_Pv_out_KVD" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="00FB1645472C765E834E259D37EE2480" Name="Proc_dPm_in_filtr_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="C1EE340F4BF3384E164DA19BC7EAB009" Name="Proc_Lm_MBN" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="5CBF07DA402B685F230DE1B5E46EBFF2" Name="Proc_Vibr_OP_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="93B32C2249FD14CFC2C36081F15F74C9" Name="Proc_Vibr_OUP_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="43C7601D49F01A017C0D33A9521EBA9A" Name="Proc_Vibr_KVD" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="0C7C6640458E73C239CC1CBD1F8D5C25" Name="Proc_Vibr_KND" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="45D96A7F481C61AFC1C3E68A4EF87DFC" Name="Proc_Vibr_N" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="E0AE6A1A4ECF561F6B369D8FA8B8CFFF" Name="Proc_Pos_TRK" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="69FA72D942007D3CF3A5FB8257499232" Name="Proc_KCU_Upr_APK" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="20B506034BE047E0187ED28B0FF61678" Name="Proc_U_osn_RKBU" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="06E979E946BBF8DA689DEEAA871C4BCA" Name="Proc_U_res_RKBU" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="E868D6554ABE650BCD31679347BD7C4A" Name="Proc_T_PLC" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="C0FABE744C30580BB0545EB76379064F" Name="Proc_N_KND_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="B6B1D40142A736D2E4F82BA3E30B5AB2" Name="Proc_N_KND_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="56D3AC124088DB18597D4E9DDC9124C7" Name="Proc_N_KVD_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="76D8451A4FD58F4625808393534BC616" Name="Proc_N_KVD_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="0F2AC5E4413E87DAB9BF1A86059121FE" Name="Proc_N_TN_1" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="056FB49F4962B68DADC20E9103181DD3" Name="Proc_N_TN_2" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="272B6D7D4CFED36A99AF2D9F8290F807" Name="tmp_T" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="47F2D55A40637AF6E35665A530439672" Name="Proc_Tms_N_AVO" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="942539ED4EC71B7F55B758BAAAFE43EB" Name="Proc_T_atm" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="184174B54FC1C16653659AA35BDBCB1D" Name="Proc_Tv_in_D" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="DF0AAEE44A095A107488EA9E1D590C58" Name="Proc_T_H20_in_Ut" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="58373F45463CC445620C29B3095CC3EB" Name="Proc_T_H20_out_Ut" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="A68587A44D7157C5497594859DF90476" Name="Proc_Ttg_in_BTA" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="97356728496B1B4180C4CA80C80F35AA" Name="Proc_KCU_Upr_TRK" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                    <Variable UUID="5E587FA34BFBE2CE5E5677AF76CB9410" Name="Proc_T_BB" Type="c_AI_Proc_auto" TypeUUID="BB5B49364C82250BD6D575A2467D8491" Usage="internal" />
                </Variables-->
                <ST><![CDATA[(*
*)

//Инициализация
//AI_Init(AI_PLC, AI_HMI, Span, Offset, Tf, Min_ADC, Max_ADC, min_fault, max_fault, recovery_time, repeir_time, ROC_time, nAI, ROC_enabled)

IF APP_FST_SCN THEN
//----------------------------------------------- ТХА
//:Температура под кожухом Д A1.1:1
AI_Init_Auto(AI_HMI.Tv_KGT, AI_PLC.Tv_KGT, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 1, FALSE);
(*
//:Температура 1 перед камерой сгорания (за КНД) A1.1:2
AI_Init_Auto(AI_HMI.Tg_in_KND_1, AI_PLC.Tg_in_KND_1, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 2, FALSE); //Перенесено в ТР (обработка в быстром цикле)
//:Температура 2 перед камерой сгорания (за КНД) A1.1:3
AI_Init_Auto(AI_HMI.Tg_in_KND_2, AI_PLC.Tg_in_KND_2, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 3, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 1 на выходе ТНД A1.1:4
AI_Init_Auto(AI_HMI.Tg_out_TND_1, AI_PLC.Tg_out_TND_1, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 4, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 2 на выходе ТНД A1.1:5
AI_Init_Auto(AI_HMI.Tg_out_TND_2, AI_PLC.Tg_out_TND_2, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 5, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 3 на выходе ТНД A1.1:6
AI_Init_Auto(AI_HMI.Tg_out_TND_3, AI_PLC.Tg_out_TND_3, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 6, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 4 на выходе ТНД A1.1:7
AI_Init_Auto(AI_HMI.Tg_out_TND_4, AI_PLC.Tg_out_TND_4, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 7, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 5 на выходе ТНД A1.1:8
AI_Init_Auto(AI_HMI.Tg_out_TND_5, AI_PLC.Tg_out_TND_5, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 8, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 6 на выходе ТНД A1.1:9
AI_Init_Auto(AI_HMI.Tg_out_TND_6, AI_PLC.Tg_out_TND_6, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 9, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 7 на выходе ТНД A1.1:10
AI_Init_Auto(AI_HMI.Tg_out_TND_7, AI_PLC.Tg_out_TND_7, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 10, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 8 на выходе ТНД A1.1:11
AI_Init_Auto(AI_HMI.Tg_out_TND_8, AI_PLC.Tg_out_TND_8, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 11, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 9 на выходе ТНД A1.1:12
AI_Init_Auto(AI_HMI.Tg_out_TND_9, AI_PLC.Tg_out_TND_9, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 12, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 10 на выходе ТНД A1.1:13
AI_Init_Auto(AI_HMI.Tg_out_TND_10, AI_PLC.Tg_out_TND_10, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 13, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 11 на выходе ТНД A1.1:14
AI_Init_Auto(AI_HMI.Tg_out_TND_11, AI_PLC.Tg_out_TND_11, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 14, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 12 на выходе ТНД A1.1:15
AI_Init_Auto(AI_HMI.Tg_out_TND_12, AI_PLC.Tg_out_TND_12, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 15, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 13 на выходе ТНД A1.1:16
AI_Init_Auto(AI_HMI.Tg_out_TND_13, AI_PLC.Tg_out_TND_13, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 16, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 14 на выходе ТНД A1.1:17
AI_Init_Auto(AI_HMI.Tg_out_TND_14, AI_PLC.Tg_out_TND_14, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 17, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 15 на выходе ТНД A1.1:18
AI_Init_Auto(AI_HMI.Tg_out_TND_15, AI_PLC.Tg_out_TND_15, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 18, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 16 на выходе ТНД A1.1:19
AI_Init_Auto(AI_HMI.Tg_out_TND_16, AI_PLC.Tg_out_TND_16, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 19, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 1 за ТНД (т.17) A1.1:20
AI_Init_Auto(AI_HMI.Tg_in_TND_1, AI_PLC.Tg_in_TND_1, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 20, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Температура 2 за ТНД (т.18) A1.1:21
AI_Init_Auto(AI_HMI.Tg_in_TND_2, AI_PLC.Tg_in_TND_2, 1400.0, -50.0, 10000.0, -50.00, 1350.00, -50.30, 1350.30, 100.0, 5.0,3600.0, 0.1, 21, FALSE);//Перенесено в ТР (обработка в быстром цикле)
*)
//-----------------------------------------------ТСМ 50М
//:Температура масла на сливе из переходника A1.1:27
AI_Init_Auto(AI_HMI.Tm_out_Per, AI_PLC.Tm_out_Per, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 22, FALSE);
//:Температура масла на сливе из заднего корпуса КВД A1.1:28
AI_Init_Auto(AI_HMI.Tm_out_KVD, AI_PLC.Tm_out_KVD, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 23, FALSE);
//:Температура масла на сливе из опорного венца ТНД A1.1:29
AI_Init_Auto(AI_HMI.Tm_out_TND, AI_PLC.Tm_out_TND, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 24, FALSE);
//:Температура масла на сливе из опорного венца ТН A1.1:30
AI_Init_Auto(AI_HMI.Tm_out_N, AI_PLC.Tm_out_N, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 25, FALSE);
//-----------------------------------------------ТСП 50П
//:Температура масла в МБН A1.1:31
AI_Init_Auto(AI_HMI.Tm_in_MBN, AI_PLC.Tm_in_MBN, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 26, FALSE);
//:Температура масла в МБД A1.1:32
AI_Init_Auto(AI_HMI.Tm_in_MBD, AI_PLC.Tm_in_MBD, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 27, FALSE);
//:Температура масла на входе Д A1.1:33
AI_Init_Auto(AI_HMI.Tm_in_D, AI_PLC.Tm_in_D, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 28, FALSE);
//-----------------------------------------------ТСМ 100М
//:Температура 1 подшипников промопоры A1.1:34
AI_Init_Auto(AI_HMI.T_POD_1, AI_PLC.T_POD_1, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 29, FALSE);
//:Температура 2 подшипников промопоры A1.1:35
AI_Init_Auto(AI_HMI.T_POD_2, AI_PLC.T_POD_2, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 30, FALSE);
//-----------------------------------------------ТСМ 50М
//:Температура газа на входе Н A1.1:36
AI_Init_Auto(AI_HMI.Tg_in_N, AI_PLC.Tg_in_N, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 31, FALSE);
//:Температура газа на выходе Н A1.1:37
AI_Init_Auto(AI_HMI.Tg_out_N, AI_PLC.Tg_out_N, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 32, FALSE);
//:Температура переднего опорного подшипника Н A1.1:38
AI_Init_Auto(AI_HMI.T_PON, AI_PLC.T_PON, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 33, FALSE);
//:Температура опорно-упорного подшипника Н (опорная часть) A1.1:39
AI_Init_Auto(AI_HMI.Tp_N_opora, AI_PLC.Tp_N_opora, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 34, FALSE);
//:Температура опорно-упорного подшипника Н (рабочая колодка) A1.1:40
AI_Init_Auto(AI_HMI.Tp_N_work, AI_PLC.Tp_N_work, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 35, FALSE);
//:Температура опорно-упорного подшипника Н (установочная колодка) A1.1:41
AI_Init_Auto(AI_HMI.Tp_N_ust, AI_PLC.Tp_N_ust, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 36, FALSE);
//-----------------------------------------------ТСП 50П
//:Температура масла смазки нагнетателя после АВО A1.1:43
AI_Init_Auto(AI_HMI.Tms_N_AVO, AI_PLC.Tms_N_AVO, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 37, FALSE);
//-----------------------------------------------ТСМ 50М
//:Температура атмосферного воздуха A1.1:44
AI_Init_Auto(AI_HMI.T_atm, AI_PLC.T_atm, 150.0, -50.0, 10000.0, -50.00, 100.00, -50.30, 100.30, 100.0, 5.0,3600.0, 0.1, 38, FALSE);
//-----------------------------------------------ТСП 50П
//:Температура воздуха на входе в двигатель A1.1:45
AI_Init_Auto(AI_HMI.Tv_in_D, AI_PLC.Tv_in_D, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 39, FALSE);
//-----------------------------------------------ТСМ 50М
//:Температура воды на входе утилизатора A1.1:46
AI_Init_Auto(AI_HMI.T_H20_in_Ut, AI_PLC.T_H20_in_Ut, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 40, FALSE);
//:Температура воды на выходе утилизатора A1.1:47
AI_Init_Auto(AI_HMI.T_H20_out_Ut, AI_PLC.T_H20_out_Ut, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 41, FALSE);
//-----------------------------------------------ТСМ 50М
//:Температура топливного газа на входе в БТА A1.1:48
AI_Init_Auto(AI_HMI.Ttg_in_BTA, AI_PLC.Ttg_in_BTA, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 42, FALSE);
//:Температура в ББ A1.1:52
AI_Init_Auto(AI_HMI.T_BB, AI_PLC.T_BB, 180.0, -50.0, 10000.0, -50.00, 130.00, -50.30, 130.30, 100.0, 5.0,3600.0, 0.1, 42, FALSE);
//----------------------------------------------- 4-20мА
//KM04_4_20mA:Разрежение воздуха на входе в двигатель A1.1:53
AI_Init_Auto(AI_HMI.Razr_out_D, AI_PLC.Razr_out_D, 1.6, 0.0, 10000.0, 2.0, 9.99, 1.80, 9.999, 100.0, 5.0,3600.0, 0.1, 43, FALSE);
//KM04_4_20mA:Давление масла на входе в двигатель (после фильтра) A1.1:54
AI_Init_Auto(AI_HMI.Pm_D, AI_PLC.Pm_D, 1.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 44, FALSE);
//KM04_4_20mA:Давление масла смазки Н A1.1:55
AI_Init_Auto(AI_HMI.Pm_N, AI_PLC.Pm_N, 1.0, 0.0, 10000.0, 2.0, 9.99, 1.85, 9.999, 100.0, 5.0,3600.0, 0.1, 45, FALSE);
//KM04_4_20mA:Перепад давлений масло-газ A1.1:56
AI_Init_Auto(AI_HMI.dP_mg, AI_PLC.dP_mg, 630.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 46, FALSE);
//KM04_4_20mA:Давление топливного газа на входе БТА A1.1:57
AI_Init_Auto(AI_HMI.Ptg_in_BTA, AI_PLC.Ptg_in_BTA, 4.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 47, FALSE);
//KM04_4_20mA:Перепад давлений топливного газа на фильтре A1.1:58
AI_Init_Auto(AI_HMI.dPtg_in_filtr, AI_PLC.dPtg_in_filtr, 250.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 48, FALSE);
//KM04_4_20mA:Давление газа на входе Н A1.1:59
//AI_Init_Auto(AI_HMI.Pg_in_N, AI_PLC.Pg_in_N, 10.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 49, FALSE); //Перенесено в АПР
//KM04_4_20mA:Давление топливного газа на замерной нитке A1.1:60
AI_Init_Auto(AI_HMI.Ptg_zamer, AI_PLC.Ptg_zamer, 4.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 50, FALSE);
//KM04_4_20mA:Перепад давлений топливного газа на диафрагме A1.1:61
AI_Init_Auto(AI_HMI.dPtg_in_diaf, AI_PLC.dPtg_in_diaf, 100.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 51, FALSE);
//KM04_4_20mA:Давление газа на выходе Н A1.1:62
//AI_Init_Auto(AI_HMI.Pg_out_N, AI_PLC.Pg_out_N, 10.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 52, FALSE); //Перенесено в АПР
//KM04_4_20mA:Перепад давлений на конфузоре A1.1:63
//AI_Init_Auto(AI_HMI.dP_conf, AI_PLC.dP_conf, 160.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 53, FALSE); //Перенесено в АПР
//KM04_4_20mA:Давление атмосферного воздуха A1.1:64
AI_Init_Auto(AI_HMI.P_atm, AI_PLC.P_atm, 160.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 54, FALSE);
//KM04_4_20mA:Перепад давлений газа на форсунках A1.2:1
AI_Init_Auto(AI_HMI.dPg_fors, AI_PLC.dPg_fors, 0.4, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 55, FALSE);
//KM04_4_20mA:Давление воздуха за КВД A1.2:2
//AI_Init_Auto(AI_HMI.Pv_out_KVD, AI_PLC.Pv_out_KVD, 2.5, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.99, 100.0, 5.0,3600.0, 0.1, 56, FALSE); //Перенесено в ТР (обработка в быстром цикле)
//KM04_4_20mA:Перепад давлений масла на фильтре Н (ТП-22) A1.2:3
AI_Init_Auto(AI_HMI.dPm_in_filtr_N, AI_PLC.dPm_in_filtr_N, 160.0, 0.0, 10000.0, 2.0, 9.99, 1.80, 9.999, 100.0, 5.0,3600.0, 0.1, 57, FALSE);
//KM04_4_20mA:Уровень в МБН A1.2:4
AI_Init_Auto(AI_HMI.Lm_MBN, AI_PLC.Lm_MBN, 3000.0, 3000.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 58, FALSE);
//KM04_4_20mA:Вибросмещение ОП нагнетателя A1.2:5
AI_Init_Auto(AI_HMI.Vibr_OP_N, AI_PLC.Vibr_OP_N, 250.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 59, FALSE);
//KM04_4_20mA:Вибросмещение ОУП нагнетателя A1.2:6
AI_Init_Auto(AI_HMI.Vibr_OUP_N, AI_PLC.Vibr_OUP_N, 250.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 60, FALSE);
//KM04_4_20mA:Вибрация корпуса КВД A1.2:7
AI_Init_Auto(AI_HMI.Vibr_KVD, AI_PLC.Vibr_KVD, 70.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 61, FALSE);
//KM04_4_20mA:Вибрация корпуса КНД A1.2:8
AI_Init_Auto(AI_HMI.Vibr_KND, AI_PLC.Vibr_KND, 70.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.999, 100.0, 5.0,3600.0, 0.1, 62, FALSE);
//KM04_4_20mA:Вибрация корпуса ТН A1.2:9
AI_Init_Auto(AI_HMI.Vibr_N, AI_PLC.Vibr_N, 70.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.99, 100.0, 5.0,3600.0, 0.1, 63, FALSE);
//KM04_4_20mA:Положение топливно-регулирующего клапана (ДУС) A1.2:10
//AI_Init_Auto(AI_HMI.Pos_TRK, AI_PLC.Pos_TRK, 100.0, 0.0, 10000.0, 2.0, 9.99, 1.90, 9.99, 100.0, 5.0,3600.0, 0.1, 64, FALSE); //Перенесено в ТР (обработка в быстром цикле)

//----------------------------------------------- Fastwell
//:КЦУ. Управление топливно-регулирующим клапаном  A2.1:1
AI_Init_Auto(AI_HMI.KCU_Upr_TRK, AI_PLC.KCU_Upr_TRK, 16.0, 4.0, 10000.0, 4.0, 20.0, 3.5, 20.3, 100.0, 5.0,3600.0, 0.1, 65, FALSE);
//:Напряжение основного питания РК БУ A2.2:1
AI_Init_Auto(AI_HMI.U_osn_RKBU, AI_PLC.U_osn_RKBU, 370.0, 0.0, 10000.0, 4.0, 20.0, 3.5, 20.3, 100.0, 5.0,3600.0, 0.1, 66, FALSE);
//:Напряжение резервного питания РК БУ A2.2:2
AI_Init_Auto(AI_HMI.U_res_RKBU, AI_PLC.U_res_RKBU, 370.0, 0.0, 10000.0, 4.0, 20.0, 3.5, 20.3, 100.0, 5.0,3600.0, 0.1, 67, FALSE);
//:Температура контроллера A2.3:1
AI_Init_Auto(AI_HMI.T_PLC, AI_PLC.T_PLC, 200.0, -50.0, 10000.0, -50.00, 150.0, -50.30, 150.30, 100.0, 5.0,3600.0, 0.1, 68, FALSE);
(*
//-------------------------FI
//:Частота вращения КНД канал 1 A.1.9.1
AI_Init_Auto(AI_HMI.N_KND_1, AI_PLC.N_KND_1, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 100.0, 5.0,3600.0, 0.1, 69, FALSE); //Перенесено в ТР (обработка в быстром цикле)
//:Частота вращения КВД канал 1 A.1.9.2
AI_Init_Auto(AI_HMI.N_KVD_1, AI_PLC.N_KVD_1, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 100.0, 5.0,3600.0, 0.1, 70, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Частота вращения ротора ТН канал 1 A.1.9.3
AI_Init_Auto(AI_HMI.N_TN_1, AI_PLC.N_TN_1, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 100.0, 5.0,3600.0, 0.1, 71, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Частота вращения КНД канал 2 A.1.10.1
AI_Init_Auto(AI_HMI.N_KND_2, AI_PLC.N_KND_2, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 0.0, 10000.0, 100.0, 5.0,3600.0, 0.1, 72, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Частота вращения КВД канал 2 A.1.10.2
AI_Init_Auto(AI_HMI.N_KVD_2, AI_PLC.N_KVD_2, 6000.0, 0.0, 10000.0, 0.0, 6000.0, 0.0, 6000.0, 100.0, 5.0,3600.0, 0.1, 73, FALSE);//Перенесено в ТР (обработка в быстром цикле)
//:Частота вращения ротора ТН канал 2 A.1.10.3
AI_Init_Auto(AI_HMI.N_TN_2, AI_PLC.N_TN_2, 6000.0, 0.0, 10000.0, 0.0, 6000.0, 0.0, 6000.0, 100.0, 5.0,3600.0, 0.1, 74, FALSE);//Перенесено в ТР (обработка в быстром цикле)
*)
END_IF;

(*
Вызов блока:
AI_Proc(AI_HMI, AI_PLC, del_T, AI_drv, Firstscan);
где:
AI_Proc  - имя ФБ типа c_AI_Proc_auto;
AI_HMI -  структура данного аналогового параметра передаваемая заполняемая через dll и осуществляющая обмен с HMI;
AI_PLC -  структура данного аналогового параметра для PLC;
del_T - текущее время цикла ПЛК;
AI_drv  - Значение входа данного аналогового параметра, полученное из драйвера входных сигналов
Firstscan - флаг первого цикла контроллера для инициализации.
*)

IF TRUE (*NOT LG.IMIT_ON*) THEN
//----------------------------------------------- ТХА
//Температура под кожухом Д A1.1:1
Proc_Tv_KGT(AI_HMI.Tv_KGT, AI_PLC.Tv_KGT, del_T, AI_DRV.Tv_KGT, APP_FST_SCN);
(*
//Температура 1 перед камерой сгорания (за КНД) A1.1:2
Proc_Tg_in_KND_1(AI_HMI.Tg_in_KND_1, AI_PLC.Tg_in_KND_1, del_T, AI_DRV.Tg_in_KND_1, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Температура 2 перед камерой сгорания (за КНД) A1.1:3
Proc_Tg_in_KND_2(AI_HMI.Tg_in_KND_2, AI_PLC.Tg_in_KND_2, del_T, AI_DRV.Tg_in_KND_2, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 1 на выходе ТНД A1.1:4
Proc_Tg_out_TND_1(AI_HMI.Tg_out_TND_1, AI_PLC.Tg_out_TND_1, del_T, AI_DRV.Tg_out_TND_1, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 2 на выходе ТНД A1.1:5
Proc_Tg_out_TND_2(AI_HMI.Tg_out_TND_2, AI_PLC.Tg_out_TND_2, del_T, AI_DRV.Tg_out_TND_2, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 3 на выходе ТНД A1.1:6
Proc_Tg_out_TND_3(AI_HMI.Tg_out_TND_3, AI_PLC.Tg_out_TND_3, del_T, AI_DRV.Tg_out_TND_3, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 4 на выходе ТНД A1.1:7
Proc_Tg_out_TND_4(AI_HMI.Tg_out_TND_4, AI_PLC.Tg_out_TND_4, del_T, AI_DRV.Tg_out_TND_4, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 5 на выходе ТНД A1.1:8
Proc_Tg_out_TND_5(AI_HMI.Tg_out_TND_5, AI_PLC.Tg_out_TND_5, del_T, AI_DRV.Tg_out_TND_5, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 6 на выходе ТНД A1.1:9
Proc_Tg_out_TND_6(AI_HMI.Tg_out_TND_6, AI_PLC.Tg_out_TND_6, del_T, AI_DRV.Tg_out_TND_6, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 7 на выходе ТНД A1.1:10
Proc_Tg_out_TND_7(AI_HMI.Tg_out_TND_7, AI_PLC.Tg_out_TND_7, del_T, AI_DRV.Tg_out_TND_7, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 8 на выходе ТНД A1.1:11
Proc_Tg_out_TND_8(AI_HMI.Tg_out_TND_8, AI_PLC.Tg_out_TND_8, del_T, AI_DRV.Tg_out_TND_8, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 9 на выходе ТНД A1.1:12
Proc_Tg_out_TND_9(AI_HMI.Tg_out_TND_9, AI_PLC.Tg_out_TND_9, del_T, AI_DRV.Tg_out_TND_9, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 10 на выходе ТНД A1.1:13
Proc_Tg_out_TND_10(AI_HMI.Tg_out_TND_10, AI_PLC.Tg_out_TND_10, del_T, AI_DRV.Tg_out_TND_10, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 11 на выходе ТНД A1.1:14
Proc_Tg_out_TND_11(AI_HMI.Tg_out_TND_11, AI_PLC.Tg_out_TND_11, del_T, AI_DRV.Tg_out_TND_11, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 12 на выходе ТНД A1.1:15
Proc_Tg_out_TND_12(AI_HMI.Tg_out_TND_12, AI_PLC.Tg_out_TND_12, del_T, AI_DRV.Tg_out_TND_12, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 13 на выходе ТНД A1.1:16
Proc_Tg_out_TND_13(AI_HMI.Tg_out_TND_13, AI_PLC.Tg_out_TND_13, del_T, AI_DRV.Tg_out_TND_13, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 14 на выходе ТНД A1.1:17
Proc_Tg_out_TND_14(AI_HMI.Tg_out_TND_14, AI_PLC.Tg_out_TND_14, del_T, AI_DRV.Tg_out_TND_14, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 15 на выходе ТНД A1.1:18
Proc_Tg_out_TND_15(AI_HMI.Tg_out_TND_15, AI_PLC.Tg_out_TND_15, del_T, AI_DRV.Tg_out_TND_15, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 16 на выходе ТНД A1.1:19
Proc_Tg_out_TND_16(AI_HMI.Tg_out_TND_16, AI_PLC.Tg_out_TND_16, del_T, AI_DRV.Tg_out_TND_16, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 1 за ТНД (т.17) A1.1:20
Proc_Tg_in_TND_1(AI_HMI.Tg_in_TND_1, AI_PLC.Tg_in_TND_1, del_T, AI_DRV.Tg_in_TND_1, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
//Температура 2 за ТНД (т.18) A1.1:21
Proc_Tg_in_TND_2(AI_HMI.Tg_in_TND_2, AI_PLC.Tg_in_TND_2, del_T, AI_DRV.Tg_in_TND_2, APP_FST_SCN);//Перенесено в ТР (обработка в быстром цикле)
*)
//-----------------------------------------------ТСМ 50М
//Температура масла на сливе из переходника A1.1:27
tmp_T:= TSM(AI_DRV.Tm_out_Per, 0.0);
Proc_Tm_out_Per(AI_HMI.Tm_out_Per, AI_PLC.Tm_out_Per, del_T, tmp_T, APP_FST_SCN);
//Температура масла на сливе из заднего корпуса КВД A1.1:28
tmp_T:= TSM(AI_DRV.Tm_out_KVD, 0.0);
Proc_Tm_out_KVD(AI_HMI.Tm_out_KVD, AI_PLC.Tm_out_KVD, del_T, tmp_T, APP_FST_SCN);
//Температура масла на сливе из опорного венца ТНД A1.1:29
tmp_T:= TSM(AI_DRV.Tm_out_TND, 0.0);
Proc_Tm_out_TND(AI_HMI.Tm_out_TND, AI_PLC.Tm_out_TND, del_T, tmp_T, APP_FST_SCN);
//Температура масла на сливе из опорного венца ТН A1.1:30
tmp_T:= TSM(AI_DRV.Tm_out_N, 0.0);
Proc_Tm_out_N(AI_HMI.Tm_out_N, AI_PLC.Tm_out_N, del_T, tmp_T, APP_FST_SCN);

//-----------------------------------------------ТСП 50П
//Температура масла в МБН A1.1:31
tmp_T:= TSP(AI_DRV.Tm_in_MBN, 0.0);
Proc_Tm_in_MBN(AI_HMI.Tm_in_MBN, AI_PLC.Tm_in_MBN, del_T, tmp_T, APP_FST_SCN);
//Температура масла в МБД A1.1:32
tmp_T:= TSP(AI_DRV.Tm_in_MBD, 0.0);
Proc_Tm_in_MBD(AI_HMI.Tm_in_MBD, AI_PLC.Tm_in_MBD, del_T, tmp_T, APP_FST_SCN);
//Температура масла на входе Д A1.1:33
tmp_T:= TSP(AI_DRV.Tm_in_D, 0.0);
Proc_Tm_in_D(AI_HMI.Tm_in_D, AI_PLC.Tm_in_D, del_T, tmp_T, APP_FST_SCN);

//-----------------------------------------------ТСМ 100М
//Температура 1 подшипников промопоры A1.1:34
tmp_T:= TSM(AI_DRV.T_POD_1, 0.0);
Proc_T_POD_1(AI_HMI.T_POD_1, AI_PLC.T_POD_1, del_T, tmp_T, APP_FST_SCN);
//Температура 2 подшипников промопоры A1.1:35
tmp_T:= TSM(AI_DRV.T_POD_2, 0.0);
Proc_T_POD_2(AI_HMI.T_POD_2, AI_PLC.T_POD_2, del_T, tmp_T, APP_FST_SCN);

//-----------------------------------------------ТСМ 50М
//Температура газа на входе Н A1.1:36
tmp_T:= TSM(AI_DRV.Tg_in_N, 0.0);
Proc_Tg_in_N(AI_HMI.Tg_in_N, AI_PLC.Tg_in_N, del_T, tmp_T, APP_FST_SCN);
//Температура газа на выходе Н A1.1:37
tmp_T:= TSM(AI_DRV.Tg_out_N, 0.0);
Proc_Tg_out_N(AI_HMI.Tg_out_N, AI_PLC.Tg_out_N, del_T, tmp_T, APP_FST_SCN);
//Температура переднего опорного подшипника Н A1.1:38
tmp_T:= TSM(AI_DRV.T_PON, 0.0);
Proc_T_PON(AI_HMI.T_PON, AI_PLC.T_PON, del_T, tmp_T, APP_FST_SCN);
//Температура опорно-упорного подшипника Н (опорная часть) A1.1:39
tmp_T:= TSM(AI_DRV.Tp_N_opora, 0.0);
Proc_Tp_N_opora(AI_HMI.Tp_N_opora, AI_PLC.Tp_N_opora, del_T, tmp_T, APP_FST_SCN);
//Температура опорно-упорного подшипника Н (рабочая колодка) A1.1:40
tmp_T:= TSM(AI_DRV.Tp_N_work, 0.0);
Proc_Tp_N_work(AI_HMI.Tp_N_work, AI_PLC.Tp_N_work, del_T, tmp_T, APP_FST_SCN);
//Температура опорно-упорного подшипника Н (установочная колодка) A1.1:41
tmp_T:= TSM(AI_DRV.Tp_N_ust, 0.0);
Proc_Tp_N_ust(AI_HMI.Tp_N_ust, AI_PLC.Tp_N_ust, del_T, tmp_T, APP_FST_SCN);

//-----------------------------------------------ТСП 50П
//Температура масла смазки нагнетателя после АВО A1.1:43
tmp_T:= TSP(AI_DRV.Tms_N_AVO, 0.0);
Proc_Tms_N_AVO(AI_HMI.Tms_N_AVO, AI_PLC.Tms_N_AVO, del_T, tmp_T, APP_FST_SCN);
//-----------------------------------------------ТСМ 50М
//Температура атмосферного воздуха A1.1:44
tmp_T:= TSM(AI_DRV.T_atm, 0.0);
Proc_T_atm(AI_HMI.T_atm, AI_PLC.T_atm, del_T, tmp_T, APP_FST_SCN);
//-----------------------------------------------ТСП 50П
//Температура воздуха на входе в двигатель A1.1:45
tmp_T:= TSP(AI_DRV.Tv_in_D, 0.0);
Proc_Tv_in_D(AI_HMI.Tv_in_D, AI_PLC.Tv_in_D, del_T, tmp_T, APP_FST_SCN);
//-----------------------------------------------ТСМ 50М
//Температура воды на входе утилизатора A1.1:46
tmp_T:= TSM(AI_DRV.T_H20_in_Ut, 0.0);
Proc_T_H20_in_Ut(AI_HMI.T_H20_in_Ut, AI_PLC.T_H20_in_Ut, del_T, tmp_T, APP_FST_SCN);
//Температура воды на выходе утилизатора A1.1:47
tmp_T:= TSM(AI_DRV.T_H20_out_Ut, 0.0);
Proc_T_H20_out_Ut(AI_HMI.T_H20_out_Ut, AI_PLC.T_H20_out_Ut, del_T, tmp_T, APP_FST_SCN);
//-----------------------------------------------ТСП 50П
//Температура топливного газа на входе в БТА A1.1:48
tmp_T:= TSP(AI_DRV.Ttg_in_BTA, 0.0);
Proc_Ttg_in_BTA(AI_HMI.Ttg_in_BTA, AI_PLC.Ttg_in_BTA, del_T, tmp_T, APP_FST_SCN);
//Температура  в ББ A1.1:48
tmp_T:= TSM(AI_DRV.T_BB, 0.0);
Proc_T_BB(AI_HMI.T_BB, AI_PLC.T_BB, del_T, tmp_T, APP_FST_SCN);
//----------------------------------------------- 4-20мА
//Разрежение воздуха на входе в двигатель A1.1:53
Proc_Razr_out_D(AI_HMI.Razr_out_D, AI_PLC.Razr_out_D, del_T, AI_DRV.Razr_out_D, APP_FST_SCN);
//Давление масла на входе в двигатель (после фильтра) A1.1:54
Proc_Pm_D(AI_HMI.Pm_D, AI_PLC.Pm_D, del_T, AI_DRV.Pm_D, APP_FST_SCN);
//Давление масла смазки Н A1.1:55
Proc_Pm_N(AI_HMI.Pm_N, AI_PLC.Pm_N, del_T, AI_DRV.Pm_N, APP_FST_SCN);
//Перепад давлений масло-газ A1.1:56
Proc_dP_mg(AI_HMI.dP_mg, AI_PLC.dP_mg, del_T, AI_DRV.dP_mg, APP_FST_SCN);
//Давление топливного газа на входе БТА A1.1:57
Proc_Ptg_in_BTA(AI_HMI.Ptg_in_BTA, AI_PLC.Ptg_in_BTA, del_T, AI_DRV.Ptg_in_BTA, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Перепад давлений топливного газа на фильтре A1.1:58
Proc_dPtg_in_filtr(AI_HMI.dPtg_in_filtr, AI_PLC.dPtg_in_filtr, del_T, AI_DRV.dPtg_in_filtr, APP_FST_SCN);
//Давление газа на входе Н A1.1:59
//Proc_Pg_in_N(AI_HMI.Pg_in_N, AI_PLC.Pg_in_N, del_T, AI_DRV.Pg_in_N, APP_FST_SCN); //Перенесено в АПР
//Давление топливного газа на замерной нитке A1.1:60
Proc_Ptg_zamer(AI_HMI.Ptg_zamer, AI_PLC.Ptg_zamer, del_T, AI_DRV.Ptg_zamer, APP_FST_SCN);
//Перепад давлений топливного газа на диафрагме A1.1:61
Proc_dPtg_in_diaf(AI_HMI.dPtg_in_diaf, AI_PLC.dPtg_in_diaf, del_T, AI_DRV.dPtg_in_diaf, APP_FST_SCN);
//Давление газа на выходе Н A1.1:62
//Proc_Pg_out_N(AI_HMI.Pg_out_N, AI_PLC.Pg_out_N, del_T, AI_DRV.Pg_out_N, APP_FST_SCN); //Перенесено в АПР
//Перепад давлений на конфузоре A1.1:63
//Proc_dP_conf(AI_HMI.dP_conf, AI_PLC.dP_conf, del_T, AI_DRV.dP_conf, APP_FST_SCN); //Перенесено в АПР
//Давление атмосферного воздуха A1.1:64
Proc_P_atm(AI_HMI.P_atm, AI_PLC.P_atm, del_T, AI_DRV.P_atm, APP_FST_SCN);
//Перепад давлений газа на форсунках A1.2:1
Proc_dPg_fors(AI_HMI.dPg_fors, AI_PLC.dPg_fors, del_T, AI_DRV.dPg_fors, APP_FST_SCN);
//Давление воздуха за КВД A1.2:2
//Proc_Pv_out_KVD(AI_HMI.Pv_out_KVD, AI_PLC.Pv_out_KVD, del_T, AI_DRV.Pv_out_KVD, APP_FST_SCN);
//Перепад давлений масла на фильтре Н (ТП-22) A1.2:3
Proc_dPm_in_filtr_N(AI_HMI.dPm_in_filtr_N, AI_PLC.dPm_in_filtr_N, del_T, AI_DRV.dPm_in_filtr_N, APP_FST_SCN);
//Уровень в МБН A1.2:4
Proc_Lm_MBN(AI_HMI.Lm_MBN, AI_PLC.Lm_MBN, del_T, AI_DRV.Lm_MBN, APP_FST_SCN);
//Вибросмещение ОП нагнетателя A1.2:5
Proc_Vibr_OP_N(AI_HMI.Vibr_OP_N, AI_PLC.Vibr_OP_N, del_T, AI_DRV.Vibr_OP_N, APP_FST_SCN);
//Вибросмещение ОУП нагнетателя A1.2:6
Proc_Vibr_OUP_N(AI_HMI.Vibr_OUP_N, AI_PLC.Vibr_OUP_N, del_T, AI_DRV.Vibr_OUP_N, APP_FST_SCN);
//Вибрация корпуса КВД A1.2:7
Proc_Vibr_KVD(AI_HMI.Vibr_KVD, AI_PLC.Vibr_KVD, del_T, AI_DRV.Vibr_KVD, APP_FST_SCN);
//Вибрация корпуса КНД A1.2:8
Proc_Vibr_KND(AI_HMI.Vibr_KND, AI_PLC.Vibr_KND, del_T, AI_DRV.Vibr_KND, APP_FST_SCN);
//Вибрация корпуса ТН A1.2:9
Proc_Vibr_N(AI_HMI.Vibr_N, AI_PLC.Vibr_N, del_T, AI_DRV.Vibr_N, APP_FST_SCN);
//Положение топливно-регулирующего клапана (ДУС) A1.2:10
//Proc_Pos_TRK(AI_HMI.Pos_TRK, AI_PLC.Pos_TRK, del_T, AI_DRV.Pos_TRK, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)

//----------------------------------------------- Fastwell

AI_DRV.KCU_Upr_TRK := AI_DRV_F.KCU_Upr_TRK; 
AI_DRV.U_osn_RKBU := AI_DRV_F.U_osn_RKBU;
AI_DRV.U_res_RKBU := AI_DRV_F.U_res_RKBU;
AI_DRV.T_PLC := AI_DRV_F.T_contr;

//КЦУ. Управление топливно-регулирующим клапаном  A2.1:1
Proc_KCU_Upr_TRK(AI_HMI.KCU_Upr_TRK, AI_PLC.KCU_Upr_TRK, del_T, AI_DRV.KCU_Upr_TRK, APP_FST_SCN);
//Напряжение основного питания РК БУ A2.2:1
Proc_U_osn_RKBU(AI_HMI.U_osn_RKBU, AI_PLC.U_osn_RKBU, del_T, AI_DRV.U_osn_RKBU, APP_FST_SCN);
//Напряжение резервного питания РК БУ A2.2:2
Proc_U_res_RKBU(AI_HMI.U_res_RKBU, AI_PLC.U_res_RKBU, del_T, AI_DRV.U_res_RKBU, APP_FST_SCN);
//Температура контроллера A2.3:1
Proc_T_PLC(AI_HMI.T_PLC, AI_PLC.T_PLC, del_T, AI_DRV.T_PLC, APP_FST_SCN);
(*
//-------------------------FI
//Частота вращения КНД канал 1 A.1.9.1
Proc_N_KND_1(AI_HMI.N_KND_1, AI_PLC.N_KND_1, del_T, AI_DRV.N_KND_1, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Частота вращения КВД канал 1 A.1.9.2
Proc_N_KVD_1(AI_HMI.N_KVD_1, AI_PLC.N_KVD_1, del_T, AI_DRV.N_KVD_1, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Частота вращения ротора ТН канал 1 A.1.9.3
Proc_N_TN_1(AI_HMI.N_TN_1, AI_PLC.N_TN_1, del_T, AI_DRV.N_TN_1, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Частота вращения КНД канал 2 A.1.10.1
Proc_N_KND_2(AI_HMI.N_KND_2, AI_PLC.N_KND_2, del_T, AI_DRV.N_KND_2, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Частота вращения КВД канал 2 A.1.10.2 
Proc_N_KVD_2(AI_HMI.N_KVD_2, AI_PLC.N_KVD_2, del_T, AI_DRV.N_KVD_2, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
//Частота вращения ротора ТН канал 2 A.1.10.3
Proc_N_TN_2(AI_HMI.N_TN_2, AI_PLC.N_TN_2, del_T, AI_DRV.N_TN_2, APP_FST_SCN); //Перенесено в ТР (обработка в быстром цикле)
*)
END_IF;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="7930291B4CF1E89637D34B8CD3028170" Name="FB_AI_T_Proc">
                <Variables>
                    <Variable UUID="ABF70B9C4DEADE849B8884A5C8FFCB88" Name="OpStr1" Type="STRING" TypeUUID="38FDDE3B442D86554C56C884065F87B7" InitialValue="&apos;FALSE&apos;" Usage="internal" />
                    <Variable UUID="38AD49C143B87513B6FECFA23BE2022E" Name="Desc1" Type="LINT" TypeUUID="42538CCE4E2092AF59C11CBA28B52BB0" Usage="internal" />
                    <Variable UUID="058D923A4CD6A6F6C2D2A0A4624721A6" Name="ErrOp1" Type="DINT" TypeUUID="AF9665534C6D5BDEF9AE77B026938B65" Usage="internal" />
                    <Variable UUID="2B1961A34FCF06C17DA950A9C3DE8286" Name="Le1" Type="DINT" TypeUUID="AF9665534C6D5BDEF9AE77B026938B65" Usage="internal" />
                    <Variable UUID="A219DA7C455BB2AFDBC5D0A1339184D6" Name="EOF1" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="018275C04724F83DA184B3BD32FF23D9" Name="tmp1" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="E470EBB845B8234FD4F098928849CAA2" Name="OpStr2" Type="STRING" TypeUUID="38FDDE3B442D86554C56C884065F87B7" InitialValue="&apos;FALSE&apos;" Usage="internal" />
                    <Variable UUID="36113C5D432F82EA061B60B80F8E880F" Name="TmpData1" Type="STRING" TypeUUID="38FDDE3B442D86554C56C884065F87B7" InitialValue="&apos;FALSE&apos;" Usage="internal" />
                    <Variable UUID="071594D040F137E1E76FFB95959F0BC9" Name="TmpData11" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EF1CAE0D4792B670436EE489154A168E" Name="Desc2" Type="LINT" TypeUUID="42538CCE4E2092AF59C11CBA28B52BB0" Usage="internal" />
                    <Variable UUID="EBC1453346C5F3827F557AA179414CA6" Name="ErrOp2" Type="DINT" TypeUUID="AF9665534C6D5BDEF9AE77B026938B65" Usage="internal" />
                    <Variable UUID="B91C38AA484A7607922D3490D0ECF3E9" Name="Le2" Type="DINT" TypeUUID="AF9665534C6D5BDEF9AE77B026938B65" Usage="internal" />
                    <Variable UUID="E408C5624371BD72C5DE76AE4CDBBD55" Name="TmpData2" Type="STRING" TypeUUID="38FDDE3B442D86554C56C884065F87B7" InitialValue="&apos;FALSE&apos;" Usage="internal" />
                    <Variable UUID="D2E15D294CD25F7263E8E98BB3819261" Name="TmpData22" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AD39CD604AD1177ED585FBAB85B2E1F7" Name="EOF2" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="D2454D814F9DBAE7780B7D87DBB88FC6" Name="tmp2" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="DDF86A9C4746FE64C191C8B3F62D99B8" Name="TempProc1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="output" />
                    <Variable UUID="DF44D63444F23A1862CCCAA091F1D7DE" Name="TempProc2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="output" />
                </Variables>
                <ST><![CDATA[//Температура процессора
OpStr1 := '/sys/bus/i2c/devices/0-0019/temp2_input';
Desc1 := FILE_OPEN(OpStr1, 'r', ErrOp1);
Le1:= FILE_READ(Desc1, TmpData1, DINT#5, EOF1);
TmpData11:= String_to_real(TmpData1);
TempProc1:=TmpData11/1000.0;
tmp1 := FILE_CLOSE(Desc1);

OpStr2 := '/sys/bus/i2c/devices/0-002b/temp2_input';  
Desc2 := FILE_OPEN(OpStr2, 'r', ErrOp2);
Le2:= FILE_READ(Desc2, TmpData2, DINT#5, EOF2);
TmpData22:= String_to_real(TmpData2);
TempProc2:=TmpData22/1000.0;
tmp2 := FILE_CLOSE(Desc2);



//SEN_AI10161_T_pr1.PV_calc_eu := REAL_TO_LREAL(TempProc1);
//SEN_AI10162_T_pr2.PV_calc_eu := REAL_TO_LREAL(TempProc2);



(*
OpStr1 := '/sys/bus/i2c/devices/0-0019/temp2_input';
Desc1 := FILE_OPEN(OpStr1, 'r', ErrOp1);
Le1:= FILE_READ(Desc1, TmpData1, DINT#5, EOF1);
TmpData11:= String_to_real(TmpData1);
TempProc1:=TmpData11/1000.0;
tmp1 := FILE_CLOSE(Desc1);

OpStr2 := '/sys/bus/i2c/devices/0-002b/temp2_input';  
Desc2 := FILE_OPEN(OpStr2, 'r', ErrOp2);
Le2:= FILE_READ(Desc2, TmpData2, DINT#5, EOF2);
TmpData22:= String_to_real(TmpData2);
TempProc2:=TmpData22/1000.0;
tmp2 := FILE_CLOSE(Desc2);



SEN_AI10161_T_pr1.PV_calc_eu := REAL_TO_LREAL(TempProc1);
SEN_AI10162_T_pr2.PV_calc_eu := REAL_TO_LREAL(TempProc2);
*)]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="F3E060074330CC4FF31FEBBC1C6F9352" Name="FB_Analysis_AI">
                <Variables>
                    <Variable UUID="B95448404AAE205CC2FFF3992A8D6698" Name="AI" Type="AI_HMI" TypeUUID="5C4EAAB340E0F06BB767F6AEE30C69DF" Usage="input" />
                    <Variable UUID="67A8827F41BB46EC679F12A578915CDD" Name="Permit" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="575545124C6FD185A82125A5EF256B76" Name="AI_Mas" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="6" Array="TRUE" Usage="internal" />
                    <Variable UUID="CBCE72744B9EF0A97C758581586B2E1A" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="3EADB51F4FD55273E71B6AA38395E4FF" Name="Calc" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="579324DD4893AC02E0A79FAD6AF73EB8" Name="Calc_Ch" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6D04674C47482FDEB6995A92D34C79A6" Name="Alarm_out" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                    <Variable UUID="62EFCBA8493427D51E44FCB99DD7D587" Name="Ust" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                </Variables>
                <ST><![CDATA[IF NOT AI.Condition.fault_common AND Permit THEN

Calc:= TRUE;
FOR i:=0 TO 5 DO
 IF AI_Mas[i] = 0.0 THEN  Calc:= FALSE; END_IF;
END_FOR;

AI_Mas[5]:= AI.PV;

FOR i:=0 TO 4 DO
 AI_Mas[i] := AI_Mas[i+1] ;
END_FOR;

IF Calc THEN Calc_Ch := (100.0*(AI_Mas[0] - AI_Mas[4]))/AI_Mas[0]; END_IF; 

Alarm_out := Calc_Ch > Ust;






ELSE
  Calc_Ch := 0.0;
  Alarm_out := FALSE;
  Calc := FALSE; 
FOR i:=0 TO 5 DO
  AI_Mas[i]:= 0.0;
END_FOR;

END_IF;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="116E068544A68BD9AFA91AB5EFDFD8EA" Name="FB_Calc_AI">
                <Variables>
                    <Variable UUID="A5D2CC4148D540382465BF8F845F9181" Name="T" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="17" Array="TRUE" Usage="internal" />
                    <Variable UUID="3AD4E4954E38EAB09E5EDEA8AB5AC873" Name="T_repair" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="17" Array="TRUE" Usage="internal" />
                    <Variable UUID="F738DC33487B69A6DE58029A28A5E0F1" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="AAE4F2754DB0296D8C37D79518175C99" Name="T_repair_Add" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Расчетные
Calc_AI.T_PROC1 := SEN_T_PROC1;
Calc_AI.T_PROC2 := SEN_T_PROC2;
//Расчетные обороты КНД
Calc_AI.N_KND.PV := Calc_FR.Nnd.out;
Calc_AI.N_KND.fault := Calc_FR.Nnd.outBrk;
//Расчетные обороты КВД
Calc_AI.N_KVD.PV := Calc_FR.Nvd.out;
Calc_AI.N_KVD.fault := Calc_FR.Nvd.outBrk;
//Расчетные обороты ТН
Calc_AI.N_TN.PV := Calc_FR.Nst.out;
Calc_AI.N_TN.fault := Calc_FR.Nst.outBrk;
//Расчетная Температура  на выходе ТНД
Calc_AI.Tg_out_TND.PV := Calc_FR.Tg_outTND.out;
Calc_AI.Tg_out_TND.fault := Calc_FR.Tg_outTND.outBrk;

Calc_AI.dT_Tg_out_TND_1 := Calc_FR.dTg_outTND[0];
Calc_AI.dT_Tg_out_TND_2 := Calc_FR.dTg_outTND[1];
Calc_AI.dT_Tg_out_TND_3 := Calc_FR.dTg_outTND[2];
Calc_AI.dT_Tg_out_TND_4 := Calc_FR.dTg_outTND[3];
Calc_AI.dT_Tg_out_TND_5 := Calc_FR.dTg_outTND[4];
Calc_AI.dT_Tg_out_TND_6 := Calc_FR.dTg_outTND[5];
Calc_AI.dT_Tg_out_TND_7 := Calc_FR.dTg_outTND[6];
Calc_AI.dT_Tg_out_TND_8 := Calc_FR.dTg_outTND[7];
Calc_AI.dT_Tg_out_TND_9 := Calc_FR.dTg_outTND[8];
Calc_AI.dT_Tg_out_TND_10 := Calc_FR.dTg_outTND[9];
Calc_AI.dT_Tg_out_TND_11 := Calc_FR.dTg_outTND[10];
Calc_AI.dT_Tg_out_TND_12 := Calc_FR.dTg_outTND[11];
Calc_AI.dT_Tg_out_TND_13 := Calc_FR.dTg_outTND[12];
Calc_AI.dT_Tg_out_TND_14 := Calc_FR.dTg_outTND[13];
Calc_AI.dT_Tg_out_TND_15 := Calc_FR.dTg_outTND[14];
Calc_AI.dT_Tg_out_TND_16 := Calc_FR.dTg_outTND[15];

//Расчетные Температура перед камерой сгорания (за КНД)
Calc_AI.Tg_in_KND.PV := Calc_FR.Tv_outKND.out;
//Расчетные Температура  на выходе ТНД на запуске
Calc_AI.Tg_in_TND.PV := Calc_FR.Tg_outTNDstart.out;
//Расчетные Перепад температуры в КС
Calc_AI.dT_KC.PV := Calc_FR.dT_onKS;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="8AAD82304A3ABCB1C27E3DA4EE7975C0" Name="FB_DI0">
                <Variables>
                    <Variable UUID="251F45B0442608F769DD1AA06BB366CD" Name="A2_11" Type="DWORD" TypeUUID="53CAB7E947643F098D755BB9A02688FA" Usage="internal" />
                    <Variable UUID="54D29DB74B766120087F9CA81516895C" Name="A2_12" Type="DWORD" TypeUUID="53CAB7E947643F098D755BB9A02688FA" Usage="internal" />
                    <Variable UUID="C759F1E34CEBD7244470ACA521C3376F" Name="A2_13" Type="DWORD" TypeUUID="53CAB7E947643F098D755BB9A02688FA" Usage="internal" />
                    <Variable UUID="8EFD8678486EF97463CEE590685E02ED" Name="A2_14" Type="DWORD" TypeUUID="53CAB7E947643F098D755BB9A02688FA" Usage="internal" />
                    <Variable UUID="3937FD804C2FB5FEF82928A4197AFE79" Name="A2_15" Type="DWORD" TypeUUID="53CAB7E947643F098D755BB9A02688FA" Usage="internal" />
                </Variables>
                <ST><![CDATA[IF NOT (LG.Force_DI OR LG.IMIT_ON) THEN
//A1.4:1: Кран № 1 открыт
DGI.Kr1_ON :=  DI_DRV.Kr1_ON;
//A1.4:2: КЦД. Кран № 1 открыт
DGI.KCD_Kr1_ON :=  DI_DRV.KCD_Kr1_ON;
//A1.4:3: Кран № 1 закрыт
DGI.Kr1_OF :=  DI_DRV.Kr1_OF;
//A1.4:4: КЦД. Кран № 1 закрыт
DGI.KCD_Kr1_OF :=  DI_DRV.KCD_Kr1_OF;
//A1.4:5: Кран № 2 открыт
DGI.Kr2_ON :=  DI_DRV.Kr2_ON;
//A1.4:6: КЦД. Кран № 2 открыт
DGI.KCD_Kr2_ON :=  DI_DRV.KCD_Kr2_ON;
//A1.4:7: Кран № 2 закрыт
DGI.Kr2_OF :=  DI_DRV.Kr2_OF;
//A1.4:8: КЦД. Кран № 2 закрыт
DGI.KCD_Kr2_OF :=  DI_DRV.KCD_Kr2_OF;
//A1.4:9: Кран № 4 открыт
DGI.Kr4_ON :=  DI_DRV.Kr4_ON;
//A1.4:10: КЦД. Кран № 4 открыт
DGI.KCD_Kr4_ON :=  DI_DRV.KCD_Kr4_ON;
//A1.4:11: Кран № 4 закрыт
DGI.Kr4_OF :=  DI_DRV.Kr4_OF;
//A1.4:12: КЦД. Кран № 4 закрыт
DGI.KCD_Kr4_OF :=  DI_DRV.KCD_Kr4_OF;
//A1.4:13: Кран № 5 открыт
DGI.Kr5_ON :=  DI_DRV.Kr5_ON;
//A1.4:14: КЦД. Кран № 5 открыт
DGI.KCD_Kr5_ON :=  DI_DRV.KCD_Kr5_ON;
//A1.4:15: Кран № 5 закрыт
DGI.Kr5_OF :=  DI_DRV.Kr5_OF;
//A1.4:16: КЦД. Кран № 5 закрыт
DGI.KCD_Kr5_OF :=  DI_DRV.KCD_Kr5_OF;
//A1.4:17: Кран № 6 открыт
DGI.Kr6_ON :=  DI_DRV.Kr6_ON;
//A1.4:18: КЦД. Кран № 6 открыт
DGI.KCD_Kr6_ON :=  DI_DRV.KCD_Kr6_ON;
//A1.4:19: Кран № 6 закрыт
DGI.Kr6_OF :=  DI_DRV.Kr6_OF;
//A1.4:20: КЦД. Кран № 6 закрыт
DGI.KCD_Kr6_OF :=  DI_DRV.KCD_Kr6_OF;
//A1.4:21: Кран № 9 открыт
DGI.Kr9_ON :=  DI_DRV.Kr9_ON;
//A1.4:22: КЦД. Кран № 9 открыт
DGI.KCD_Kr9_ON :=  DI_DRV.KCD_Kr9_ON;
//A1.4:23: Кран № 9 закрыт
DGI.Kr9_OF :=  DI_DRV.Kr9_OF;
//A1.4:24: КЦД. Кран № 9 закрыт
DGI.KCD_Kr9_OF :=  DI_DRV.KCD_Kr9_OF;
//A1.4:25: Кран № 12 открыт
DGI.Kr12_ON :=  DI_DRV.Kr12_ON;
//A1.4:26: КЦД. Кран № 12 открыт
DGI.KCD_Kr12_ON :=  DI_DRV.KCD_Kr12_ON;
//A1.4:27: Кран № 12 закрыт
DGI.Kr12_OF :=  DI_DRV.Kr12_OF;
//A1.4:28: КЦД. Кран № 12 закрыт
DGI.KCD_Kr12_OF :=  DI_DRV.KCD_Kr12_OF;
//A1.4:31: Перепад давлений масла на фильтре на входе в Д больше 0.1 МПа
DGI.dPm_in_D := DI_DRV.dPm_in_D;
//A1.4:32: Перепад давлений масла на фильтре на входе в БТА больше 0.1 МПа
DGI.dPm_in_BTA :=  DI_DRV.dPm_in_BTA;
//A1.4:33: Перепад давлений масло-газ меньше 0.03 Мпа
DGI.dPmg :=  DI_DRV.dPmg;
//A1.4:34: КЦД. Перепад давлений масло-газ меньше 0.03 Мпа
DGI.KCD_dPmg :=  DI_DRV.KCD_dPmg;
//A1.4:35: Осевой сдвиг ротора нагнетателя вперед (к турбине)
DGI.Sdvig_N_ahead :=  DI_DRV.Sdvig_N_ahead;
//A1.4:36: КЦД. Осевой сдвиг ротора нагнетателя вперед (к турбине)
DGI.KCD_Sdvig_N_ahead :=  DI_DRV.KCD_Sdvig_N_ahead;
//A1.4:37: Осевой сдвиг ротора нагнетателя назад (от турбины)
DGI.Sdvig_N_back :=  DI_DRV.Sdvig_N_back;
//A1.4:38: КЦД. Осевой сдвиг ротора нагнетателя назад (от турбины)
DGI.KCD_Sdvig_N_back :=  DI_DRV.KCD_Sdvig_N_back;
//A1.4:39: Помпаж нагнетателя
DGI.Pomp_N :=  DI_DRV.Pomp_N;
//A1.4:40: КЦД. Помпаж нагнетателя
DGI.KCD_Pomp_N :=  DI_DRV.KCD_Pomp_N;
//A1.4:41: Давление масла на входе в Д аварийно низкое меньше 0.1 МПа
DGI.Pm_in_D_alarm_low :=  NOT DI_DRV.Pm_in_D_alarm_low;
//A1.4:42: КЦД. Давление масла на входе в Д аварийно низкое меньше 0.1 Мпа
DGI.KCD_Pm_in_D_alarm_low :=  DI_DRV.KCD_Pm_in_D_alarm_low;
//A1.4:43: Давление масла на входе в Д больше 0.02 МПа
DGI.Pm_in_D_002 :=  DI_DRV.Pm_in_D_002;
//A1.4:44: КЦД. Давление масла на входе в Д больше 0.02 Мпа
DGI.KCD_Pm_in_D_003 :=  DI_DRV.KCD_Pm_in_D_003;
//A1.4:45: Давление масла на входе в Д низкое меньше 0.2 МПа
DGI.Pm_in_D_low002 :=  NOT DI_DRV.Pm_in_D_low002;
//A1.4:46: Перепад давлений масла на МОБе больше 0.05 МПа
DGI.dPm_MOB_005 :=  DI_DRV.dPm_MOB_005;
//A1.4:47: Давление масла за эл. МНОД больше 0,02 МПа
DGI.Pm_MNOD_002 :=  DI_DRV.Pm_MNOD_002;
//A1.4:48: КЦД. Давление масла за эл. МНОД больше 0,02 Мпа
DGI.KCD_Pm_MNOD_003 :=  DI_DRV.KCD_Pm_MNOD_003;
//A1.4:49: Давление масла за нав. МНОД больше 0.04 МПа
DGI.Pm_MNOD_004 :=  DI_DRV.Pm_MNOD_004;
//A1.4:50: Давление масла в трубопроводе до МНУ
DGI.Pm_till_MNU :=  DI_DRV.Pm_till_MNU;
//A1.4:51: Давление газа в полости Н
DGI.Pg_in_P_N :=  DI_DRV.Pg_in_P_N;
//A1.4:52: Давление масла на смазку подшипников Н
DGI.Pm_POD_N := DI_DRV.Pm_POD_N;
//A1.4:53: Перепад давлений газа на кране N1
DGI.dPg_in_Kr1 :=  DI_DRV.dPg_in_Kr1;
//A1.4:54: Давление масла на входе в систему смазки Н РД1
DGI.Pm_N_RD1 :=  DI_DRV.Pm_N_RD1;
//A1.4:55: Давление воздуха в маслобаке Д больше 0.02 МПа
DGI.Pv_MB_N_002 := NOT DI_DRV.Pv_MB_N_002;
//A1.4:56: Давление масла уплотнения низкое
DGI.Pm_upl_low :=  DI_DRV.Pm_upl_low;
//A1.4:57: Наличие напряжения в цепях управления ПМНС
DGI.U_PMNS :=  DI_DRV.U_PMNS;
//A1.4:58: Наличие напряжения в цепях управления МНУ I
IF DGI.MNU_2_ON then 
DGI.U_MNU_1 := true;
else
DGI.U_MNU_1 :=  DI_DRV.U_MNU_1;
end_if;
//A1.4:59: Наличие напряжения в цепях управления МНУ II
IF DGI.MNU_1_ON then
DGI.U_MNU_2 := true;
else
DGI.U_MNU_2 :=  DI_DRV.U_MNU_2;
end_if;
//A1.4:60: Уровень масла в МБН верхний
DGI.Lm_MBN_up :=  DI_DRV.Lm_MBN_up;
//A1.4:61: Уровень масла в МБН нижний
DGI.Lm_MBN_down :=  DI_DRV.Lm_MBN_down;
//A1.4:62: Уровень масла в МБД верхний
DGI.Lm_MBD_up :=  DI_DRV.Lm_MBD_up;
//A1.4:63: Уровень масла в МБД аварийный
DGI.Lm_MBD_alarm :=  DI_DRV.Lm_MBD_alarm;
//A1.4:64: КЦД. Уровень масла в МБД аварийный
DGI.KCD_Lm_MBD_alarm :=  DI_DRV.KCD_Lm_MBD_alarm;
//A1.5:1: Уровень масла в МБД нижний
DGI.Lm_MBD_down :=  DI_DRV.Lm_MBD_down;
//A1.5:2: Стоп-кран открыт
DGI.SK_ON :=  DI_DRV.SK_ON;
//A1.5:3: Стоп-кран закрыт
DGI.SK_OF :=  DI_DRV.SK_OF;
//A1.5:5: Давление газа на входе в БТА больше 1.6 МПа
DGI.Pg_in_BTA_16 :=  DI_DRV.Pg_in_BTA_16;
//A1.5:6: Наличие стружки на сливе из КП
DGI.Chips_KP :=  DI_DRV.Chips_KP;
//A1.5:7: Наличие стружки на сливе из переходника
DGI.Chips_Per :=  DI_DRV.Chips_Per;
//A1.5:8: Наличие стружки на сливе из ЗК КВД
DGI.Chips_KVD :=  DI_DRV.Chips_KVD;
//A1.5:9: Наличие стружки на сливе из ОВ ТНД Д
DGI.Chips_TND :=  DI_DRV.Chips_TND;
//A1.5:10: Наличие стружки на сливе из ОВ ТН Д
DGI.Chips_TN :=  DI_DRV.Chips_TN;
//A1.5:11: ПМНС Н включен
DGI.PMNS_ON :=  DI_DRV.PMNS_ON;
//A1.5:12: ПМНС Н отключен
DGI.PMNS_OF := DI_DRV.PMNS_OF;
//A1.5:13: МНУ (1 секция) включен
DGI.MNU_1_ON :=  DI_DRV.MNU_1_ON;
//A1.5:14: МНУ (1 секция) отключен
DGI.MNU_1_OF := DI_DRV.MNU_1_OF;
//A1.5:15: МНУ (2 секция) включен
DGI.MNU_2_ON :=  DI_DRV.MNU_2_ON;
//A1.5:16: МНУ (2 секция) отключен
DGI.MNU_2_OF := DI_DRV.MNU_2_OF;
//A1.5:18: МННД включен
DGI.MNND_ON :=  DI_DRV.MNND_ON;
//A1.5:19: МННД отключен
DGI.MNND_OF := DI_DRV.MNND_OF;
//A1.5:20: МНОД включен
DGI.MNOD_ON :=  DI_DRV.MNOD_ON;
//A1.5:21: МНОД отключен
DGI.MNOD_OF := DI_DRV.MNOD_OF;
//A1.5:22: МНОБ Д включен
DGI.MNOB_ON :=  DI_DRV.MNOB_ON;
//A1.5:23: МНОБ Д отключен
DGI.MNOB_OF := DI_DRV.MNOB_OF;
//A1.5:24: ВОД 1 включен
DGI.VOD_1_ON :=  DI_DRV.VOD_1_ON;
//A1.5:25: ВОД 2 включен
DGI.VOD_2_ON :=  DI_DRV.VOD_2_ON;
//A1.5:26: ВМОН1 включен
DGI.VMON_1_ON :=  DI_DRV.VMON_1_ON;
//A1.5:27: ВМОН4 включен
DGI.VMON_4_ON :=  DI_DRV.VMON_4_ON;
//A1.5:28: ВМОД2 включен
DGI.VMOD_2_ON :=  DI_DRV.VMOD_2_ON;
//A1.5:29: ВМОД3 включен
DGI.VMOD_3_ON :=  DI_DRV.VMOD_3_ON;
//A1.5:30: ВМОД5 включен
DGI.VMOD_5_ON :=  DI_DRV.VMOD_5_ON;
//A1.5:31: ВМОД6 включен
DGI.VMOD_6_ON :=  DI_DRV.VMOD_6_ON;
//A1.5:32: КУ в КК1 и КК2 включены
DGI.KU_and_ON :=  DI_DRV.KU_and_ON;
//A1.5:33: КУ в КК1 или КК2 включен
DGI.KU_or_ON :=  DI_DRV.KU_or_ON;
//A1.5:34: К1 1ск. (РК1) в КК1 включен
DGI.K1_KK1_1_ON :=  DI_DRV.K1_KK1_1_ON;
//A1.5:35: К2 2ск. (РК2) в КК1 включен
DGI.K2_KK1_2_ON :=  DI_DRV.K2_KK1_2_ON;
//A1.5:36: КУ в КК1 включен
DGI.KU_KK1_ON :=  DI_DRV.KU_KK1_ON;
//A1.5:37: К1 1ск. (РК1) в КК2 включен
DGI.K1_KK2_1_ON :=  DI_DRV.K1_KK2_1_ON;
//A1.5:38: К2 2ск. (РК2) в КК2 включен
DGI.K2_KK2_2_ON :=  DI_DRV.K2_KK2_2_ON;
//A1.5:39: КУ в КК2 включен
DGI.KU_KK2_ON :=  DI_DRV.KU_KK2_ON;
//A1.5:40: Наличие напряжения ~380 В в КК
DGI.U380_KK :=  DI_DRV.U380_KK;
//A1.5:41: ТЭН1 в МБН включен
DGI.TEN1_MBN_ON :=  DI_DRV.TEN1_MBN_ON;
//A1.5:42: ТЭН2 в МБН включен
DGI.TEN2_MBN_ON :=  DI_DRV.TEN2_MBN_ON;
//A1.5:43: ТЭН3 в МБН включен
DGI.TEN3_MBN_ON :=  DI_DRV.TEN3_MBN_ON;
//A1.5:44: ТЭН4 в МБН включен
DGI.TEN4_MBN_ON :=  DI_DRV.TEN4_MBN_ON;
//A1.5:45: ТЭН1 трубопроводов Н включен
DGI.TEN1_N_ON :=  DI_DRV.TEN1_N_ON;
//A1.5:46: ТЭН2 трубопроводов Н включен
DGI.TEN2_N_ON :=  DI_DRV.TEN2_N_ON;
//A1.5:47: ТЭН3 трубопроводов Н включен
DGI.TEN3_N_ON :=  DI_DRV.ICE_VOU; //DI_DRV.TEN3_N_ON; //вернуть на место 
//A1.5:48: ТЭН4 трубопроводов Н включен
DGI.TEN4_N_ON :=  DI_DRV.TEN4_N_ON;
//A1.5:49: ТЭН МБД включен
DGI.TEN_MBD_ON :=  DI_DRV.TEN_MBD_ON;
//A1.5:50: Контроль ОРТ
DGI.ORT_check :=  DI_DRV.ORT_check;
//A1.5:51: Авария ОРТ
DGI.ORT_alarm :=  DI_DRV.ORT_alarm;
//A1.5:52: КЦД. Авария ОРТ
DGI.KCD_ORT_alarm :=  DI_DRV.KCD_ORT_alarm;
//A1.5:53: ВНА в положении -10
DGI.Pos_m10_VNA :=  DI_DRV.Pos_m10_VNA;
//A1.5:54: ВНА в положении +15
DGI.Pos_p15_VNA :=  DI_DRV.Pos_p15_VNA;
//A1.5:55: Загазованность галереи Н больше 1 %
DGI.Gas_N :=  DI_DRV.Gas_N;
//A1.5:56: КЦД. Загазованность галереи Н больше 1 %
DGI.KCD_Gas_N :=  DI_DRV.KCD_Gas_N;
//A1.5:59: Обледенение ВОУ (СОУ-1)
//DGI.ICE_VOU :=  DI_DRV.ICE_VOU;
//A1.5:61: Пожар в МБД, МБН, МФ (порошок)
DGI.Fire :=  DI_DRV.Fire;
//A1.5:62: КЦД. Пожар в МБД, МБН, МФ (порошок)
DGI.KCD_Fire :=  DI_DRV.KCD_Fire;
//A1.5:63: Сист.порош.пожаротуш.неисправ.
DGI.pgrP_brk :=  DI_DRV.pgrP_brk;
//A1.6:1: Аварийный останов (АО) от кнопки в машзале
DGI.AO_btn :=  DI_DRV.AO_btn;
//A1.6:2: КЦД. Аварийный останов (АО) от кнопки в машзале
DGI.KCD_AO_btn :=  DI_DRV.KCD_AO_btn;
//A1.6:5: Аварийный останов (АО) от САУ КЦ
DGI.AO_SAU :=  DI_DRV.AO_SAU;
//A1.6:6: КЦД. Аварийный останов (АО) от САУ КЦ
DGI.KCD_AO_SAU :=  DI_DRV.KCD_AO_SAU;
//A1.6:7: Двери блок-бокса САУ ГПА открыты
DGI.Door_SAU_open :=  DI_DRV.Door_SAU_open;
//A1.6:33: КЦУ. Кран №1 открыть
DGI.KCU_Kr1_ON :=  DI_DRV.KCU_Kr1_ON;
//A1.6:34: КЦУ. Кран №1 закрыть
DGI.KCU_Kr1_OF :=  DI_DRV.KCU_Kr1_OF;
//A1.6:35: КЦУ. Кран № 1 смазка
DGI.KCU_Kr1_oil :=  DI_DRV.KCU_Kr1_oil;
//A1.6:36: КЦУ. Кран № 2 открыть
DGI.KCU_Kr2_ON :=  DI_DRV.KCU_Kr2_ON;
//A1.6:37: КЦУ. Кран № 2 закрыть
DGI.KCU_Kr2_OF :=  DI_DRV.KCU_Kr2_OF;
//A1.6:38: КЦУ. Кран № 2 смазка
DGI.KCU_Kr2_oil :=  DI_DRV.KCU_Kr2_oil;
//A1.6:39: КЦУ. Кран № 4 открыть
DGI.KCU_Kr4_ON :=  DI_DRV.KCU_Kr4_ON;
//A1.6:40: КЦУ. Кран № 4 закрыть
DGI.KCU_Kr4_OF :=  DI_DRV.KCU_Kr4_OF;
//A1.6:41: КЦУ. Кран № 5 открыть
DGI.KCU_Kr5_ON :=  DI_DRV.KCU_Kr5_ON;
//A1.6:42: КЦУ. Кран № 5 закрыть
DGI.KCU_Kr5_OF :=  DI_DRV.KCU_Kr5_OF;
//A1.6:43: КЦУ. ран № 6 открыть
DGI.KCU_Kr6_ON :=  DI_DRV.KCU_Kr6_ON;
//A1.6:44: КЦУ. Кран № 6 закрыть
DGI.KCU_Kr6_OF :=  DI_DRV.KCU_Kr6_OF;
//A1.6:45: КЦУ. Кран № 9 открыть
DGI.KCU_Kr9_ON :=  DI_DRV.KCU_Kr9_ON;
//A1.6:46: КЦУ. Кран № 9 закрыть
DGI.KCU_Kr9_OF :=  DI_DRV.KCU_Kr9_OF;
//A1.6:47: КЦУ. Кран № 12 открыть
DGI.KCU_Kr12_ON :=  DI_DRV.KCU_Kr12_ON;
//A1.6:48: КЦУ. Кран № 12 закрыть
DGI.KCU_Kr12_OF :=  DI_DRV.KCU_Kr12_OF;
//A1.6:53: КЦУ. ПМНС Н включить
DGI.KCU_PMNS_OM :=  DI_DRV.KCU_PMNS_OM;
//A1.6:55: КЦУ. МНУ (1 секция) включить
IF DGI.MNU_2_ON then 
DGI.KCU_MNU_1_ON := true;
else
DGI.KCU_MNU_1_ON :=  DI_DRV.KCU_MNU_1_ON;
end_if;
//A1.6:56: КЦУ. МНУ (2 секция) включить
IF DGI.MNU_1_ON then 
DGI.KCU_MNU_2_ON := true;
else
DGI.KCU_MNU_2_ON :=  DI_DRV.KCU_MNU_2_ON;
end_if;
//A1.6:57: КЦУ. МННД включить
DGI.KCU_MNND_ON :=  DI_DRV.KCU_MNND_ON;
//A1.6:58: КЦУ. МНОД включить
DGI.KCU_MNOD_ON :=  DI_DRV.KCU_MNOD_ON;
//A1.6:59: КЦУ. МНОБ Д включить
DGI.KCU_MNOB_D_ON :=  DI_DRV.KCU_MNOB_D_ON;
//A1.6:60: КЦУ. ВОД1 включить
DGI.KCU_VOD_1_ON :=  DI_DRV.KCU_VOD_1_ON;
//A1.6:61: КЦУ. ВОД2 включить
DGI.KCU_VOD_2_ON :=  DI_DRV.KCU_VOD_2_ON;

//-------------------------------------Fastwell


A2_11 :=  WORD_TO_DWORD( DI_DRV_F.A2_11 );
A2_12 :=  WORD_TO_DWORD( DI_DRV_F.A2_12 );
A2_13 :=  WORD_TO_DWORD( DI_DRV_F.A2_13 );
A2_14 :=  WORD_TO_DWORD( DI_DRV_F.A2_14 );
A2_15 :=  WORD_TO_DWORD( DI_DRV_F.A2_15 );

//A2.5:1: Контроль основного питания РК БУ ~220 В
DGI.Check_U_AC220 :=  EXTRACT( A2_11, 0	);
//A2.5:2: Контроль резервного питания РК БУ =220 В
DGI.Check_U_DC220 :=  EXTRACT( A2_11, 1	);
//A2.5:3: Контроль исправности разрядников
DGI.Check_UZIP :=  EXTRACT( A2_11, 2 );
//A2.5:4: Автоматы питания включены
DGI.QF_ON :=  EXTRACT( A2_11, 3	);
//A2.5:5: Контроль основного питания БЭАО ~220 В
DGI.Check_U_DC220_BEO_osn :=  EXTRACT( A2_11, 4 );
//A2.5:6: Контроль резервного питания БЭАО =220 В
DGI.Check_U_DC220_BEO_rez :=  EXTRACT( A2_11, 5	);
//A2.5:7: Контроль питания терминальных панелей AI
DGI.Check_U_AI_Tp :=  EXTRACT( A2_11, 6 );
//A2.5:8: Контроль питания терминальных панелей DI
DGI.Check_U_DI_Tp :=  EXTRACT( A2_11, 7 );

//A2.6:1: Контроль питания терминальных панелей DO
DGI.Check_U_D0_Tp :=  EXTRACT( A2_12, 0	);
//A2.6:2: Исправность основного ИП =24В ПЛК
DGI.Check_U_DC24_PLC_osn :=  EXTRACT( A2_12, 1 );
//A2.6:3: Исправность резервного ИП =24В ПЛК
DGI.Check_U_DC24_PLC_rez :=  EXTRACT( A2_12, 2 );
//A2.6:4: Исправность основного ИП =24В внутренних устройств
DGI.Check_U_DC24_VU_osn :=  EXTRACT( A2_12, 3 );
//A2.6:5: Исправность резервного ИП =24В внутренних устройств
DGI.Check_U_DC24_VU_rez :=  EXTRACT( A2_12, 4 );
//A2.6:6: Исправность основного ИП =24В аналоговых входов
DGI.Check_U_DC24_AI_osn :=  EXTRACT( A2_12, 5 );
//A2.6:7: Исправность резервного ИП =24В аналоговых входов
DGI.Check_U_DC24_AI_rez :=  EXTRACT( A2_12, 6 );

//A2.7:1: Исправность основного ИП =24В DI, (внеш.)
DGI.Check_U_DC24_DI_osn :=  EXTRACT( A2_13, 0 );
//A2.7:2: Исправность резервного ИП =24В DI, (внеш.)
DGI.Check_U_DC24_DI_rez :=  EXTRACT( A2_13, 1 );
//A2.7:3: Исправность основного ИП =24В внешних устройств
DGI.Check_U_DC24_VU_1_osn :=  EXTRACT( A2_13, 2 );
//A2.7:4: Исправность резервного ИП =24В внешних устройств
DGI.Check_U_DC24_VU_1_rez :=  EXTRACT( A2_13, 3 );
//A2.7:5: Исправность основного ИП =24В БЭО, РПКУ
DGI.Check_U_DC24_BEO_osn :=  EXTRACT( A2_13, 4 );
//A2.7:6: Исправность резервного ИП =24В БЭО , РПКУ
DGI.Check_U_DC24_BEO_rez :=  EXTRACT( A2_13, 5 );
//A2.7:7: Контроль питания +15 В СО-1
DGI.Check_U_CO1_plus :=  EXTRACT( A2_13, 6 );
//A2.7:8: Контроль питания -15 В СО-1
DGI.Check_U_CO1_minus :=  EXTRACT( A2_13, 7 );
//A2.8:1: Кнопка «ЭАО» нажата
DGI.But_BEO_ON :=  EXTRACT( A2_14, 0 );
//A2.8:2: КЦД. Кнопка «ЭАО» нажата
DGI.KCD_But_BEO_ON :=  EXTRACT( A2_14, 1 );
//A2.8:3: Кнопка «АО ГПА» нажата
DGI.But_AO_ON :=  EXTRACT( A2_14, 2 );
//A2.8:4: КЦД. Кнопка «АО ГПА» нажата
DGI.KCD_But_AO_ON :=  EXTRACT( A2_14, 3 );
//A2.8:5: Кнопка «НО ГПА» нажата
DGI.But_NO_ON :=  EXTRACT( A2_14, 4 );
//A2.8:6: Готовность БЭО
DGI.BEO_ready :=  EXTRACT( A2_14, 5 );
//A2.8:7: Кнопка «Квитирование» нажата
DGI.But_Kvit_ON :=  EXTRACT( A2_14, 6 );
//A2.8:8: БЭО работает
DGI.BEO_work :=  EXTRACT( A2_14, 7 );

//A2.9:1: Контроль основного питания БУШД ~220 В
DGI.Check_U_osn_BUSHD220 :=  EXTRACT( A2_15, 0 );
//A2.9:2: Контроль резервного питания БУШД =24 В
DGI.Check_U_osn_BUSHD24 :=  EXTRACT( A2_15, 1 );
//A2.9:3: Контроль питания кранов =110 В
DGI.Chec_Ukr_110 :=  EXTRACT( A2_15, 2 );
//A2.9:4: Контроль питания ПРУ =24 В
DGI.Check_U_PRU24 :=  EXTRACT( A2_15, 3 );
//A2.9:5: Контроль питания датчиков уровня и вибрации =24 В
DGI.Check_Uvibr24 :=  EXTRACT( A2_15, 4 );



END_IF;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="05343FAA415F138AB30C1FBCD89A0F01" Name="FB_DO0">
                <Variables />
                <ST><![CDATA[IF NOT LG.IMIT_ON THEN
//A1.7:1: Кран № 1 открыть
DO_DRV.Kr1_ON := DGO.Kr1_ON;
//A1.7:2: Кран № 1 закрыть
DO_DRV.Kr1_OF := DGO.Kr1_OF;
//A1.7:3: Кран № 1 смазка
DO_DRV.Kr1_oil := DGO.Kr1_oil;
//A1.7:4: Кран № 2 открыть
DO_DRV.Kr2_ON := DGO.Kr2_ON;
//A1.7:5: Кран № 2 закрыть
DO_DRV.Kr2_OF := DGO.Kr2_OF;
//A1.7:6: Кран № 2 смазка
DO_DRV.Kr2_oil := DGO.Kr2_oil;
//A1.7:7: Кран № 4 открыть
DO_DRV.Kr4_ON := DGO.Kr4_ON;
//A1.7:8: Кран № 4 закрыть
DO_DRV.Kr4_OF := DGO.Kr4_OF;
//A1.7:9: Кран № 5 открыть
DO_DRV.Kr5_ON := DGO.Kr5_ON;
//A1.7:10: Кран № 5 закрыть
DO_DRV.Kr5_OF := DGO.Kr5_OF;
//A1.7:11: Кран № 6 открыть
DO_DRV.Kr6_ON := DGO.Kr6_ON;
//A1.7:12: Кран № 6 закрыть
DO_DRV.Kr6_OF := DGO.Kr6_OF;
//A1.7:13: Кран № 9 открыть 
DO_DRV.Kr9_ON := DGO.Kr9_ON;
//A1.7:14: Кран № 9 закрыть
DO_DRV.Kr9_OF := DGO.Kr9_OF;
//A1.7:15: Кран № 12 открыть
DO_DRV.Kr12_ON := DGO.Kr12_ON;
//A1.7:16: Кран № 12 закрыть
DO_DRV.Kr12_OF := DGO.Kr12_OF;
//A1.7:21: ПМНС Н включить
DO_DRV.PMNS_ON := DGO.PMNS_ON;
//A1.7:23: МНУ (1 секция) включить
DO_DRV.MNU_1_ON := DGO.MNU_1_ON;
//A1.7:24: МНУ (2 секция) включить
DO_DRV.MNU_2_ON := DGO.MNU_2_ON;
//A1.7:25: МННД включить
DO_DRV.MNND_ON := DGO.MNND_ON;
//A1.7:26: МНОД включить
DO_DRV.MNOD_ON := DGO.MNOD_ON;
//A1.7:27: МНОБ Д включить
DO_DRV.MNOB_ON := DGO.MNOB_ON;
//A1.7:28: ВОД 1 включить
DO_DRV.VOD_1_ON := DGO.VOD_1_ON;
//A1.7:29: ВОД 2 включить
DO_DRV.VOD_2_ON := DGO.VOD_2_ON;
//A1.7:30: ВМОН1 включить
DO_DRV.VMON_1_ON := DGO.VMON_1_ON;
//A1.7:31: ВМОД2 включить
DO_DRV.VMOD_2_ON := DGO.VMOD_2_ON;
//A1.7:32: ВМОД3 включить
DO_DRV.VMOD_3_ON := DGO.VMOD_3_ON;
//A1.7:33: ВМОН4 включить
DO_DRV.VMON_4_ON := DGO.VMON_4_ON;
//A1.7:34: ВМОД5 включить
DO_DRV.VMOD_5_ON := DGO.VMOD_5_ON;
//A1.7:35: ВМОД6 включить
DO_DRV.VMOD_6_ON := DGO.VMOD_6_ON;
//A1.7:36: ТЭН МБД включить
DO_DRV.TEN_MBD_ON := DGO.TEN_MBD_ON;
//A1.7:37: ТЭН1 в МБН включить
DO_DRV.TEN1_MBN_ON := DGO.TEN1_MBN_ON;
//A1.7:38: ТЭН2 в МБН включить
DO_DRV.TEN2_MBN_ON := DGO.TEN2_MBN_ON;
//A1.7:39: ТЭН3 в МБН включить
DO_DRV.TEN3_MBN_ON := DGO.TEN3_MBN_ON;
//A1.7:40: ТЭН4 в МБН включить
DO_DRV.TEN4_MBN_ON := DGO.TEN4_MBN_ON;
//A1.7:41: ТЭН1 трубопроводов Н включить
DO_DRV.TEN1_N_ON := DGO.TEN1_N_ON;
//A1.7:42: ТЭН2 трубопроводов Н включить
DO_DRV.TEN2_N_ON := DGO.TEN2_N_ON;
//A1.7:43: ТЭН3 трубопроводов Н включить
DO_DRV.TEN3_N_ON := DGO.TEN3_N_ON;
//A1.7:44: ТЭН4 трубопроводов Н включить
DO_DRV.TEN4_N_ON := DGO.TEN4_N_ON;
//A1.7:45: Звуковую сигнализацию включить
DO_DRV.Alarm_sound_ON := DGO.Alarm_sound_ON;
//A1.7:46: Освещение включить
DO_DRV.Light_ON := DGO.Light_ON;
//A1.7:49: Питание на клапан СК включить
DO_DRV.SK_ON := DGO.SK_ON;
//A1.7:50: КПГ открыть (отключить)
DO_DRV.KPG_ON := DGO.KPG_ON;
//A1.7:51: Питание на КНО включить
DO_DRV.U_KNO_ON := DGO.U_KNO_ON;
//A1.7:52: Питание на КНО включить (удержание12 В)
DO_DRV.U_KNO_udrj12_ON := DGO.U_KNO_udrj12_ON;
//A1.7:53: Питание на КАО включить
DO_DRV.U_KAO_ON := DGO.U_KAO_ON;
//A1.7:54: БП плазменных воспламенителей СПВ включить
DO_DRV.BP_SPV_ON := DGO.BP_SPV_ON;
//A1.7:56: КПР1 открыть
DO_DRV.KPR1_ON := DGO.KPR1_ON;
//A1.7:57: КПР2 открыть
DO_DRV.KPR2_ON := DGO.KPR2_ON;
//A1.7:58: ОРТ включить
DO_DRV.ORT_ON := DGO.ORT_ON;
//A1.7:59: Контроль механизмов с БС разрешить
DO_DRV.Check_mex_perm_ON := DGO.Check_mex_perm_ON;
//A1.7:60: Реле управления стартерами включить
DO_DRV.Starter_upr_ON := DGO.Starter_upr_ON;
//A1.7:61: Реле переключения скоростей включить
DO_DRV.Speed_ON := DGO.Speed_ON;
//A1.7:62: Контроль сигнализаторов стружки (контроль САУ)
DO_DRV.Chips_chek_alarm_ON := DGO.Chips_chek_alarm_ON;
//A1.8:17: Исправность ПЛК
DO_DRV.PLC_wor_ON := DGO.PLC_wor_ON;
//A1.8:19: Светозвуковая сигнализация ПС
DO_DRV.Ind_PS_ON := DGO.Ind_PS_ON;
//A1.8:21: Светозвуковая сигнализация АС 
DO_DRV.Ind_AS_ON := DGO.Ind_AS_ON;
END_IF;]]></ST>
            </FunctionBlock>
            <Function UUID="BD0CC61C44273CDEB1B1C4B6B72B1B3F" Name="TSM" Comment="ТСМ100М" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="CE134EC942085B346C572FA5E639BE8D" Name="R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="7C0FA3AB459558947382DFB0DA1C09B4" Name="correct" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                </Variables>
                <ST><![CDATA[R := R - correct;
TSM :=   -237.017377160 +287.509201147*0.01*R 
         -167.832604070*0.0001*R*R
         +226.580943461*0.000001*R*R*R
         -155.030256347*0.00000001*R*R*R*R
         +53.018082929*0.0000000001*R*R*R*R*R 
         -7.217434470*0.000000000001*R*R*R*R*R*R;]]></ST>
            </Function>
            <Function UUID="7125A24D459A3CE24DE60F81781E724C" Name="TSM_50" Comment="ТСМ50М" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="CE134EC942085B346C572FA5E639BE8D" Name="R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="ACAABE6D445B001936F633B54F768453" Name="correct" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                </Variables>
                <ST><![CDATA[R:= 2.0*(R - correct); 
TSM_50 :=   -237.017377160 +287.509201147*0.01*R 
         -167.832604070*0.0001*R*R
         +226.580943461*0.000001*R*R*R
         -155.030256347*0.00000001*R*R*R*R
         +53.018082929*0.0000000001*R*R*R*R*R 
         -7.217434470*0.000000000001*R*R*R*R*R*R;]]></ST>
            </Function>
            <Function UUID="0D92D3C6448147FF1780D8B9DD59AE53" Name="TSP" Comment="ТСП100П" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="CE134EC942085B346C572FA5E639BE8D" Name="R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="1D0EF4164AF4642D547C4BAD24307493" Name="correct" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                </Variables>
                <ST><![CDATA[R := R - correct;
TSP :=  -239.961691614+224.445063332*0.01*R
         +20.35731456*0.0001*R*R
         -6.174874913*0.000001*R*R*R
         +1.327120879*0.00000001*R*R*R*R;]]></ST>
            </Function>
            <Function UUID="099ADC244FD8CEDD4A483187FF16046A" Name="TSP_PT100" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="CD8AA0184D4F46BCAEC5AA8F6B7B7F77" Name="TcIN" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="53DD9709442851F5F9FEAB877F724B42" Name="TcOUT" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="89C7E7FB4E0E837BD5F6F0856EAE6BD2" Name="IN" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7C6B84E8440F5864EFA7B9846EC78BFD" Name="RcIN" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DCDBEE2E433E80DDA18E0AB7AFF8861F" Name="TcSQRTN" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                </Variables>
                <ST><![CDATA[IN := TcIN;
IF IN < 0.0 THEN
RcIN := 100.0*(1.0+0.0039692*IN+-0.0000005829*EXPT(IN,2)+-0.0000000000043303*(IN-100.0)*EXPT(IN,3));
TcOUT := 255.819*(RcIN/100.0-1.0)+9.14550*EXPT(RcIN/100.0-1.0,2)+-2.92363*EXPT(RcIN/100.0-1.0,3)+1.79090*EXPT(RcIN/100.0-1.0,4);
ELSIF IN = 0.0 THEN
TcOUT := IN;
ELSIF IN > 0.0 AND IN <= 600.0 THEN
RcIN := 100.0*(1.0+0.0039692*IN+-0.0000005829*EXPT(IN,2));
TcSQRTN := SQRT((EXPT(0.0039083,2)-4.0*-0.0000005775*(1.0-RcIN/100.0)));
TcOUT := (-0.0039083+TcSQRTN)/(2.0*-0.0000005775);
END_IF;
TSP_PT100 := TcOUT;
]]></ST>
            </Function>
            <Function UUID="8C23C4904E8E49AEBD5BD5881A142887" Name="average_2AI" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="CBD2C1334B83AE0BAE4C1296BAA947BD" Name="AI1" Type="AI_HMI" TypeUUID="5C4EAAB340E0F06BB767F6AEE30C69DF" Usage="input" />
                    <Variable UUID="DCFDFC2249459359194DC685FE14ACC4" Name="AI2" Type="AI_HMI" TypeUUID="5C4EAAB340E0F06BB767F6AEE30C69DF" Usage="input" />
                </Variables>
                <ST><![CDATA[IF NOT AI1.Condition.fault_common AND NOT  AI2.Condition.fault_common THEN
   average_2AI := (AI1.PV + AI2.PV)/2.0;
ELSE 
     IF AI1.Condition.fault_common THEN average_2AI := AI2.PV;END_IF;
     IF AI2.Condition.fault_common THEN average_2AI := AI1.PV;END_IF;
END_IF;]]></ST>
            </Function>
            <Function UUID="9ECD5DF04710215157BB898FA401E07F" Name="maxValue" Comment="функция, возвращающая максимальное из двух значений на входе" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="CE34D5534D0AC3CFF8F3C0B3EF43AE0E" Name="value1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="015614ED43A43B187923579D97DC2DD4" Name="value2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                </Variables>
                <ST><![CDATA[maxValue := value1;
IF value2 > value1 THEN maxValue := value2; END_IF;]]></ST>
            </Function>
            <Function UUID="2A9B82044C0AB0DC6EE777AEC5A008CD" Name="minValue" Comment="функция, возвращающая минимальное из двух значений на входе" ResultTypeUUID="42E054C8453789BBDD3594B53BDC7DE5">
                <Variables>
                    <Variable UUID="D29FD99947E4A9C8833031AC88A6492C" Name="value1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="846D5E93418D535CAF05E5A9A9589CB9" Name="value2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                </Variables>
                <ST><![CDATA[minValue := value1;
IF value2 < value1 THEN minValue := value2; END_IF;]]></ST>
            </Function>
        </Folder>
        <Folder Name="02_Drums" Comment="" Data="" UUID="FFAF30674AF426159AAB98BCAEA060D8">
            <FunctionBlock UUID="6F892D004CF538040E590793DDFC895F" Name="FB_Drum_AObs">
                <Variables />
                <ST><![CDATA[Drum_AObs.Start := us.AObs;
Drum_AObs.condition[1] :=  sm_Stop.Finish;
Drum_AObs.condition[2] :=  LG.deblock AND Calc_AI.N_KND.PV < 300.0;
// АОбс----------------------------
IF Drum_AObs.Start THEN
	IF Drum_AObs.STEP<0 THEN 
		Drum_AObs.STEP := 1;
	  	Drum_AObs.ACC[1] := true;
	ELSIF Drum_AObs.STEP = 1 THEN 
		IF Drum_AObs.condition[1] THEN Drum_AObs.STEP := 2; END_IF;  
		Drum_AObs.ACC[1] := TRUE;
	ELSIF Drum_AObs.STEP = 2 THEN 
		IF Drum_AObs.condition[2] THEN Drum_AObs.STEP := 3; END_IF;
		Drum_AObs.ACC[2] := TRUE;  
	ELSIF Drum_AObs.STEP =3 THEN 
		Drum_AObs.Finish := TRUE;
		Drum_AObs.ACC[1] := false;
		Drum_AObs.ACC[2] := false;
	END_IF;
ELSIF Drum_AObs.STEP >=1  THEN 
	Drum_AObs.Finish := false; 
	Drum_AObs.STEP :=-1;
	Drum_AObs.ACC[1] := false;
	Drum_AObs.ACC[2] := false;
END_IF;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="0E5A7D974AE6EF1DEBF0E3911CC8F422" Name="FB_Drum_AOss" Comment="АОсс">
                <Variables />
                <ST><![CDATA[Drum_AOss.Start := us.AOss;
Drum_AOss.condition[1] :=  sm_Stop.Finish; 
Drum_AOss.condition[2] :=  sm_BleedingN.Finish ;
Drum_AOss.condition[3] :=  LG.deblock AND Calc_AI.N_KND.PV < 300.0;
// АОсс----------------------------
IF Drum_AOss.Start THEN
	IF Drum_AOss.STEP<0 THEN 
		Drum_AOss.STEP := 1;
		Drum_AOss.ACC[1] := true;
	ELSIF Drum_AOss.STEP = 1 THEN 
		IF Drum_AOss.condition[1] THEN Drum_AOss.STEP := 2; END_IF;
  		Drum_AOss.ACC[1] := TRUE;
	ELSIF Drum_AOss.STEP = 2 THEN 
		IF Drum_AOss.condition[2] THEN Drum_AOss.STEP := 3; END_IF;
		Drum_AOss.ACC[2] := TRUE;  
	ELSIF Drum_AOss.STEP = 3 THEN 
		IF Drum_AOss.condition[3] THEN Drum_AOss.STEP := 4; END_IF;
		Drum_AOss.ACC[3] := TRUE;  
	ELSIF Drum_AOss.STEP = 4 THEN 
		Drum_AOss.Finish := TRUE;
		Drum_AOss.ACC[1] := false;
		Drum_AOss.ACC[2] := false;
		Drum_AOss.ACC[3] := false;
	END_IF;
ELSIF Drum_AOss.STEP >=1  THEN 
	Drum_AOss.Finish := false; 
	Drum_AOss.STEP :=-1;
	Drum_AOss.ACC[1] := false;
	Drum_AOss.ACC[2] := false;
	Drum_AOss.ACC[3] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="94C4623E44FC3C5D3E86FBA8C8E3B38E" Name="FB_Drum_APK" Comment="АПК">
                <Variables />
                <ST><![CDATA[Drum_APK.Start := us.APK;
Drum_APK.condition[1] := sm_Sound.Finish;
Drum_APK.condition[2] := sm_startMD.Finish AND sm_startMN.Finish;
Drum_APK.condition[3] := sm_fillingN.Finish;
Drum_APK.condition[4] := sm_startTG.Finish;
Drum_APK.condition[5] := sm_startD.Finish;
Drum_APK.condition[6] := sm_warmD.Finish;

// АПК-------------------
IF Drum_APK.Start THEN
	IF Drum_APK.STEP<0 THEN 
	Drum_APK.STEP := 1;   
	Drum_APK.ACC[1] := true;
	ELSIF Drum_APK.STEP = 1 THEN 
		IF Drum_APK.condition[1] THEN Drum_APK.STEP := 2; END_IF;  
	Drum_APK.ACC[1] := TRUE;
	ELSIF Drum_APK.STEP = 2 THEN 
		IF Drum_APK.condition[2] THEN Drum_APK.STEP := 3; END_IF;  
	Drum_APK.ACC[2] := TRUE;
	ELSIF Drum_APK.STEP = 3 THEN 
		IF Drum_APK.condition[3] THEN Drum_APK.STEP := 4; END_IF;  
	Drum_APK.ACC[3] := TRUE;
	ELSIF Drum_APK.STEP = 4 THEN 
		IF Drum_APK.condition[4] THEN Drum_APK.STEP := 5; END_IF;  
	Drum_APK.ACC[4] := TRUE;
	ELSIF Drum_APK.STEP = 5 THEN
		IF Drum_APK.condition[5] THEN Drum_APK.STEP := 6; END_IF;  
	Drum_APK.ACC[5] := TRUE;
	ELSIF Drum_APK.STEP = 6 THEN
		IF Drum_APK.condition[6] THEN Drum_APK.STEP := 7; END_IF;  
	Drum_APK.ACC[6] := TRUE;
	ELSIF Drum_APK.STEP = 7 THEN
	Drum_APK.Finish := TRUE;
	Drum_APK.ACC[1] := false;
	Drum_APK.ACC[2] := false;
	Drum_APK.ACC[3] := false;
	Drum_APK.ACC[4] := false;
	Drum_APK.ACC[5] := false;
	Drum_APK.ACC[6] := false;
	END_IF;
ELSIF Drum_APK.STEP >=1  THEN 
	Drum_APK.Finish := false; 
	Drum_APK.STEP :=-1;
	Drum_APK.ACC[1] := false;
	Drum_APK.ACC[2] := false;
	Drum_APK.ACC[3] := false;
	Drum_APK.ACC[4] := false;
	Drum_APK.ACC[5] := false;
	Drum_APK.ACC[6] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="0924CD4740B288986B46E096BBF3CF18" Name="FB_Drum_APM" Comment="АПМ">
                <Variables />
                <ST><![CDATA[Drum_APM.Start := us.APM;
Drum_APM.condition[1] := sm_Sound.Finish;
Drum_APM.condition[2] := sm_startMD.Finish AND sm_startMN.Finish;
Drum_APM.condition[3] := sm_fillingN.Finish;
Drum_APM.condition[4] := sm_startTG.Finish;
Drum_APM.condition[5] := sm_startD.Finish;
Drum_APM.condition[6] := sm_warmD.Finish;
Drum_APM.condition[7] := sm_K_M.Finish;
// АПМ----------------------------
IF Drum_APM.Start THEN
	IF Drum_APM.STEP<0 THEN 
	Drum_APM.STEP := 1;   
	Drum_APM.ACC[1] := true;
	ELSIF Drum_APM.STEP = 1 THEN 
		IF Drum_APM.condition[1] THEN Drum_APM.STEP := 2; END_IF;  
		Drum_APM.ACC[1] := TRUE;
	ELSIF Drum_APM.STEP = 2 THEN 
		IF Drum_APM.condition[2] THEN Drum_APM.STEP := 3; END_IF;  
		Drum_APM.ACC[2] := TRUE;
	ELSIF Drum_APM.STEP = 3 THEN 
		IF Drum_APM.condition[3] THEN Drum_APM.STEP := 4; END_IF;  
		Drum_APM.ACC[3] := TRUE;
	ELSIF Drum_APM.STEP = 4 THEN 
		IF Drum_APM.condition[4] THEN Drum_APM.STEP := 5; END_IF;  
		Drum_APM.ACC[4] := TRUE;
	ELSIF Drum_APM.STEP = 5 THEN 
		IF Drum_APM.condition[5] THEN Drum_APM.STEP := 6; END_IF;  
		Drum_APM.ACC[5] := TRUE;
	ELSIF Drum_APM.STEP = 6 THEN 
		IF Drum_APM.condition[6] THEN Drum_APM.STEP := 7; END_IF;  
		Drum_APM.ACC[6] := TRUE;
	ELSIF Drum_APM.STEP = 7 THEN 		
		IF Drum_APM.condition[7] THEN Drum_APM.STEP := 8; END_IF;  
		Drum_APM.ACC[7] := TRUE;
	ELSIF Drum_APM.STEP = 8 THEN 
		Drum_APM.Finish := TRUE;
		Drum_APM.ACC[1] := false;
		Drum_APM.ACC[2] := false;
		Drum_APM.ACC[3] := false;
		Drum_APM.ACC[4] := false;
		Drum_APM.ACC[5] := false;
		Drum_APM.ACC[6] := false;
		Drum_APM.ACC[7] := false;
	END_IF;
ELSIF Drum_APM.STEP >=1  THEN 
	Drum_APM.Finish := false; 
	Drum_APM.STEP :=-1;
	Drum_APM.ACC[1] := false;
	Drum_APM.ACC[2] := false;
	Drum_APM.ACC[3] := false;
	Drum_APM.ACC[4] := false;
	Drum_APM.ACC[5] := false;
	Drum_APM.ACC[6] := false;
	Drum_APM.ACC[7] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="598EF6F44AF530E7C944218DBF0491D2" Name="FB_Drum_HP" Comment="Холодная прокрутка">
                <Variables>
                    <Variable UUID="2235AA5847FCE9F863D9A99413886F83" Name="TMR_ES_Work_HP" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[Drum_HP.Start := us.HP; 
Drum_HP.condition[1] := sm_Sound.Finish;
Drum_HP.condition[2] := sm_startMD.Finish AND sm_startMN.Finish;
Drum_HP.condition[3] := DGI.KU_KK1_ON AND DGI.KU_KK2_ON ;
TMR_ES_Work_HP(Drum_HP.ACC[4], ustT.ES_Work_HP, TMO.ES_Work_HP, TMR.ES_Work_HP) ;
Drum_HP.condition[4] := TMO.ES_Work_HP;
Drum_HP.condition[5] := Calc_AI.N_KND.PV < 300.0 (*AND Calc_AI.N_KVD.PV < 100.0  AND Calc_AI.N_TN.PV < 20.0*) ;
// ХП----------------------------
IF Drum_HP.Start THEN
	IF Drum_HP.STEP<0 THEN 
	Drum_HP.STEP := 1;   
	Drum_HP.ACC[1] := true;
	ELSIF Drum_HP.STEP = 1 THEN 
		IF Drum_HP.condition[1] THEN Drum_HP.STEP := 2; END_IF;  
	Drum_HP.ACC[1] := TRUE;
	ELSIF Drum_HP.STEP = 2 THEN 
		IF Drum_HP.condition[2] THEN Drum_HP.STEP := 3; END_IF;  
	Drum_HP.ACC[2] := TRUE;
	ELSIF Drum_HP.STEP = 3 THEN 
		IF Drum_HP.condition[3] THEN Drum_HP.STEP := 4; END_IF;  
	Drum_HP.ACC[3] := TRUE;
	ELSIF Drum_HP.STEP = 4 THEN 
		IF Drum_HP.condition[4] THEN Drum_HP.STEP := 5; END_IF;  
	Drum_HP.ACC[4] := TRUE;
	ELSIF Drum_HP.STEP = 5 THEN 
		IF Drum_HP.condition[5] THEN Drum_HP.STEP := 6; END_IF;  
	Drum_HP.ACC[5] := TRUE;
	ELSIF Drum_HP.STEP = 6 THEN 
	Drum_HP.Finish := TRUE;
	Drum_HP.ACC[1] := false;
	Drum_HP.ACC[2] := false;
	Drum_HP.ACC[3] := false;
	Drum_HP.ACC[4] := false;
	Drum_HP.ACC[5] := false;
	END_IF;
ELSIF Drum_HP.STEP >=1  THEN 
	Drum_HP.Finish := false; 
	Drum_HP.STEP :=-1;
	Drum_HP.ACC[1] := false;
	Drum_HP.ACC[2] := false;
	Drum_HP.ACC[3] := false;
	Drum_HP.ACC[4] := false;
	Drum_HP.ACC[5] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="0C2C65FF48674ACCC2DFC886E538A79C" Name="FB_Drum_KPK" Comment="КПК">
                <Variables />
                <ST><![CDATA[Drum_KPK.Start := us.KPK;
Drum_KPK.condition[1] := sm_Sound.Finish;
Drum_KPK.condition[2] := sm_startMN.Finish;
Drum_KPK.condition[3] := sm_fillingN.Finish AND DGI.SK_OF;
Drum_KPK.condition[4] := sm_startTG.Finish;
Drum_KPK.condition[5] := DGI.Kr1_OF AND DGI.Kr6_OF;
Drum_KPK.condition[6] :=  DGI.Kr9_ON AND DGI.Kr12_OF;

// КПК----------------------------
IF Drum_KPK.Start THEN
	IF Drum_KPK.STEP<0 THEN 
	Drum_KPK.STEP := 1;   
	Drum_KPK.ACC[1] := true;
	ELSIF Drum_KPK.STEP = 1 THEN 
		IF Drum_KPK.condition[1] THEN Drum_KPK.STEP := 2; END_IF;  
	    Drum_KPK.ACC[1] := TRUE;
	ELSIF Drum_KPK.STEP = 2 THEN
        IF Drum_KPK.condition[2] THEN Drum_KPK.STEP := 3; END_IF;  
		Drum_KPK.ACC[2] := TRUE;
	ELSIF Drum_KPK.STEP = 3 THEN 
		IF Drum_KPK.condition[3] THEN Drum_KPK.STEP := 4; END_IF;  
	Drum_KPK.ACC[3] := TRUE;
	ELSIF Drum_KPK.STEP = 4 THEN 
		IF Drum_KPK.condition[4] THEN Drum_KPK.STEP := 5; END_IF;  
	Drum_KPK.ACC[4] := TRUE;
	ELSIF Drum_KPK.STEP = 5 THEN 
		IF Drum_KPK.condition[5] THEN Drum_KPK.STEP := 6; END_IF;  
	Drum_KPK.ACC[5] := TRUE;
	ELSIF Drum_KPK.STEP =6 THEN 
		IF Drum_KPK.condition[6] THEN Drum_KPK.STEP := 7; END_IF;  
	Drum_KPK.ACC[6] := TRUE;
	ELSIF Drum_KPK.STEP =7 THEN
	Drum_KPK.Finish := TRUE;
	Drum_KPK.ACC[1] := false;
	Drum_KPK.ACC[2] := false;
	Drum_KPK.ACC[3] := false;
	Drum_KPK.ACC[4] := false;
	Drum_KPK.ACC[5] := false;
	Drum_KPK.ACC[6] := false;
	END_IF;
ELSIF Drum_KPK.STEP >=1  THEN 
	Drum_KPK.Finish := false;
	Drum_KPK.STEP :=-1;
	Drum_KPK.ACC[1] := false;
	Drum_KPK.ACC[2] := false;
	Drum_KPK.ACC[3] := false;
	Drum_KPK.ACC[4] := false;
	Drum_KPK.ACC[5] := false;
	Drum_KPK.ACC[6] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="A39920804913839AE9F50295E67EC571" Name="FB_Drum_K_M">
                <Variables />
                <ST><![CDATA[Drum_K_M.Start := us.K_M;
Drum_K_M.condition[1] := sm_K_M.Finish ;
//------- Кольцо-Магистраль ----------------------------------
IF Drum_K_M.Start THEN
	IF Drum_K_M.STEP<0 THEN 
		Drum_K_M.STEP := 1;   
		Drum_K_M.ACC[1] := true;
	ELSIF Drum_K_M.STEP = 1 THEN 
		IF Drum_K_M.condition[1] THEN Drum_K_M.STEP := 2; END_IF;  
		Drum_K_M.ACC[1] := TRUE;
	ELSIF Drum_K_M.STEP = 2 THEN 
		Drum_K_M.Finish := TRUE;
		Drum_K_M.ACC[1] := false;
		END_IF;
ELSIF Drum_K_M.STEP >=1  THEN 
	Drum_K_M.Finish := false; 
	Drum_K_M.STEP :=-1;
	Drum_K_M.ACC[1] := false;
END_IF;
//--------------------------------------------------]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="0E213BB141F4188A9DCD1C8A2BB97581" Name="FB_Drum_M_K">
                <Variables />
                <ST><![CDATA[Drum_M_K.Start := us.M_K OR us.OGR;
Drum_M_K.condition[1] := sm_M_K.Finish ;
//------- Магистраль-Кольцо ----------------------------------
IF Drum_M_K.Start THEN
	IF Drum_M_K.STEP<0 THEN 
		Drum_M_K.STEP := 1;   
		Drum_M_K.ACC[1] := true;
	ELSIF Drum_M_K.STEP = 1 THEN 
		IF Drum_M_K.condition[1] THEN Drum_M_K.STEP := 2; END_IF;  
		Drum_M_K.ACC[1] := TRUE;
	ELSIF Drum_M_K.STEP = 2 THEN 
		Drum_M_K.Finish := TRUE;
		Drum_M_K.ACC[1] := false;
		END_IF;
ELSIF Drum_M_K.STEP >=1  THEN 
	Drum_M_K.Finish := false; 
	Drum_M_K.STEP :=-1;
	Drum_M_K.ACC[1] := false;
END_IF;
//--------------------------------------------------]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="459B939E405A0B807918848D68B596CD" Name="FB_Drum_NObs" Comment="НОбс">
                <Variables />
                <ST><![CDATA[Drum_NObs.Start := us.NObs;
Drum_NObs.condition[1]:= sm_M_K.Finish;
Drum_NObs.condition[2]:= sm_CoolingD.Finish;
Drum_NObs.condition[3]:= sm_Stop.Finish AND Calc_AI.N_KND.PV < 300.0;
// НОбс----------------------------
IF Drum_NObs.Start THEN
	IF Drum_NObs.STEP<0 THEN 
		Drum_NObs.STEP := 1;   
		Drum_NObs.ACC[1] := true;
	ELSIF Drum_NObs.STEP = 1 THEN 
		IF Drum_NObs.condition[1] THEN Drum_NObs.STEP := 2; END_IF;  
		Drum_NObs.ACC[1] := TRUE;
	ELSIF Drum_NObs.STEP = 2 THEN 
		IF Drum_NObs.condition[2] THEN Drum_NObs.STEP := 3; END_IF;  
		Drum_NObs.ACC[2] := TRUE;
	ELSIF Drum_NObs.STEP = 3 THEN 
		IF Drum_NObs.condition[3] THEN Drum_NObs.STEP := 4; END_IF; 
		Drum_NObs.ACC[3] := TRUE; 
	ELSIF Drum_NObs.STEP =4 THEN 
		Drum_NObs.Finish := TRUE;
		Drum_NObs.ACC[1] := false;
		Drum_NObs.ACC[2] := false;
		Drum_NObs.ACC[3] := false;
	END_IF;
ELSIF Drum_NObs.STEP >=1  THEN 
	Drum_NObs.Finish := false; 
	Drum_NObs.STEP :=-1;
	Drum_NObs.ACC[1] := false;
	Drum_NObs.ACC[2] := false;
	Drum_NObs.ACC[3] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="0749D9FA488D0AE814D3C4841FFAC681" Name="FB_Drum_NOss" Comment="НОсс">
                <Variables />
                <ST><![CDATA[Drum_NOss.Start := us.NOss;
Drum_NOss.condition[1] := sm_M_K.Finish;
Drum_NOss.condition[2] := sm_CoolingD.Finish;
Drum_NOss.condition[3] := sm_Stop.Finish;
Drum_NOss.condition[4] := sm_BleedingN.Finish AND Calc_AI.N_KND.PV < 300.0;
// НОсс----------------------------
IF Drum_NOss.Start THEN
	IF Drum_NOss.STEP<0 THEN 
		Drum_NOss.STEP := 1;   
		Drum_NOss.ACC[1] := true;
	ELSIF Drum_NOss.STEP = 1 THEN 
		IF Drum_NOss.condition[1] THEN Drum_NOss.STEP := 2; END_IF;  
		Drum_NOss.ACC[1] := TRUE;
	ELSIF Drum_NOss.STEP = 2 THEN 
		IF Drum_NOss.condition[2] THEN Drum_NOss.STEP := 3; END_IF;  
		Drum_NOss.ACC[2] := TRUE;
	ELSIF Drum_NOss.STEP = 3 THEN 
		IF Drum_NOss.condition[3] THEN Drum_NOss.STEP := 4; END_IF;
		Drum_NOss.ACC[3] := TRUE;  
	ELSIF Drum_NOss.STEP = 4 THEN 
		IF Drum_NOss.condition[4] THEN Drum_NOss.STEP := 5; END_IF;
		Drum_NOss.ACC[4] := TRUE;
	ELSIF Drum_NOss.STEP =5 THEN
		Drum_NOss.Finish := TRUE;
		Drum_NOss.ACC[1] := false;
		Drum_NOss.ACC[2] := false;
		Drum_NOss.ACC[3] := false;
		Drum_NOss.ACC[4] := false;
	END_IF;
ELSIF Drum_NOss.STEP >=1  THEN 
	Drum_NOss.Finish := false; 
	Drum_NOss.STEP :=-1;
	Drum_NOss.ACC[1] := false;
	Drum_NOss.ACC[2] := false;
	Drum_NOss.ACC[3] := false;
	Drum_NOss.ACC[4] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="BBA0D9514CCE8E6A8AF810B096B18F2E" Name="FB_Drum_OGR">
                <Variables />
                <ST><![CDATA[Drum_OGR.Start := us.OGR;
Drum_OGR.condition[1] := (sm_M_K.Finish OR (DGI.Kr2_OF AND DGI.Kr6_ON)) AND NOT LG.OGR AND LG.deblock;
//------- Ограничени режима ----------------------------------
IF Drum_OGR.Start THEN
	IF Drum_OGR.STEP<0 THEN 
		Drum_OGR.STEP := 1;   
		Drum_OGR.ACC[1] := true;
	ELSIF Drum_OGR.STEP = 1 THEN 
		IF Drum_OGR.condition[1] THEN Drum_OGR.STEP := 2; END_IF;  
		Drum_OGR.ACC[1] := TRUE;
	ELSIF Drum_OGR.STEP = 2 THEN 
		Drum_OGR.Finish := TRUE;
		Drum_OGR.ACC[1] := false;
		END_IF;
ELSIF Drum_OGR.STEP >=1  THEN 
	Drum_OGR.Finish := false; 
	Drum_OGR.STEP :=-1;
	Drum_OGR.ACC[1] := false;
END_IF;
//--------------------------------------------------]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="AA3C9B394D92076AB130E89F291BA876" Name="FB_Drum_PBZ" Comment="Пуск без заполнения">
                <Variables />
                <ST><![CDATA[Drum_PBZ.Start := us.PBZ;
Drum_PBZ.condition[1] := sm_Sound.Finish;
Drum_PBZ.condition[2] := sm_startMD.Finish AND sm_startMN.Finish;
Drum_PBZ.condition[3] := sm_startTG.Finish; 
Drum_PBZ.condition[4] := sm_startD.ACC[7] AND Calc_AI.N_KND.PV > 2150.0 AND (AS.Aoss_BTN_ARM OR AS.Aobs_BTN_ARM);
// ПБЗ-------------------
IF Drum_PBZ.Start THEN
	IF Drum_PBZ.STEP<0 THEN 
	Drum_PBZ.STEP := 1;   
	Drum_PBZ.ACC[1] := true;
	ELSIF Drum_PBZ.STEP = 1 THEN 
		IF Drum_PBZ.condition[1] THEN Drum_PBZ.STEP := 2; END_IF;  
	Drum_PBZ.ACC[1] := TRUE;
	ELSIF Drum_PBZ.STEP = 2 THEN 
		IF Drum_PBZ.condition[2] THEN Drum_PBZ.STEP := 3; END_IF;  
	Drum_PBZ.ACC[2] := TRUE;
	ELSIF Drum_PBZ.STEP = 3 THEN 
		IF Drum_PBZ.condition[3] THEN Drum_PBZ.STEP := 4; END_IF;  
	Drum_PBZ.ACC[3] := TRUE;
	ELSIF Drum_PBZ.STEP = 4 THEN 
		IF Drum_PBZ.condition[4] THEN Drum_PBZ.STEP := 5; END_IF;  
	Drum_PBZ.ACC[4] := TRUE;
	ELSIF Drum_PBZ.STEP = 5 THEN
	Drum_PBZ.Finish := TRUE;
	Drum_PBZ.ACC[1] := false;
	Drum_PBZ.ACC[2] := false;
	Drum_PBZ.ACC[3] := false;
	Drum_PBZ.ACC[4] := false;
		END_IF;
ELSIF Drum_PBZ.STEP >=1  THEN 
	Drum_PBZ.Finish := false; 
	Drum_PBZ.STEP :=-1;
	Drum_PBZ.ACC[1] := false;
	Drum_PBZ.ACC[2] := false;
	Drum_PBZ.ACC[3] := false;
	Drum_PBZ.ACC[4] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="9F5D4F3D4E1719E01D59E1A63D10A395" Name="FB_Drum_PZ">
                <Variables />
                <ST><![CDATA[Drum_PZ.Start := us.PZ;
Drum_PZ.condition[1] := BTN.cancel;
//------- Проверка защит ----------------------------------
IF Drum_PZ.Start THEN
	IF Drum_PZ.STEP<0 THEN 
		Drum_PZ.STEP := 1;   
		Drum_PZ.ACC[1] := true;
	ELSIF Drum_PZ.STEP = 1 THEN 
		IF Drum_PZ.condition[1] THEN Drum_PZ.STEP := 2; END_IF;  
		Drum_PZ.ACC[1] := TRUE;
	ELSIF Drum_PZ.STEP = 2 THEN 
		Drum_PZ.Finish := TRUE;
		Drum_PZ.ACC[1] := false;
		END_IF;
ELSIF Drum_PZ.STEP >=1  THEN 
	Drum_PZ.Finish := false; 
	Drum_PZ.STEP :=-1;
	Drum_PZ.ACC[1] := false;
END_IF;
//--------------------------------------------------









]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="531BFD404BD572C978DCBEBABA3149D6" Name="FB_Drum_PZM" Comment="Проверка защит по маслосистеме">
                <Variables />
                <ST><![CDATA[Drum_PZM.Start := us.PZM AND NOT LG.G_inN;
Drum_PZM.condition[1]:= sm_Sound.Finish;
Drum_PZM.condition[2]:= Q_ON.P_msm_N AND Q_ON.P_msm_D_HH AND Q_ON.dP_mg ; 
Drum_PZM.condition[3]:= AS.dP_mg_An AND AS.Pm_N_An AND AS.Pm_MNOD_002 ;
Drum_PZM.condition[4]:= BTN.cancel OR LG.deblock AND NOT (Q_ON.P_msm_N AND Q_ON.P_msm_D_HH AND Q_ON.dP_mg );  
// Проверка защит по маслосистеме
IF Drum_PZM.Start THEN
	IF Drum_PZM.STEP<0 THEN 	
		Drum_PZM.STEP := 1;   
		Drum_PZM.ACC[1] := true;
	ELSIF Drum_PZM.STEP = 1 THEN 
		IF Drum_PZM.condition[1] THEN Drum_PZM.STEP := 2; END_IF;  
		Drum_PZM.ACC[1] := TRUE;
	ELSIF Drum_PZM.STEP = 2 THEN 
		IF Drum_PZM.condition[2] THEN Drum_PZM.STEP := 3; END_IF;  
		Drum_PZM.ACC[2] := TRUE;
	ELSIF Drum_PZM.STEP = 3 THEN 
		IF Drum_PZM.condition[3] THEN Drum_PZM.STEP := 4; END_IF;  
		Drum_PZM.ACC[3] := TRUE;
	ELSIF Drum_PZM.STEP = 4 THEN 
		IF Drum_PZM.condition[4] THEN Drum_PZM.STEP := 5; END_IF;  
		Drum_PZM.ACC[4] := TRUE;
	ELSIF Drum_PZM.STEP = 5 THEN 
        Drum_PZM.Finish := TRUE;
		Drum_PZM.ACC[1] := false;
		Drum_PZM.ACC[2] := false;
		Drum_PZM.ACC[3] := false;
		Drum_PZM.ACC[4] := false;
	END_IF;
ELSIF Drum_PZM.STEP >=1  THEN 
	Drum_PZM.Finish := false; 
	Drum_PZM.STEP :=-1;
	Drum_PZM.ACC[1] := false;
	Drum_PZM.ACC[2] := false;
	Drum_PZM.ACC[3] := false;
	Drum_PZM.ACC[4] := false;
END_IF;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="B8894D5D491AF9E2CD1BB29AED4DF4F3" Name="FB_Drum_TP" Comment="Технологическая прокрутка">
                <Variables>
                    <Variable UUID="62873C244EFCF88FFB16009FB23625A1" Name="TMR_ES_Work_TP" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[Drum_TP.Start := us.TP; 
Drum_TP.condition[1] := sm_Sound.Finish;
Drum_TP.condition[2] := sm_startMD.Finish AND sm_startMN.Finish;
Drum_TP.condition[3] := DGI.KU_KK1_ON AND DGI.KU_KK2_ON ;
TMR_ES_Work_TP(Drum_TP.ACC[4], ustT.ES_Work_TP, TMO.ES_Work_TP, TMR.ES_Work_TP) ;
Drum_TP.condition[4] := TMO.ES_Work_TP;
Drum_TP.condition[5] := Calc_AI.N_KND.PV < 300.0 (*AND Calc_AI.N_KVD.PV < 100.0  AND Calc_AI.N_TN.PV < 20.0*) ;
// ХП----------------------------
IF Drum_TP.Start THEN
	IF Drum_TP.STEP<0 THEN 
	Drum_TP.STEP := 1;   
	Drum_TP.ACC[1] := true;
	ELSIF Drum_TP.STEP = 1 THEN 
		IF Drum_TP.condition[1] THEN Drum_TP.STEP := 2; END_IF;  
	Drum_TP.ACC[1] := TRUE;
	ELSIF Drum_TP.STEP = 2 THEN 
		IF Drum_TP.condition[2] THEN Drum_TP.STEP := 3; END_IF;  
	Drum_TP.ACC[2] := TRUE;
	ELSIF Drum_TP.STEP = 3 THEN 
		IF Drum_TP.condition[3] THEN Drum_TP.STEP := 4; END_IF;  
	Drum_TP.ACC[3] := TRUE;
	ELSIF Drum_TP.STEP = 4 THEN 
		IF Drum_TP.condition[4] THEN Drum_TP.STEP := 5; END_IF;  
	Drum_TP.ACC[4] := TRUE;
	ELSIF Drum_TP.STEP = 5 THEN 
		IF Drum_TP.condition[5] THEN Drum_TP.STEP := 6; END_IF;  
	Drum_TP.ACC[5] := TRUE;
	ELSIF Drum_TP.STEP = 6 THEN 
	Drum_TP.Finish := TRUE;
	Drum_TP.ACC[1] := false;
	Drum_TP.ACC[2] := false;
	Drum_TP.ACC[3] := false;
	Drum_TP.ACC[4] := false;
	Drum_TP.ACC[5] := false;
	END_IF;
ELSIF Drum_TP.STEP >=1  THEN 
	Drum_TP.Finish := false; 
	Drum_TP.STEP :=-1;
	Drum_TP.ACC[1] := false;
	Drum_TP.ACC[2] := false;
	Drum_TP.ACC[3] := false;
	Drum_TP.ACC[4] := false;
	Drum_TP.ACC[5] := false;
END_IF;]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="03_Submode" Comment="" Data="" UUID="98859446476B2271A5E088B78C4E65F8">
            <FunctionBlock UUID="43F3FB7D40D8A0182F1F9AB882FA964D" Name="FB_sm_BleedingN" Comment="Стравливание контура нагнетателя">
                <Variables />
                <ST><![CDATA[sm_BleedingN.Start := (Drum_AOss.ACC[2] AND NOT Drum_AOss.ACC[3]) OR 
					   Drum_NOss.ACC[4] ;
sm_BleedingN.condition[1] := DGI.Kr2_OF AND DGI.Kr1_OF AND DGI.Kr6_OF AND DGI.Kr4_OF ;
sm_BleedingN.condition[2] := DGI.Kr5_ON AND LG.noG_inN;
sm_BleedingN.condition[3] := NOT (Q_ON.P_msm_N AND Q_ON.dP_mg) ;
//---------Стравливание К---------------------------
IF sm_BleedingN.Start THEN
	IF sm_BleedingN.STEP<0 THEN 
		sm_BleedingN.STEP := 1;   
		sm_BleedingN.ACC[1] := true;
	ELSIF sm_BleedingN.STEP = 1 THEN 
		IF sm_BleedingN.condition[1] THEN sm_BleedingN.STEP := 2; END_IF;  
		sm_BleedingN.ACC[1] := TRUE;
	ELSIF sm_BleedingN.STEP = 2 THEN 
		IF sm_BleedingN.condition[2] THEN sm_BleedingN.STEP := 3; END_IF;
		sm_BleedingN.ACC[2] := TRUE;  
	ELSIF sm_BleedingN.STEP =3 THEN 
		IF sm_BleedingN.condition[3] THEN sm_BleedingN.STEP := 4; END_IF;
		sm_BleedingN.ACC[3] := TRUE;  
	ELSIF sm_BleedingN.STEP =4 THEN
		sm_BleedingN.Finish := TRUE;
		sm_BleedingN.ACC[1] := false;
		sm_BleedingN.ACC[2] := false;
		sm_BleedingN.ACC[3] := false;
	END_IF;
ELSIF sm_BleedingN.STEP >=1  THEN 
	sm_BleedingN.Finish := false; 
	sm_BleedingN.STEP :=-1;
	sm_BleedingN.ACC[1] := false;
	sm_BleedingN.ACC[2] := false;
	sm_BleedingN.ACC[3] := false;
END_IF;
//--------------------------------------------------

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="D04EF8A24CDB67FDA2C6629AAB3CBF64" Name="FB_sm_Check">
                <Variables>
                    <Variable UUID="572537B244EA8040CBB243A10BE0ABD2" Name="TMR_Check_SAU_12s" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[sm_Check.Start := LG.Check_SAU OR Drum_PZ.ACC[1];
TMR_Check_SAU_12s(sm_Check.ACC[1], ustT.Check_SAU_12s, TMO.Check_SAU_12s, TMR.Check_SAU_12s );
sm_Sound.condition[1] := TMO.Check_SAU_12s;
//------- Контроль системы ----------------------------------
IF sm_Check.Start THEN
	IF sm_Check.STEP<0 THEN 
		sm_Check.STEP := 1;   
		sm_Check.ACC[1] := true;
	ELSIF sm_Check.STEP = 1 THEN 
		IF sm_Check.condition[1] THEN sm_Sound.STEP := 2; END_IF;  
		sm_Check.ACC[1] := TRUE;
	ELSIF sm_Sound.STEP = 2 THEN 
		sm_Check.Finish := TRUE;
		sm_Check.ACC[1] := false;
		END_IF;
ELSIF sm_Check.STEP >=1  THEN 
	sm_Check.Finish := false; 
	sm_Check.STEP :=-1;
	sm_Check.ACC[1] := false;
END_IF;
//--------------------------------------------------
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="955AAF5144644E86D20617B1164FE7CA" Name="FB_sm_CoolingD" Comment="Охлаждение Д">
                <Variables>
                    <Variable UUID="6F0A188D43FDAC593169F990C74F4949" Name="TMR_CoolingGTD_NARR" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="F7C3ECF04234E591FD4C4790CB707661" Name="TMR_CoolingGTD_HH" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[sm_CoolingD.Start := Drum_NOss.ACC[2] OR  Drum_NObs.ACC[2];
sm_CoolingD.condition[1] := FRS.FRegMode = 9;
TMR_CoolingGTD_NARR(FRS.FRegMode = 9, ustT.CoolingGTD_NARR, TMO.CoolingGTD_NARR, TMR.CoolingGTD_NARR) ;
sm_CoolingD.condition[2] := FRS.FRegMode = 10;
sm_CoolingD.condition[3] := FRS.FRegMode = 11;
TMR_CoolingGTD_HH(FRS.FRegMode = 11, ustT.CoolingGTD_HH, TMO.CoolingGTD_HH, TMR.CoolingGTD_HH ) ;
sm_CoolingD.condition[4] := FRS.FRegMode = 0 OR FRS.FRegMode = 1;
//------- Охлаждение Д ----------------------------------
IF sm_CoolingD.Start THEN
	IF sm_CoolingD.STEP<0 THEN 
		sm_CoolingD.STEP := 1;   
		sm_CoolingD.ACC[1] := true;
	ELSIF sm_CoolingD.STEP = 1 THEN 
		IF sm_CoolingD.condition[1] THEN sm_CoolingD.STEP := 2; END_IF;  
		sm_CoolingD.ACC[1] := TRUE;
	ELSIF sm_CoolingD.STEP = 2 THEN 
		IF sm_CoolingD.condition[2] THEN sm_CoolingD.STEP := 3; END_IF;  
		sm_CoolingD.ACC[2] := TRUE;
	ELSIF sm_CoolingD.STEP = 3 THEN
		IF sm_CoolingD.condition[3] THEN sm_CoolingD.STEP := 4; END_IF;  
		sm_CoolingD.ACC[3] := TRUE;
	ELSIF sm_CoolingD.STEP = 4 THEN
		IF sm_CoolingD.condition[4] THEN sm_CoolingD.STEP := 5; END_IF;  
		sm_CoolingD.ACC[4] := TRUE;
	ELSIF sm_CoolingD.STEP = 5 THEN 
		sm_CoolingD.Finish := TRUE;
		sm_CoolingD.ACC[1] := false;
		sm_CoolingD.ACC[2] := false;
		sm_CoolingD.ACC[3] := false;
		sm_CoolingD.ACC[4] := false;
	END_IF;
ELSIF sm_CoolingD.STEP >=1  THEN 
	sm_CoolingD.Finish := false; 
	sm_CoolingD.STEP :=-1;
	sm_CoolingD.ACC[1] := false;
	sm_CoolingD.ACC[2] := false;
	sm_CoolingD.ACC[3] := false;
	sm_CoolingD.ACC[4] := false;
END_IF;
//--------------------------------------------------

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="CC09F373429CE992D3A904B3BC9B9162" Name="FB_sm_K_M" Comment="Переход Кольцо-Магистраль">
                <Variables />
                <ST><![CDATA[sm_K_M.Start := (Drum_APM.ACC[7] AND Calc_FR.Nst.out > 4400.0)  OR Drum_K_M.ACC[1];
sm_K_M.condition[1] := DGI.Kr2_ON;
sm_K_M.condition[2] := DGI.Kr6_OF;
//------- Переход К_М ----------------------------------
IF sm_K_M.Start THEN
	IF sm_K_M.STEP<0 THEN 
		sm_K_M.STEP := 1;   
		sm_K_M.ACC[1] := true;
	ELSIF sm_K_M.STEP = 1 THEN 
		IF sm_K_M.condition[1] THEN sm_K_M.STEP := 2; END_IF;  
		sm_K_M.ACC[1] := TRUE;
	ELSIF sm_K_M.STEP = 2 THEN 
		IF sm_K_M.condition[2] THEN sm_K_M.STEP := 3; END_IF;  
		sm_K_M.ACC[2] := TRUE;
	ELSIF sm_K_M.STEP = 3 THEN 
		sm_K_M.Finish := TRUE;
		sm_K_M.ACC[1] := false;
		sm_K_M.ACC[2] := false;
	END_IF;
ELSIF sm_K_M.STEP >=1  THEN 
	sm_K_M.Finish := false; 
	sm_K_M.STEP :=-1;
	sm_K_M.ACC[1] := false;
	sm_K_M.ACC[2] := false;
END_IF;
//--------------------------------------------------

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="B293D03F4399BC79558059A706F28045" Name="FB_sm_M_K">
                <Variables />
                <ST><![CDATA[sm_M_K.Start:= (Drum_NOss.ACC[1] AND NOT Drum_NOss.ACC[2]) OR 
				(Drum_NObs.ACC[1] AND NOT Drum_NObs.ACC[2]) OR 
				Drum_M_K.ACC[1] OR 
				Drum_OGR.ACC[1];
sm_M_K.condition[1]:= DGI.Kr6_ON;
sm_M_K.condition[2]:= DGI.Kr2_OF;
//------- Переход М_К ----------------------------------
IF sm_M_K.Start THEN
	IF sm_M_K.STEP<0 THEN 
		sm_M_K.STEP := 1; 
		sm_M_K.ACC[1] := true;
	ELSIF sm_M_K.STEP = 1 THEN 
		IF sm_M_K.condition[1] THEN sm_M_K.STEP := 2; END_IF;  
		sm_M_K.ACC[1] := TRUE;
	ELSIF sm_M_K.STEP = 2 THEN 
		IF sm_M_K.condition[2] THEN sm_M_K.STEP := 3; END_IF;  
		sm_M_K.ACC[2] := TRUE;
	ELSIF sm_M_K.STEP = 3 THEN 
		sm_M_K.Finish := TRUE;
		sm_M_K.ACC[1] := false;
		sm_M_K.ACC[2] := false;
		END_IF;
ELSIF sm_M_K.STEP >=1  THEN 
	sm_M_K.Finish := false;
	sm_M_K.STEP :=-1;
	sm_M_K.ACC[1] := false;
	sm_M_K.ACC[2] := false;
	END_IF;
//--------------------------------------------------]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="B53DFE614BD1386157A761B4DB85BD22" Name="FB_sm_Sound">
                <Variables>
                    <Variable UUID="0BC6C28144014FC902FEF6B6DF42F550" Name="TMR_Sound_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[sm_Sound.Start := 
				(Drum_APM.ACC[1] AND NOT Drum_APM.ACC[2]) OR
				(Drum_APK.ACC[1] AND NOT Drum_APK.ACC[2]) OR 
				(Drum_KPK.ACC[1] AND NOT Drum_KPK.ACC[2]) OR 
				(Drum_HP.ACC[1] AND NOT Drum_HP.ACC[2])  OR 
				(Drum_PZM.ACC[1] AND NOT Drum_PZM.ACC[2]) OR 
				(Drum_PBZ.ACC[1] AND NOT Drum_PBZ.ACC[2]) OR
				(Drum_TP.ACC[1] AND NOT Drum_TP.ACC[2]);
TMR_Sound_ON(sm_Sound.ACC[1], ustT.Sound_ON, TMO.Sound_ON, TMR.Sound_ON ) ;
sm_Sound.condition[1] := TMO.Sound_ON;
//------- Предпусковая сигнализация ----------------------------------
IF sm_Sound.Start THEN
	IF sm_Sound.STEP<0 THEN 
		sm_Sound.STEP := 1;   
		sm_Sound.ACC[1] := true;
	ELSIF sm_Sound.STEP = 1 THEN 
		IF sm_Sound.condition[1] THEN sm_Sound.STEP := 2; END_IF;  
		sm_Sound.ACC[1] := TRUE;
	ELSIF sm_Sound.STEP = 2 THEN 
		sm_Sound.Finish := TRUE;
		sm_Sound.ACC[1] := false;
		END_IF;
ELSIF sm_Sound.STEP >=1  THEN 
	sm_Sound.Finish := false; 
	sm_Sound.STEP :=-1;
	sm_Sound.ACC[1] := false;
END_IF;
//--------------------------------------------------]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="AB48193F4D3996BBA8C7229302E8E655" Name="FB_sm_Stop" Comment="Останов ГПА">
                <Variables />
                <ST><![CDATA[sm_Stop.Start := (Drum_AObs.ACC[1] AND NOT Drum_AObs.ACC[2]) OR
				 (Drum_AOss.ACC[1] AND NOT Drum_AOss.ACC[2]) OR 
				 (Drum_NOss.ACC[3] AND NOT Drum_NOss.ACC[4]) OR 
				 Drum_NObs.ACC[3] ; // 
sm_Stop.condition[1] := (DGI.Kr12_OF OR DGI.SK_OF) AND DGI.Kr2_OF AND DGI.Kr4_OF (*AND DGI.Kr6_ON*) AND Calc_AI.N_TN.PV < 300.0; 
sm_Stop.condition[2] := DGI.Kr1_OF AND DGI.Kr6_OF (*AND Calc_AI.N_KND.PV < 300.0 AND Calc_AI.N_KVD.PV < 300.0*);
//------- Останов ГПУ ----------------------------------
IF sm_Stop.Start THEN
	IF sm_Stop.STEP<0 THEN 
		sm_Stop.STEP := 1;   
		sm_Stop.ACC[1] := true;
	ELSIF sm_Stop.STEP = 1 THEN 
		IF sm_Stop.condition[1] THEN sm_Stop.STEP := 2; END_IF;  
		sm_Stop.ACC[1] := TRUE;
	ELSIF sm_Stop.STEP = 2 THEN 
		IF sm_Stop.condition[2] THEN sm_Stop.STEP := 3; END_IF;  
		sm_Stop.ACC[2] := TRUE;
	ELSIF sm_Stop.STEP = 3 THEN 
		sm_Stop.Finish := TRUE;
		sm_Stop.ACC[1] := false;
		sm_Stop.ACC[2] := false;
		END_IF;
ELSIF sm_Stop.STEP >=1  THEN 
	sm_Stop.Finish := false; 
	sm_Stop.STEP :=-1;
	sm_Stop.ACC[1] := false;
	sm_Stop.ACC[2] := false;
	END_IF;

//--------------------------------------------------
  

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="3E86F4BF4574B454B12A788A97A7AE63" Name="FB_sm_fillingN">
                <Variables>
                    <Variable UUID="66503EBC4A8292EA0CDA07AEB679DB65" Name="TMR_prodN" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="94A8724A4913A4D97544C29C57AF8EC4" Name="TMR_stabN" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Заполнение нагнетателя
sm_fillingN.Start :=  (Drum_KPK.ACC[3] AND NOT Drum_KPK.ACC[4])  OR 
					  (Drum_APK.ACC[3] AND NOT Drum_APK.ACC[4]) OR
					   (Drum_APM.ACC[3] AND NOT Drum_APM.ACC[4]);

sm_fillingN.condition[1] :=  DGI.Kr4_ON ;
TMR_prodN(DGI.Kr4_ON AND NOT DGI.Kr5_OF AND sm_fillingN.ACC[2], ustT.prodN, TMO.prodN, TMR.prodN ) ;
sm_fillingN.condition[2] :=  TMO.prodN OR DGI.Kr5_OF;
TMR_stabN((HMI_APR.Pg_in_N.PV > 4.5) AND DGI.dPg_in_Kr1 AND DGI.Kr5_OF, ustT.stabN, TMO.stabN, TMR.stabN  ) ;
sm_fillingN.condition[3] :=  TMO.stabN;
sm_fillingN.condition[4] :=  DGI.Kr1_ON ; 
sm_fillingN.condition[5] :=  DGI.Kr4_OF ; 
sm_fillingN.condition[6] :=  DGI.Kr6_ON ; 

IF sm_fillingN.Start THEN
	IF sm_fillingN.STEP<0 THEN 
	sm_fillingN.STEP := 1;   
	sm_fillingN.ACC[1] := true;
	ELSIF sm_fillingN.STEP = 1 THEN 
		IF sm_fillingN.condition[1] THEN sm_fillingN.STEP := 2; END_IF;  
	sm_fillingN.ACC[1] := TRUE;
	ELSIF sm_fillingN.STEP = 2 THEN 
		IF sm_fillingN.condition[2] THEN sm_fillingN.STEP := 3; END_IF;  
	sm_fillingN.ACC[2] := TRUE;
	ELSIF sm_fillingN.STEP = 3 THEN 
		IF sm_fillingN.condition[3] THEN sm_fillingN.STEP := 4; END_IF;  
	sm_fillingN.ACC[3] := TRUE;
	ELSIF sm_fillingN.STEP = 4 THEN 
		IF sm_fillingN.condition[4] THEN sm_fillingN.STEP := 5; END_IF;  
	sm_fillingN.ACC[4] := TRUE;
	ELSIF sm_fillingN.STEP = 5 THEN
		IF sm_fillingN.condition[5] THEN sm_fillingN.STEP := 6; END_IF;  
	sm_fillingN.ACC[5] := TRUE;
	ELSIF sm_fillingN.STEP = 6 THEN 
		IF sm_fillingN.condition[6] THEN sm_fillingN.STEP := 7; END_IF;  
	sm_fillingN.ACC[6] := TRUE;
	ELSIF sm_fillingN.STEP = 7 THEN 		
	sm_fillingN.Finish := TRUE;
	sm_fillingN.ACC[1] := false;
	sm_fillingN.ACC[2] := false;
	sm_fillingN.ACC[3] := false;
	sm_fillingN.ACC[4] := false;
	sm_fillingN.ACC[5] := false;
	sm_fillingN.ACC[6] := false;	
	END_IF;
ELSIF sm_fillingN.STEP >=1  THEN 
	sm_fillingN.Finish := false; 
	sm_fillingN.STEP :=-1;
	sm_fillingN.ACC[1] := false;
	sm_fillingN.ACC[2] := false;
	sm_fillingN.ACC[3] := false;
	sm_fillingN.ACC[4] := false;
	sm_fillingN.ACC[5] := false;
	sm_fillingN.ACC[6] := false;	
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="A847F6C34202EB3A9564E3B64402DC27" Name="FB_sm_startD" Comment="Запуск двигателя">
                <Variables>
                    <Variable UUID="2311F3934D8A6C3209E9519E6F0964AE" Name="TMR_RUS_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="8C3596454F1D1D33FE525099B68ACF70" Name="TMR_RPS_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="C00A71D74813E50EE95F9D92880999C5" Name="TMR_BP_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="239762424676B7C7E3305EB31314F679" Name="TMR_SK_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="2C9C9A274A61DF160034E0BB15D8BD60" Name="TMR_SK_Control" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="E725D95F4AE427E48CA1D993EA483078" Name="TMR_BP_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="3CD3ECFF4B52AA42E64D0EB0438E41CF" Name="TMR_StartGTD" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="A462229F419B727F7CC023AF3FF90871" Name="TMR_StartGTD_1" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Запуск двигателя
sm_startD.Start := (Drum_APK.ACC[5] AND NOT Drum_APK.ACC[6])  OR
					(Drum_PBZ.ACC[4]) OR 
					(Drum_APM.ACC[5] AND NOT Drum_APM.ACC[6] );

TMR_StartGTD(sm_startD.ACC[1], ustT.StartGTD, TMO.StartGTD, TMR.StartGTD);

TMR_RUS_ON(sm_startD.ACC[1], ustT.RUS_ON, TMO.RUS_ON, TMR.RUS_ON);
sm_startD.condition[1] := TMO.RUS_ON;

TMR_RPS_ON(sm_startD.ACC[2], ustT.RPS_ON, TMO.RPS_ON, TMR.RPS_ON);
sm_startD.condition[2] := TMO.RPS_ON;

TMR_BP_ON(sm_startD.ACC[3], ustT.BP_ON, TMO.BP_ON, TMR.BP_ON);
sm_startD.condition[3] := TMO.BP_ON;

TMR_SK_ON(sm_startD.ACC[4], ustT.SK_ON, TMO.SK_ON, TMR.SK_ON);
sm_startD.condition[4] := TMO.SK_ON;

TMR_SK_Control(sm_startD.ACC[5], ustT.SK_Control, TMO.SK_Control, TMR.SK_Control);
sm_startD.condition[5] := TMO.SK_Control;

TMR_BP_OF(sm_startD.ACC[6], ustT.BP_OF, TMO.BP_OF, TMR.BP_OF);
sm_startD.condition[6] := TMO.BP_OF OR Calc_AI.N_KND.PV > 2150.0;

sm_startD.condition[7] := FRS.FRegMode = 4;

//Запуск Д
IF sm_startD.Start THEN
	IF sm_startD.STEP<0 THEN 
	sm_startD.STEP := 1;   
	sm_startD.ACC[1] := true;
	ELSIF sm_startD.STEP = 1 THEN 
		IF sm_startD.condition[1] THEN sm_startD.STEP := 2; END_IF;  
	sm_startD.ACC[1] := TRUE;
	ELSIF sm_startD.STEP = 2 THEN 
		IF sm_startD.condition[2] THEN sm_startD.STEP := 3; END_IF;  
	sm_startD.ACC[2] := TRUE;
	ELSIF sm_startD.STEP = 3 THEN 
		IF sm_startD.condition[3] THEN sm_startD.STEP := 4; END_IF;  
	sm_startD.ACC[3] := TRUE;
	ELSIF sm_startD.STEP = 4 THEN 
		IF sm_startD.condition[4] THEN sm_startD.STEP := 5; END_IF;  
	sm_startD.ACC[4] := TRUE;
	ELSIF sm_startD.STEP = 5 THEN 
		IF sm_startD.condition[5] THEN sm_startD.STEP := 6; END_IF;  
	sm_startD.ACC[5] := TRUE;
	ELSIF sm_startD.STEP = 6 THEN 
		IF sm_startD.condition[6] THEN sm_startD.STEP := 7; END_IF;  
	sm_startD.ACC[6] := TRUE;
	ELSIF sm_startD.STEP = 7 THEN 
		IF sm_startD.condition[7] THEN sm_startD.STEP := 8; END_IF;  
	sm_startD.ACC[7] := TRUE;
	ELSIF sm_startD.STEP = 8 THEN 
	sm_startD.Finish := TRUE;
	sm_startD.ACC[1] := false;
	sm_startD.ACC[2] := false;
	sm_startD.ACC[3] := false;
	sm_startD.ACC[4] := false;
	sm_startD.ACC[5] := false;
	sm_startD.ACC[6] := false;
	sm_startD.ACC[7] := false;
	END_IF;
ELSIF sm_startD.STEP >=1  THEN 
	sm_startD.Finish := false; 
	sm_startD.STEP :=-1;
	sm_startD.ACC[1] := false;
	sm_startD.ACC[2] := false;
	sm_startD.ACC[3] := false;
	sm_startD.ACC[4] := false;
	sm_startD.ACC[5] := false;
	sm_startD.ACC[6] := false;
	sm_startD.ACC[7] := false;
END_IF;



IF sm_startD.ACC[1] then
ustT.StartGTD_1 := ustT.StartGTD_1 + STRING_TO_TIME(CONCAT('T#', REAL_TO_STRING(del_T*2.0),'s'));
//TMR.StartGTD_1 := T#0.2s;
else
ustT.StartGTD_1 := T#0.0s;
TMR.StartGTD_1 := T#0.0s;
end_if;
TMR_StartGTD_1(sm_startD.ACC[1], ustT.StartGTD_1, TMO.StartGTD_1, TMR.StartGTD_1);]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="8D09F7AF41F1E725587393B24FDF4904" Name="FB_sm_startMD" Comment="Пуск маслосистемы двигателя">
                <Variables>
                    <Variable UUID="6E2418A44CDCC4DC058B58B21C0DE77C" Name="TMR_startMD" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="9EC3F11B4136E549A92658B04C9F892E" Name="TMR_StabMD" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Пуск маслосистемы двигателя
sm_startMD.Start := (Drum_PZM.ACC[2] AND NOT Drum_PZM.ACC[3]) OR 
					(Drum_HP.ACC[2] AND NOT Drum_HP.ACC[3]) OR
					(Drum_APK.ACC[2] AND NOT Drum_APK.ACC[3]) OR 
					(Drum_PBZ.ACC[2] AND NOT Drum_PBZ.ACC[3]) OR 
					(Drum_APM.ACC[2] AND NOT Drum_APM.ACC[3])OR
					(Drum_TP.ACC[2] AND NOT Drum_TP.ACC[3]);
TMR_startMD(sm_startMD.ACC[1] AND DGI.MNOD_ON, ustT.startMD, TMO.startMD, TMR.startMD ) ;
sm_startMD.condition[1] := TMO.startMD;
sm_startMD.condition[2] :=  DGI.Pm_MNOD_002 AND DGI.MNND_ON; 
sm_startMD.condition[3] :=  Q_ON.P_msm_D_HH;
						   	
// Запуск маслосистемы Д
IF sm_startMD.Start THEN
	IF sm_startMD.STEP<0 THEN 
	sm_startMD.STEP := 1;   
	sm_startMD.ACC[1] := true;
	ELSIF sm_startMD.STEP = 1 THEN 
		IF sm_startMD.condition[1] THEN sm_startMD.STEP := 2; END_IF;  
	sm_startMD.ACC[1] := TRUE;
	ELSIF sm_startMD.STEP = 2 THEN 
		IF sm_startMD.condition[2] THEN sm_startMD.STEP := 3; END_IF;  
	sm_startMD.ACC[2] := TRUE;
	ELSIF sm_startMD.STEP = 3 THEN 
		IF sm_startMD.condition[3] THEN sm_startMD.STEP := 4; END_IF;  
	sm_startMD.ACC[3] := TRUE;
	ELSIF sm_startMD.STEP =4 THEN 
	sm_startMD.Finish := TRUE;
	sm_startMD.ACC[1] := false;
	sm_startMD.ACC[2] := false;
	sm_startMD.ACC[3] := false;
	END_IF;
ELSIF sm_startMD.STEP >=1  THEN 
	sm_startMD.Finish := false; 
	sm_startMD.STEP :=-1;
	sm_startMD.ACC[1] := false;
	sm_startMD.ACC[2] := false;
	sm_startMD.ACC[3] := false;
END_IF;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="58062A234964DEE3A0E7F6965A1EA485" Name="FB_sm_startMN" Comment="Пуск маслосистемы нагнетателя">
                <Variables>
                    <Variable UUID="C1A2F0D64492DD3E90DDD18F68CFC81B" Name="TMR_stabMN" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="7262591D415FEEAFF5B109BBB6BE63AD" Name="TMR_stabMUN" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Пуск маслосистемы нагнетателя
sm_startMN.Start := (Drum_PZM.ACC[2] AND NOT Drum_PZM.ACC[3]) OR
					(Drum_KPK.ACC[2] AND NOT Drum_KPK.ACC[3]) OR
					(Drum_HP.ACC[2] AND NOT Drum_HP.ACC[3]) OR
					(Drum_APK.ACC[2] AND NOT Drum_APK.ACC[3]) OR
					(Drum_PBZ.ACC[2] AND NOT Drum_PBZ.ACC[3]) OR
					(Drum_APM.ACC[2] AND NOT Drum_APM.ACC[3]) OR 
					(Drum_TP.ACC[2] AND NOT Drum_TP.ACC[3]);

sm_startMN.condition[1] := DGI.PMNS_ON AND (AI_HMI.Pm_N.PV > 0.12);
TMR_stabMN(sm_startMN.ACC[2] , ustT.stabMN, TMO.stabMN, TMR.stabMN ) ;
sm_startMN.condition[2] := TMO.stabMN AND Q_ON.P_msm_N;
sm_startMN.condition[3] := (AI_HMI.dP_mg.PV > 100.0) AND NOT DGI.dPmg ;
TMR_stabMUN(sm_startMN.ACC[4] , ustT.stabMUN, TMO.stabMUN, TMR.stabMUN ) ;
sm_startMN.condition[4] := TMO.stabMUN AND Q_ON.dP_mg;
//Запуск маслосистемы Н
IF sm_startMN.Start THEN
	IF sm_startMN.STEP<0 THEN 
	sm_startMN.STEP := 1;   
	sm_startMN.ACC[1] := true;
ELSIF sm_startMN.STEP = 1 THEN 
		IF sm_startMN.condition[1] THEN sm_startMN.STEP := 2; END_IF;  
	sm_startMN.ACC[1] := TRUE;
ELSIF sm_startMN.STEP = 2 THEN 
		IF sm_startMN.condition[2] THEN sm_startMN.STEP := 3; END_IF;  
	sm_startMN.ACC[2] := TRUE;
ELSIF sm_startMN.STEP = 3 THEN 
		IF sm_startMN.condition[3] THEN sm_startMN.STEP := 4; END_IF;  
	sm_startMN.ACC[3] := TRUE;
ELSIF sm_startMN.STEP = 4 THEN 
		IF sm_startMN.condition[4] THEN sm_startMN.STEP := 5; END_IF;  
	sm_startMN.ACC[4] := TRUE;
ELSIF sm_startMN.STEP = 5 THEN 
	sm_startMN.Finish := TRUE;
	sm_startMN.ACC[1] := false;
	sm_startMN.ACC[2] := false;
	sm_startMN.ACC[3] := false;
    sm_startMN.ACC[4] := false;
	END_IF;
ELSIF sm_startMN.STEP >=1  THEN 
	sm_startMN.Finish := false; 
	sm_startMN.STEP :=-1;
	sm_startMN.ACC[1] := false;
	sm_startMN.ACC[2] := false;
	sm_startMN.ACC[3] := false;
    sm_startMN.ACC[4] := false;
END_IF;
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="2367C5FF49C361A94CE7F29F68D6135D" Name="FB_sm_startTG" Comment="Пуск системы подачи топливного газа">
                <Variables>
                    <Variable UUID="51A6C4CA45540DBF3CEDBE89C6ACC4BB" Name="TMR_startTG" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Пуск системы подачи топливного газа
sm_startTG.Start := (Drum_APK.ACC[4] AND NOT Drum_APK.ACC[5])  OR
					(Drum_PBZ.ACC[3] AND NOT Drum_PBZ.ACC[4])  OR
					(Drum_APM.ACC[4] AND NOT Drum_APM.ACC[5]) OR
					(Drum_KPK.ACC[4] AND NOT Drum_KPK.ACC[5]);
TMR_startTG(DGI.Kr12_ON AND DGI.SK_OF, ustT.startTG, TMO.startTG, TMR.startTG);
sm_startTG.condition[1] := TMO.startTG;
sm_startTG.condition[2] := DGI.Kr9_OF AND AI_HMI.Ptg_in_BTA.PV > 1.6 ;
//------- Охлаждение Д ----------------------------------
IF sm_startTG.Start THEN
	IF sm_startTG.STEP<0 THEN 
		sm_startTG.STEP := 1;   
		sm_startTG.ACC[1] := true;
	ELSIF sm_startTG.STEP = 1 THEN 
		IF sm_startTG.condition[1] THEN sm_startTG.STEP := 2; END_IF;  
		sm_startTG.ACC[1] := TRUE;
	ELSIF sm_startTG.STEP = 2 THEN 
		IF sm_startTG.condition[2] THEN sm_startTG.STEP := 3; END_IF;  
		sm_startTG.ACC[2] := TRUE;
	ELSIF sm_startTG.STEP = 3 THEN 
		sm_startTG.Finish := TRUE;
		sm_startTG.ACC[1] := false;
		sm_startTG.ACC[2] := false;
	END_IF;
ELSIF sm_startTG.STEP >=1  THEN 
	sm_startTG.Finish := false; 
	sm_startTG.STEP :=-1;
	sm_startTG.ACC[1] := false;
	sm_startTG.ACC[2] := false;
END_IF;
//--------------------------------------------------

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="4A8CB5D54266B0B74107B78C73600F24" Name="FB_sm_warmD" Comment="Подогрев двигателя">
                <Variables>
                    <Variable UUID="612F3B7540F0E06105D6C6800645C836" Name="TMR_warm_HH" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="348EBD11425C9CB9868F6E98BD4ECAD3" Name="TMR_warm_NARR" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Прогрев двигателя
sm_warmD.Start := (Drum_APK.ACC[6]) OR
				  (Drum_APM.ACC[6] AND NOT Drum_APM.ACC[7]);


TMR_warm_HH(FRS.FRegMode = 4, ustT.warm_HH, TMO.warm_HH, TMR.warm_HH);
sm_warmD.condition[1] := TMO.warm_HH OR FRS.FRegMode = 5;

sm_warmD.condition[2] := FRS.FRegMode = 6;

TMR_warm_NARR(FRS.FRegMode = 6, ustT.warm_NARR, TMO.warm_NARR, TMR.warm_NARR);
sm_warmD.condition[3] := FRS.FRegMode = 7;

//Подогрев двигателя
IF sm_warmD.Start THEN
	IF sm_warmD.STEP<0 THEN 
	sm_warmD.STEP := 1;   
	sm_warmD.ACC[1] := true;
ELSIF sm_warmD.STEP = 1 THEN 
		IF sm_warmD.condition[1] THEN sm_warmD.STEP := 2; END_IF;  
	sm_warmD.ACC[1] := TRUE;
ELSIF sm_warmD.STEP = 2 THEN 
		IF sm_warmD.condition[2] THEN sm_warmD.STEP := 3; END_IF;  
	sm_warmD.ACC[2] := TRUE;
ELSIF sm_warmD.STEP = 3 THEN 
		IF sm_warmD.condition[3] THEN sm_warmD.STEP := 4; END_IF;  
	sm_warmD.ACC[3] := TRUE;
ELSIF sm_warmD.STEP = 4 THEN 
	sm_warmD.Finish := TRUE;
	sm_warmD.ACC[1] := false;
	sm_warmD.ACC[2] := false;
	sm_warmD.ACC[3] := false;
	END_IF;
ELSIF sm_warmD.STEP >=1  THEN 
	sm_warmD.Finish := false; 
	sm_warmD.STEP :=-1;
	sm_warmD.ACC[1] := false;
	sm_warmD.ACC[2] := false;
	sm_warmD.ACC[3] := false;
END_IF;
]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="04_APS" Comment="" Data="" UUID="3ABBEC9247704BC742BA4389E21940C4">
            <FunctionBlock UUID="138B98144DAEE2BD0B1EA793FDA1A9AB" Name="FB_AS0">
                <Variables>
                    <Variable UUID="64B177214F805A58666B13870661AE21" Name="cycle" Comment="cycle time (sec)" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="666758BA4830682831AF11AC1B0B15E1" Name="unlock" Comment="unlock" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="4039CF8E49897E9D786CCC9E86B1229C" Name="delay" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="CD71CB294DAF2F77AB5027821332AE5C" Name="j" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="24B725EB498D6C8E8EC228AD1EBD9113" Name="L_SND_COUNT" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="E686E7D64B06483022167F8CE8B179FF" Name="AS_INDX" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="7CE1032545BEF1F653223FABCF3CB718" Name="SND_AS_OFF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="6C8DF366482B74E9C0D47FBA3DD55203" Name="SND_AS" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                </Variables>
                <ST><![CDATA[LG.AOb:= LG.AOb AND NOT unlock;
LG.AOs:= LG.AOs AND NOT unlock;
LG.NOb:= LG.NOb AND NOT unlock;
LG.NOs:= LG.NOs AND NOT unlock;
IF unlock THEN Str_PLC.first_NOs :=''; Str_PLC.first_NOb :=''; Str_PLC.first_AOs :='';Str_PLC.first_AOb :=''; END_IF;
//------------------------------DGI---------------------------------------
//AOs: Нет Pм на входе в ситему смазки Н РД1
IF Q_ON.P_msm_N AND  NOT DGI.Pm_N_RD1 THEN IF delay[0]  <= 1.0 THEN delay[0] := delay[0] + cycle; END_IF; ELSE delay[0]  := 0.0; END_IF;
AS.Pm_N_RD1 := delay[0] > 2.0 OR AS.Pm_N_RD1 AND NOT unlock ;
IF AS.Pm_N_RD1 AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Нет Pм на входе в ситему смазки Н РД1'; END_IF;
LG.AOs := LG.AOs OR AS.Pm_N_RD1;
AS_INDX[0] := AS.Pm_N_RD1;
//AOs: Нет dP "масло-газ"
IF Q_ON.dP_mg AND DGI.dPmg AND DGI.KCD_dPmg THEN IF delay[1]  <= 1.0 THEN delay[1] := delay[1] + cycle; END_IF; ELSE delay[1]  := 0.0; END_IF;
AS.dPmg := delay[1] > 1.0 OR AS.dPmg AND NOT unlock ;
IF AS.dPmg AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Нет dP "масло-газ"'; END_IF;
LG.AOs := LG.AOs OR AS.dPmg;
AS_INDX[1] := AS.dPmg;
//AOs: Загазованность галереи H>1,0%
IF DGI.Gas_N AND DGI.KCD_Gas_N THEN IF delay[2]  <= 1.0 THEN delay[2] := delay[2] + cycle; END_IF; ELSE delay[2]  := 0.0; END_IF;
AS.Gas_N := delay[2] > 1.0 OR AS.Gas_N AND NOT unlock ;
IF AS.Gas_N AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Загазованность галереи H>1,0%'; END_IF;
LG.AOs := LG.AOs OR AS.Gas_N;
AS_INDX[2] := AS.Gas_N;
//AOs: АО с кнопки на панели управления
IF DGI.But_AO_ON AND DGI.KCD_But_AO_ON THEN IF delay[3]  <= 0.5 THEN delay[3] := delay[3] + cycle; END_IF; ELSE delay[3]  := 0.0; END_IF;
AS.But_AO_ON := delay[3] > 0.5 OR AS.But_AO_ON AND NOT unlock ;
IF AS.But_AO_ON AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'АО с кнопки на панели управления'; END_IF;
LG.AOs := LG.AOs OR AS.But_AO_ON;
AS_INDX[3] := AS.But_AO_ON;
//AOs: Аварийный останов (АО) от САУ КЦ
IF DGI.AO_SAU AND DGI.KCD_AO_SAU THEN IF delay[4]  <= 0.5 THEN delay[4] := delay[4] + cycle; END_IF; ELSE delay[4]  := 0.0; END_IF;
AS.AO_SAU := delay[4] > 0.5 OR AS.AO_SAU AND NOT unlock ;
IF AS.AO_SAU AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийный останов (АО) от САУ КЦ'; END_IF;
LG.AOs := LG.AOs OR AS.AO_SAU;
AS_INDX[4] := AS.AO_SAU;
//AOs: Аварийный останов (АО) от кнопки в машзале
IF DGI.AO_btn AND DGI.KCD_AO_btn THEN IF delay[5]  <= 0.5 THEN delay[5] := delay[5] + cycle; END_IF; ELSE delay[5]  := 0.0; END_IF;
AS.AO_btn := delay[5] > 0.5 OR AS.AO_btn AND NOT unlock ;
IF AS.AO_btn AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийный останов (АО) от кнопки в машзале'; END_IF;
LG.AOs := LG.AOs OR AS.AO_btn;
AS_INDX[5] := AS.AO_btn;
//AOs: Пожар (обобщенный сигнал)
IF DGI.Fire AND DGI.KCD_Fire THEN IF delay[6]  <= 1.0 THEN delay[6] := delay[6] + cycle; END_IF; ELSE delay[6]  := 0.0; END_IF;
AS.Fire := delay[6] > 1.0 OR AS.Fire AND NOT unlock ;
IF AS.Fire AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Пожар (обобщенный сигнал)'; END_IF;
LG.AOs := LG.AOs OR AS.Fire;
AS_INDX[6] := AS.Fire;
//AOs: Помпаж нагнетателя
AS.Pomp_N := DGI.Pomp_N AND DGI.KCD_Pomp_N OR AS.Pomp_N AND  NOT unlock ;
IF AS.Pomp_N AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Помпаж нагнетателя'; END_IF;
LG.AOs := LG.AOs OR AS.Pomp_N;
AS_INDX[7] := AS.Pomp_N;
//AOs: Осевой сдвиг ротора нагнетателя вперед (к турбине)
AS.Sdvig_N_ahead := DGI.Sdvig_N_ahead AND DGI.KCD_Sdvig_N_ahead OR AS.Sdvig_N_ahead AND  NOT unlock ;
IF AS.Sdvig_N_ahead AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Осевой сдвиг ротора нагнетателя вперед (к турбине)'; END_IF;
LG.AOs := LG.AOs OR AS.Sdvig_N_ahead;
AS_INDX[8] := AS.Sdvig_N_ahead;
//AOs: Осевой сдвиг ротора нагнетателя назад (от турбины)
AS.Sdvig_N_back := DGI.Sdvig_N_back AND DGI.KCD_Sdvig_N_back OR AS.Sdvig_N_back AND  NOT unlock ;
IF AS.Sdvig_N_back AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Осевой сдвиг ротора нагнетателя назад (от турбины)'; END_IF;
LG.AOs := LG.AOs OR AS.Sdvig_N_back;
AS_INDX[9] := AS.Sdvig_N_back;
//AOs: Срабатывание БЭО
AS.But_BEO_ON := DGI.But_BEO_ON AND DGI.KCD_But_BEO_ON OR AS.But_BEO_ON AND  NOT unlock ;
IF AS.But_BEO_ON AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Срабатывание БЭО'; END_IF;
LG.AOs := LG.AOs OR AS.But_BEO_ON;
AS_INDX[10] := AS.But_BEO_ON;
//AOb: P масла на входе в двигатель <0,1 МПа
IF Q_ON.P_msm_D AND DGI.Pm_in_D_alarm_low AND DGI.KCD_Pm_in_D_alarm_low THEN IF delay[7]  <= 2.0 THEN delay[7] := delay[7] + cycle; END_IF; ELSE delay[7]  := 0.0; END_IF;
AS.Pm_in_D_alarm_low := delay[7] > 2.0 OR AS.Pm_in_D_alarm_low AND NOT unlock ;
IF AS.Pm_in_D_alarm_low AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'P масла на входе в двигатель <0,1 МПа'; END_IF;
LG.AOb := LG.AOb OR AS.Pm_in_D_alarm_low;
AS_INDX[11] := AS.Pm_in_D_alarm_low;
//AOb: P масла за эл. МНОД <0,02 МПа
IF Q_ON.P_msm_D_HH AND  NOT DGI.Pm_MNOD_002 THEN IF delay[8]  <= 2.0 THEN delay[8] := delay[8] + cycle; END_IF; ELSE delay[8]  := 0.0; END_IF;
AS.Pm_MNOD_002 := delay[8] > 2.0 OR AS.Pm_MNOD_002 AND NOT unlock ;
IF AS.Pm_MNOD_002 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'P масла за эл. МНОД <0,02 МПа'; END_IF;
LG.AOb := LG.AOb OR AS.Pm_MNOD_002;
AS_INDX[12] := AS.Pm_MNOD_002;
//AOb: Нет питания 380 В на КК (стартеры)
AS.U380_KK := LG.Block_380 AND  NOT DGI.U380_KK OR AS.U380_KK AND  NOT unlock ;
IF AS.U380_KK AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Нет питания 380 В на КК (стартеры)'; END_IF;
LG.AOb := LG.AOb OR AS.U380_KK;
AS_INDX[13] := AS.U380_KK;
//AOb: Авария ОРТ
AS.ORT_alarm := DGI.ORT_alarm AND DGI.KCD_ORT_alarm OR AS.ORT_alarm AND  NOT unlock ;
IF AS.ORT_alarm AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Авария ОРТ'; END_IF;
LG.AOb := LG.AOb OR AS.ORT_alarm;
AS_INDX[14] := AS.ORT_alarm;
//AOb: Стоп-кран не открыт
AS.SK_ON := Q_ON.SK_ON AND  NOT DGI.SK_ON OR AS.SK_ON AND  NOT unlock ;
IF AS.SK_ON AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Стоп-кран не открыт'; END_IF;
LG.AOb := LG.AOb OR AS.SK_ON;
AS_INDX[15] := AS.SK_ON;
//AOb: Уровень масла в МБ двигателя аварийный
IF DGI.Lm_MBD_alarm AND DGI.KCD_Lm_MBD_alarm THEN IF delay[9]  <= 1.0 THEN delay[9] := delay[9] + cycle; END_IF; ELSE delay[9]  := 0.0; END_IF;
AS.Lm_MBD_alarm := delay[9] > 1.0 OR AS.Lm_MBD_alarm AND NOT unlock ;
IF AS.Lm_MBD_alarm AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Уровень масла в МБ двигателя аварийный'; END_IF;
LG.AOb := LG.AOb OR AS.Lm_MBD_alarm;
AS_INDX[16] := AS.Lm_MBD_alarm;
//NOs: НО от кнопки «НО ГПА»
AS.But_NO_ON := DGI.But_NO_ON OR AS.But_NO_ON AND  NOT unlock ;
IF AS.But_NO_ON AND Str_PLC.first_NOs = ''  THEN  Str_PLC.first_NOs:= 'НО от кнопки «НО ГПА»'; END_IF;
LG.NOs := LG.NOs OR AS.But_NO_ON;
AS_INDX[17] := AS.But_NO_ON;
//-------------------------------LG--------------------------------------
//AOs: АОсс по команде оператора (АРМ)
AS.Aoss_BTN_ARM := LG.Aoss_BTN_ARM OR AS.Aoss_BTN_ARM AND NOT unlock ;
IF AS.Aoss_BTN_ARM AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'АОсс по команде оператора (АРМ)'; END_IF;
LG.AOs := LG.AOs OR AS.Aoss_BTN_ARM;
AS_INDX[18] := AS.Aoss_BTN_ARM;
//AOs: АОсс по команде оператора (ПРУ)
AS.Aoss_BTN_PRU := LG.Aoss_BTN_PRU OR AS.Aoss_BTN_PRU AND NOT unlock ;
IF AS.Aoss_BTN_PRU AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'АОсс по команде оператора (ПРУ)'; END_IF;
LG.AOs := LG.AOs OR AS.Aoss_BTN_PRU;
AS_INDX[19] := AS.Aoss_BTN_PRU;
//AOs: Помпаж нагнетателя (АПР)
AS.SurgeN := LG.SurgeN OR AS.SurgeN AND NOT unlock ;
IF AS.SurgeN AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Помпаж нагнетателя (АПР)'; END_IF;
LG.AOs := LG.AOs OR AS.SurgeN;
AS_INDX[20] := AS.SurgeN;
//AOb: Нет включения КУ в КК1 (1 скор.)
IF LG.Altivar_Sk1 AND LG.KU_KK1_nON_1 THEN IF delay[10]  <= 5.0 THEN delay[10] := delay[10] + cycle; END_IF; ELSE delay[10]  := 0.0; END_IF;
AS.KU_KK1_nON_1 := delay[10] > 5.0 OR AS.KU_KK1_nON_1  AND NOT unlock ;
IF AS.KU_KK1_nON_1 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Нет включения КУ в КК1 (1 скор.)'; END_IF;
LG.AOb := LG.AOb OR AS.KU_KK1_nON_1;
AS_INDX[21] := AS.KU_KK1_nON_1;
//AOb: Нет включения КУ в КК2 (1 скор.)
IF LG.Altivar_Sk1 AND LG.KU_KK2_nON_1 THEN IF delay[11]  <= 5.0 THEN delay[11] := delay[11] + cycle; END_IF; ELSE delay[11]  := 0.0; END_IF;
AS.KU_KK2_nON_1 := delay[11] > 5.0 OR AS.KU_KK2_nON_1  AND NOT unlock ;
IF AS.KU_KK2_nON_1 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Нет включения КУ в КК2 (1 скор.)'; END_IF;
LG.AOb := LG.AOb OR AS.KU_KK2_nON_1;
AS_INDX[22] := AS.KU_KK2_nON_1;
//AOb: Нет включения КУ в КК1 (2 скор.)
IF LG.Altivar_Sk2 AND LG.KU_KK1_nON_2 THEN IF delay[12]  <= 5.0 THEN delay[12] := delay[12] + cycle; END_IF; ELSE delay[12]  := 0.0; END_IF;
AS.KU_KK1_nON_2 := delay[12] > 5.0 OR AS.KU_KK1_nON_2  AND NOT unlock ;
IF AS.KU_KK1_nON_2 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Нет включения КУ в КК1 (2 скор.)'; END_IF;
LG.AOb := LG.AOb OR AS.KU_KK1_nON_2;
AS_INDX[23] := AS.KU_KK1_nON_2;
//AOb: Нет включения КУ в КК2 (2 скор.)
IF LG.Altivar_Sk2 AND LG.KU_KK2_nON_2 THEN IF delay[13]  <= 5.0 THEN delay[13] := delay[13] + cycle; END_IF; ELSE delay[13]  := 0.0; END_IF;
AS.KU_KK2_nON_2 := delay[13] > 5.0 OR AS.KU_KK2_nON_2  AND NOT unlock ;
IF AS.KU_KK2_nON_2 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Нет включения КУ в КК2 (2 скор.)'; END_IF;
LG.AOb := LG.AOb OR AS.KU_KK2_nON_2;
AS_INDX[24] := AS.KU_KK2_nON_2;
//AOb: Время запуска > 600 сек.
AS.Time_start_600 := LG.Time_start_600 OR AS.Time_start_600 AND NOT unlock ;
IF AS.Time_start_600 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Время запуска > 600 сек.'; END_IF;
LG.AOb := LG.AOb OR AS.Time_start_600;
AS_INDX[25] := AS.Time_start_600;
//AOb: АОбс по команде оператора
AS.Aobs_BTN_ARM := LG.Aobs_BTN_ARM OR AS.Aobs_BTN_ARM AND NOT unlock ;
IF AS.Aobs_BTN_ARM AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'АОбс по команде оператора'; END_IF;
LG.AOb := LG.AOb OR AS.Aobs_BTN_ARM;
AS_INDX[26] := AS.Aobs_BTN_ARM;
//AOb: АОбс от ПРУ
AS.Aobs_BTN_PRU := LG.Aobs_BTN_PRU OR AS.Aobs_BTN_PRU AND NOT unlock ;
IF AS.Aobs_BTN_PRU AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'АОбс от ПРУ'; END_IF;
LG.AOb := LG.AOb OR AS.Aobs_BTN_PRU;
AS_INDX[27] := AS.Aobs_BTN_PRU;
//AOb: Нет розжига
AS.A_noFire1 := LG.A_noFire1 OR AS.A_noFire1 AND NOT unlock ;
IF AS.A_noFire1 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Нет розжига'; END_IF;
LG.AOb := LG.AOb OR AS.A_noFire1;
AS_INDX[28] := AS.A_noFire1;
//AOb: Погасание факела
AS.A_noFire2 := Q_ON.fakel AND LG.A_noFire2 OR AS.A_noFire2 AND NOT unlock ;
IF AS.A_noFire2 AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Погасание факела'; END_IF;
LG.AOb := LG.AOb OR AS.A_noFire2;
AS_INDX[29] := AS.A_noFire2;
//AOb: Отказ каналов изм. N КНД
AS.A_NndBrk := LG.A_NndBrk OR AS.A_NndBrk AND NOT unlock ;
IF AS.A_NndBrk AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Отказ каналов изм. N КНД'; END_IF;
LG.AOb := LG.AOb OR AS.A_NndBrk;
AS_INDX[30] := AS.A_NndBrk;
//AOb: Отказ каналов изм. N КВД
AS.A_NvdBrk := LG.A_NvdBrk OR AS.A_NvdBrk AND NOT unlock ;
IF AS.A_NvdBrk AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Отказ каналов изм. N КВД'; END_IF;
LG.AOb := LG.AOb OR AS.A_NvdBrk;
AS_INDX[31] := AS.A_NvdBrk;
//AOb: Отказ каналов изм. N ТН
AS.A_NstBrk := LG.A_NstBrk OR AS.A_NstBrk AND NOT unlock ;
IF AS.A_NstBrk AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Отказ каналов изм. N ТН'; END_IF;
LG.AOb := LG.AOb OR AS.A_NstBrk;
AS_INDX[32] := AS.A_NstBrk;
//AOb: Отказ каналов изм. Т газа за ТНД
AS.A_Tg_outTNDbrk := LG.A_Tg_outTNDbrk OR AS.A_Tg_outTNDbrk AND NOT unlock ;
IF AS.A_Tg_outTNDbrk AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Отказ каналов изм. Т газа за ТНД'; END_IF;
LG.AOb := LG.AOb OR AS.A_Tg_outTNDbrk;
AS_INDX[33] := AS.A_Tg_outTNDbrk;
//AOb: Низкая N КНД на режиме
AS.A_NndLow := LG.A_NndLow OR AS.A_NndLow AND NOT unlock ;
IF AS.A_NndLow AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Низкая N КНД на режиме'; END_IF;
LG.AOb := LG.AOb OR AS.A_NndLow;
AS_INDX[34] := AS.A_NndLow;
//AOb: Низкая N КВД на режиме
AS.A_NvdLow := LG.A_NvdLow OR AS.A_NvdLow AND NOT unlock ;
IF AS.A_NvdLow AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Низкая N КВД на режиме'; END_IF;
LG.AOb := LG.AOb OR AS.A_NvdLow;
AS_INDX[35] := AS.A_NvdLow;
//AOb: Низкая N ТН на режиме
AS.A_NstLow := LG.A_NstLow OR AS.A_NstLow AND NOT unlock ;
IF AS.A_NstLow AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Низкая N ТН на режиме'; END_IF;
LG.AOb := LG.AOb OR AS.A_NstLow;
AS_INDX[36] := AS.A_NstLow;
//AOb: Высокая N КНД
AS.A_NndHigh := LG.A_NndHigh OR AS.A_NndHigh AND NOT unlock ;
IF AS.A_NndHigh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Высокая N КНД'; END_IF;
LG.AOb := LG.AOb OR AS.A_NndHigh;
AS_INDX[37] := AS.A_NndHigh;
//AOb: Высокая N КВД
AS.A_NvdHigh := LG.A_NvdHigh OR AS.A_NvdHigh AND NOT unlock ;
IF AS.A_NvdHigh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Высокая N КВД'; END_IF;
LG.AOb := LG.AOb OR AS.A_NvdHigh;
AS_INDX[38] := AS.A_NvdHigh;
//AOb: Высокое давление воздуза за КВД
AS.A_Pv_outKVDHigh := LG.A_Pv_outKVDHigh OR AS.A_Pv_outKVDHigh AND NOT unlock ;
IF AS.A_Pv_outKVDHigh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Высокое давление воздуза за КВД'; END_IF;
LG.AOb := LG.AOb OR AS.A_Pv_outKVDHigh;
AS_INDX[39] := AS.A_Pv_outKVDHigh;
//AOb: Высокая температура газа за ТНД
AS.A_Tg_outTNDhigh := LG.A_Tg_outTNDhigh OR AS.A_Tg_outTNDhigh AND NOT unlock ;
IF AS.A_Tg_outTNDhigh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Высокая температура газа за ТНД'; END_IF;
LG.AOb := LG.AOb OR AS.A_Tg_outTNDhigh;
AS_INDX[40] := AS.A_Tg_outTNDhigh;
//AOb: Высокая температура газа за ТНД на запуске
AS.A_Tg_outTNDstartHigh := LG.A_Tg_outTNDstartHigh OR AS.A_Tg_outTNDstartHigh AND NOT unlock ;
IF AS.A_Tg_outTNDstartHigh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Высокая температура газа за ТНД на запуске'; END_IF;
LG.AOb := LG.AOb OR AS.A_Tg_outTNDstartHigh;
AS_INDX[41] := AS.A_Tg_outTNDstartHigh;
//AOb: Рассогласование по ДГ
AS.A_Dgdistort := LG.A_Dgdistort OR AS.A_Dgdistort AND NOT unlock ;
IF AS.A_Dgdistort AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Рассогласование по ДГ'; END_IF;
LG.AOb := LG.AOb OR AS.A_Dgdistort;
AS_INDX[42] := AS.A_Dgdistort;
//AOb: Высокая N ТН
AS.A_NstHigh := LG.A_NstHigh OR AS.A_NstHigh AND NOT unlock ;
IF AS.A_NstHigh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Высокая N ТН'; END_IF;
LG.AOb := LG.AOb OR AS.A_NstHigh;
AS_INDX[43] := AS.A_NstHigh;
//AOb: Самопроизвольное закрытие Кр1
IF LG.Kr1_sh THEN IF delay[14]  <= 3.0 THEN delay[14] := delay[14] + cycle; END_IF; ELSE delay[14]  := 0.0; END_IF;
AS.Kr1_sh := delay[14] > 3.0 OR AS.Kr1_sh  AND NOT unlock ;
IF AS.Kr1_sh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Самопроизвольное закрытие Кр1'; END_IF;
LG.AOb := LG.AOb OR AS.Kr1_sh;
AS_INDX[44] := AS.Kr1_sh;
//AOb: Самопроизвольное закрытие Кр2
IF LG.Kr2_sh THEN IF delay[15]  <= 3.0 THEN delay[15] := delay[15] + cycle; END_IF; ELSE delay[15]  := 0.0; END_IF;
AS.Kr2_sh := delay[15] > 3.0 OR AS.Kr2_sh  AND NOT unlock ;
IF AS.Kr2_sh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Самопроизвольное закрытие Кр2'; END_IF;
LG.AOb := LG.AOb OR AS.Kr2_sh;
AS_INDX[45] := AS.Kr2_sh;
//AOb: Самопроизвольное закрытие Кр6
IF LG.Kr6_sh THEN IF delay[16]  <= 3.0 THEN delay[16] := delay[16] + cycle; END_IF; ELSE delay[16]  := 0.0; END_IF;
AS.Kr6_sh := delay[16] > 3.0 OR AS.Kr6_sh  AND NOT unlock ;
IF AS.Kr6_sh AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Самопроизвольное закрытие Кр6'; END_IF;
LG.AOb := LG.AOb OR AS.Kr6_sh;
AS_INDX[46] := AS.Kr6_sh;
//NOs: НО по команде оператора (АРМ)
AS.Noss_BTN_ARM := LG.Noss_BTN_ARM OR AS.Noss_BTN_ARM AND NOT unlock ;
IF AS.Noss_BTN_ARM AND Str_PLC.first_NOs = ''  THEN  Str_PLC.first_NOs:= 'НО по команде оператора (АРМ)'; END_IF;
LG.NOs := LG.NOs OR AS.Noss_BTN_ARM;
AS_INDX[47] := AS.Noss_BTN_ARM;
//NOs: НО по команде оператора (ПРУ)
AS.Noss_BTN_PRU := LG.Noss_BTN_PRU OR AS.Noss_BTN_PRU AND NOT unlock ;
IF AS.Noss_BTN_PRU AND Str_PLC.first_NOs = ''  THEN  Str_PLC.first_NOs:= 'НО по команде оператора (ПРУ)'; END_IF;
LG.NOs := LG.NOs OR AS.Noss_BTN_PRU;
AS_INDX[48] := AS.Noss_BTN_PRU;
//NOb: НОбс по команде оператора (АРМ)
AS.Nobs_BTN_ARM := LG.Nobs_BTN_ARM OR AS.Nobs_BTN_ARM AND NOT unlock ;
IF AS.Nobs_BTN_ARM AND Str_PLC.first_NOb = ''  THEN  Str_PLC.first_NOb:= 'НОбс по команде оператора (АРМ)'; END_IF;
LG.NOb := LG.NOb OR AS.Nobs_BTN_ARM;
AS_INDX[49] := AS.Nobs_BTN_ARM;
//NOb: НОбс по команде оператора (ПРУ)
AS.Nobs_BTN_PRU := LG.Nobs_BTN_PRU OR AS.Nobs_BTN_PRU AND NOT unlock ;
IF AS.Nobs_BTN_PRU AND Str_PLC.first_NOb = ''  THEN  Str_PLC.first_NOb:= 'НОбс по команде оператора (ПРУ)'; END_IF;
LG.NOb := LG.NOb OR AS.Nobs_BTN_PRU;
AS_INDX[50] := AS.Nobs_BTN_PRU;
//-------------------------------FR--------------------------------------
//------------------------------------SR---------------------------------
//------------------------------AI---------------------------------------
//AOb: Аварийно-высокая температура под кожухом двигателя
IF ANB.Tv_KGT_Av THEN IF delay[17]  <= 3.0 THEN delay[17] := delay[17] + cycle; END_IF; ELSE delay[17]  := 0.0; END_IF;
AS.Tv_KGT_Av := delay[17] > 3.0 OR AS.Tv_KGT_Av AND NOT unlock ;
IF AS.Tv_KGT_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура под кожухом двигателя'; END_IF;
LG.AOb := LG.AOb OR AS.Tv_KGT_Av;
AS_INDX[51] := AS.Tv_KGT_Av;
//AOb: Аварийно-высокая температура масла на сливе из переходника
IF ANB.Tm_out_Per_Av THEN IF delay[18]  <= 3.0 THEN delay[18] := delay[18] + cycle; END_IF; ELSE delay[18]  := 0.0; END_IF;
AS.Tm_out_Per_Av := delay[18] > 3.0 OR AS.Tm_out_Per_Av AND NOT unlock ;
IF AS.Tm_out_Per_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура масла на сливе из переходника'; END_IF;
LG.AOb := LG.AOb OR AS.Tm_out_Per_Av;
AS_INDX[52] := AS.Tm_out_Per_Av;
//AOb: Аварийно-высокая температура масла на сливе из заднего корпуса КВД
IF ANB.Tm_out_KVD_Av THEN IF delay[19]  <= 3.0 THEN delay[19] := delay[19] + cycle; END_IF; ELSE delay[19]  := 0.0; END_IF;
AS.Tm_out_KVD_Av := delay[19] > 3.0 OR AS.Tm_out_KVD_Av AND NOT unlock ;
IF AS.Tm_out_KVD_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура масла на сливе из заднего корпуса КВД'; END_IF;
LG.AOb := LG.AOb OR AS.Tm_out_KVD_Av;
AS_INDX[53] := AS.Tm_out_KVD_Av;
//AOb: Аварийно-высокая температура масла на сливе из опорного венца ТНД
IF ANB.Tm_out_TND_Av THEN IF delay[20]  <= 3.0 THEN delay[20] := delay[20] + cycle; END_IF; ELSE delay[20]  := 0.0; END_IF;
AS.Tm_out_TND_Av := delay[20] > 3.0 OR AS.Tm_out_TND_Av AND NOT unlock ;
IF AS.Tm_out_TND_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура масла на сливе из опорного венца ТНД'; END_IF;
LG.AOb := LG.AOb OR AS.Tm_out_TND_Av;
AS_INDX[54] := AS.Tm_out_TND_Av;
//AOb: Аварийно-высокая температура масла на сливе из опорного венца ТН
IF ANB.Tm_out_N_Av THEN IF delay[21]  <= 3.0 THEN delay[21] := delay[21] + cycle; END_IF; ELSE delay[21]  := 0.0; END_IF;
AS.Tm_out_N_Av := delay[21] > 3.0 OR AS.Tm_out_N_Av AND NOT unlock ;
IF AS.Tm_out_N_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура масла на сливе из опорного венца ТН'; END_IF;
LG.AOb := LG.AOb OR AS.Tm_out_N_Av;
AS_INDX[55] := AS.Tm_out_N_Av;
//AOb: Температура масла в МБД >110 °C
AS.Tm_in_MBD_Av := ANB.Tm_in_MBD_Av OR AS.Tm_in_MBD_Av AND NOT unlock ;
IF AS.Tm_in_MBD_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Температура масла в МБД >110 °C'; END_IF;
LG.AOb := LG.AOb OR AS.Tm_in_MBD_Av;
AS_INDX[56] := AS.Tm_in_MBD_Av;
//AOb: Аварийно-высокая температура подшипников промопоры т1
IF ANB.T_POD_1_Av THEN IF delay[22]  <= 3.0 THEN delay[22] := delay[22] + cycle; END_IF; ELSE delay[22]  := 0.0; END_IF;
AS.T_POD_1_Av := delay[22] > 3.0 OR AS.T_POD_1_Av AND NOT unlock ;
IF AS.T_POD_1_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура подшипников промопоры т1'; END_IF;
LG.AOb := LG.AOb OR AS.T_POD_1_Av;
AS_INDX[57] := AS.T_POD_1_Av;
//AOb: Аварийно-высокая температура подшипников промопоры т2
IF ANB.T_POD_2_Av THEN IF delay[23]  <= 3.0 THEN delay[23] := delay[23] + cycle; END_IF; ELSE delay[23]  := 0.0; END_IF;
AS.T_POD_2_Av := delay[23] > 3.0 OR AS.T_POD_2_Av AND NOT unlock ;
IF AS.T_POD_2_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура подшипников промопоры т2'; END_IF;
LG.AOb := LG.AOb OR AS.T_POD_2_Av;
AS_INDX[58] := AS.T_POD_2_Av;
//AOb: Аварийно-высокая температура газа на выходе Н
IF ANB.Tg_out_N_Av THEN IF delay[24]  <= 1.0 THEN delay[24] := delay[24] + cycle; END_IF; ELSE delay[24]  := 0.0; END_IF;
AS.Tg_out_N_Av := delay[24] > 1.0 OR AS.Tg_out_N_Av AND NOT unlock ;
IF AS.Tg_out_N_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая температура газа на выходе Н'; END_IF;
LG.AOb := LG.AOb OR AS.Tg_out_N_Av;
AS_INDX[59] := AS.Tg_out_N_Av;
//AOs: Аварийно-высокая температура переднего опорного подшипника Н
IF ANB.T_PON_Av THEN IF delay[25]  <= 3.0 THEN delay[25] := delay[25] + cycle; END_IF; ELSE delay[25]  := 0.0; END_IF;
AS.T_PON_Av := delay[25] > 3.0 OR AS.T_PON_Av AND NOT unlock ;
IF AS.T_PON_Av AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-высокая температура переднего опорного подшипника Н'; END_IF;
LG.AOs := LG.AOs OR AS.T_PON_Av;
AS_INDX[60] := AS.T_PON_Av;
//AOs: Аварийно-высокая температура ОУП Н (опорная часть)
IF ANB.Tp_N_opora_Av THEN IF delay[26]  <= 3.0 THEN delay[26] := delay[26] + cycle; END_IF; ELSE delay[26]  := 0.0; END_IF;
AS.Tp_N_opora_Av := delay[26] > 3.0 OR AS.Tp_N_opora_Av AND NOT unlock ;
IF AS.Tp_N_opora_Av AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-высокая температура ОУП Н (опорная часть)'; END_IF;
LG.AOs := LG.AOs OR AS.Tp_N_opora_Av;
AS_INDX[61] := AS.Tp_N_opora_Av;
//AOs: Аварийно-высокая температура ОУП опорно-упорного подшипника Н (рабочая колодка)
IF ANB.Tp_N_work_Av THEN IF delay[27]  <= 3.0 THEN delay[27] := delay[27] + cycle; END_IF; ELSE delay[27]  := 0.0; END_IF;
AS.Tp_N_work_Av := delay[27] > 3.0 OR AS.Tp_N_work_Av AND NOT unlock ;
IF AS.Tp_N_work_Av AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-высокая температура ОУП опорно-упорного подшипника Н (рабочая колодка)'; END_IF;
LG.AOs := LG.AOs OR AS.Tp_N_work_Av;
AS_INDX[62] := AS.Tp_N_work_Av;
//AOs: Аварийно-высокая температура опорно-упорного подшипника Н (установ. колодка)
IF ANB.Tp_N_ust_Av THEN IF delay[28]  <= 3.0 THEN delay[28] := delay[28] + cycle; END_IF; ELSE delay[28]  := 0.0; END_IF;
AS.Tp_N_ust_Av := delay[28] > 3.0 OR AS.Tp_N_ust_Av AND NOT unlock ;
IF AS.Tp_N_ust_Av AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-высокая температура опорно-упорного подшипника Н (установ. колодка)'; END_IF;
LG.AOs := LG.AOs OR AS.Tp_N_ust_Av;
AS_INDX[63] := AS.Tp_N_ust_Av;
//AOb: Аварийно-высокое разряжение воздуха на входе в двигатель
AS.Razr_out_D_Av := ANB.Razr_out_D_Av OR AS.Razr_out_D_Av AND NOT unlock ;
IF AS.Razr_out_D_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокое разряжение воздуха на входе в двигатель'; END_IF;
LG.AOb := LG.AOb OR AS.Razr_out_D_Av;
AS_INDX[64] := AS.Razr_out_D_Av;
//AOb: Аварийно-низкое давление масла на входе в двигатель(после ф.)
IF Q_ON.P_msm_D AND ANB.Pm_D_An THEN IF delay[29]  <= 2.0 THEN delay[29] := delay[29] + cycle; END_IF; ELSE delay[29]  := 0.0; END_IF;
AS.Pm_D_An := delay[29] > 2.0 OR AS.Pm_D_An AND NOT unlock ;
IF AS.Pm_D_An AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-низкое давление масла на входе в двигатель(после ф.)'; END_IF;
LG.AOb := LG.AOb OR AS.Pm_D_An;
AS_INDX[65] := AS.Pm_D_An;
//AOs: Аварийно-низкое давление масла смазки  H
IF Q_ON.P_msm_N AND ANB.Pm_N_An THEN IF delay[30]  <= 1.0 THEN delay[30] := delay[30] + cycle; END_IF; ELSE delay[30]  := 0.0; END_IF;
AS.Pm_N_An := delay[30] > 1.0 OR AS.Pm_N_An AND NOT unlock ;
IF AS.Pm_N_An AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-низкое давление масла смазки  H'; END_IF;
LG.AOs := LG.AOs OR AS.Pm_N_An;
AS_INDX[66] := AS.Pm_N_An;
//AOs: Аварийно-низкий dР масло-газ 
IF Q_ON.dP_mg AND ANB.dP_mg_An THEN IF delay[31]  <= 1.0 THEN delay[31] := delay[31] + cycle; END_IF; ELSE delay[31]  := 0.0; END_IF;
AS.dP_mg_An := delay[31] > 1.0 OR AS.dP_mg_An AND NOT unlock ;
IF AS.dP_mg_An AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-низкий dР масло-газ '; END_IF;
LG.AOs := LG.AOs OR AS.dP_mg_An;
AS_INDX[67] := AS.dP_mg_An;
//AOb: Аварийно-низкое давление топливного газа на входе в БТА
IF Q_ON.P_tg AND ANB.Ptg_in_BTA_An THEN IF delay[32]  <= 0.2 THEN delay[32] := delay[32] + cycle; END_IF; ELSE delay[32]  := 0.0; END_IF;
AS.Ptg_in_BTA_An := delay[32] > 0.2 OR AS.Ptg_in_BTA_An AND NOT unlock ;
IF AS.Ptg_in_BTA_An AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-низкое давление топливного газа на входе в БТА'; END_IF;
LG.AOb := LG.AOb OR AS.Ptg_in_BTA_An;
AS_INDX[68] := AS.Ptg_in_BTA_An;
//AOb: Перепад давлений газа на форсунках высокий
AS.dPg_fors_Av := Q_ON.dP_g_fors AND ANB.dPg_fors_Av OR AS.dPg_fors_Av AND NOT unlock ;
IF AS.dPg_fors_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Перепад давлений газа на форсунках высокий'; END_IF;
LG.AOb := LG.AOb OR AS.dPg_fors_Av;
AS_INDX[69] := AS.dPg_fors_Av;
//AOs: Аварийно-высокое вибросмещение опорного подшипника Н
AS.Vibr_OP_N_Av := ANB.Vibr_OP_N_Av OR AS.Vibr_OP_N_Av AND NOT unlock ;
IF AS.Vibr_OP_N_Av AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-высокое вибросмещение опорного подшипника Н'; END_IF;
LG.AOs := LG.AOs OR AS.Vibr_OP_N_Av;
AS_INDX[70] := AS.Vibr_OP_N_Av;
//AOs: Аварийно-высокое вибросмещение опорно-упорного подшипника Н
AS.Vibr_OUP_N_Av := ANB.Vibr_OUP_N_Av OR AS.Vibr_OUP_N_Av AND NOT unlock ;
IF AS.Vibr_OUP_N_Av AND Str_PLC.first_AOs = ''  THEN  Str_PLC.first_AOs:= 'Аварийно-высокое вибросмещение опорно-упорного подшипника Н'; END_IF;
LG.AOs := LG.AOs OR AS.Vibr_OUP_N_Av;
AS_INDX[71] := AS.Vibr_OUP_N_Av;
//AOb: Аварийно-высокая вибрация корпуса КВД
IF ANB.Vibr_KVD_Av THEN IF delay[33]  <= 0.5 THEN delay[33] := delay[33] + cycle; END_IF; ELSE delay[33]  := 0.0; END_IF;
AS.Vibr_KVD_Av := delay[33] > 0.5 OR AS.Vibr_KVD_Av AND NOT unlock ;
IF AS.Vibr_KVD_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая вибрация корпуса КВД'; END_IF;
LG.AOb := LG.AOb OR AS.Vibr_KVD_Av;
AS_INDX[72] := AS.Vibr_KVD_Av;
//AOb: Аварийно-высокая вибрация корпуса КНД
IF ANB.Vibr_KND_Av THEN IF delay[34]  <= 0.5 THEN delay[34] := delay[34] + cycle; END_IF; ELSE delay[34]  := 0.0; END_IF;
AS.Vibr_KND_Av := delay[34] > 0.5 OR AS.Vibr_KND_Av AND NOT unlock ;
IF AS.Vibr_KND_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая вибрация корпуса КНД'; END_IF;
LG.AOb := LG.AOb OR AS.Vibr_KND_Av;
AS_INDX[73] := AS.Vibr_KND_Av;
//AOb: Аварийно-высокая вибрация корпуса ТН
IF ANB.Vibr_N_Av THEN IF delay[35]  <= 0.5 THEN delay[35] := delay[35] + cycle; END_IF; ELSE delay[35]  := 0.0; END_IF;
AS.Vibr_N_Av := delay[35] > 0.5 OR AS.Vibr_N_Av AND NOT unlock ;
IF AS.Vibr_N_Av AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'Аварийно-высокая вибрация корпуса ТН'; END_IF;
LG.AOb := LG.AOb OR AS.Vibr_N_Av;
AS_INDX[74] := AS.Vibr_N_Av;
//------------------------------Calc_AI---------------------------------------
//AOb: N КВД < 700 об/мин. на 192 сек. пуска
AS.ev_N_KVD_An := LG.Start_D_192 AND ANB.ev_N_KVD_An OR AS.ev_N_KVD_An AND NOT unlock ;
IF AS.ev_N_KVD_An AND Str_PLC.first_AOb = ''  THEN  Str_PLC.first_AOb:= 'N КВД < 700 об/мин. на 192 сек. пуска'; END_IF;
LG.AOb := LG.AOb OR AS.ev_N_KVD_An;
AS_INDX[75] := AS.ev_N_KVD_An;
L_SND_COUNT := FALSE;
FOR j := 0 TO 254 BY 1 DO
IF SND_AS_OFF[j] = FALSE AND ((BTN.SND_OFF OR DGI.But_Kvit_ON) AND AS_INDX[j]) THEN
SND_AS_OFF[j] := TRUE;
ELSE IF SND_AS_OFF[j] = TRUE AND unlock THEN
SND_AS_OFF[j] := FALSE;
END_IF;
END_IF;
IF L_SND_COUNT = FALSE THEN
L_SND_COUNT := AS_INDX[j] AND NOT SND_AS_OFF[j];
END_IF;
END_FOR;
SND_AS := L_SND_COUNT;
LG.SND_AS := SND_AS;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="A0BE131A44DAE534FAAD81A12D04775E" Name="FB_PPU_GR0">
                <Variables>
                    <Variable UUID="0D08363D49605CFFC3545BA96F867977" Name="delay" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="100" Array="TRUE" Usage="internal" />
                </Variables>
                <ST><![CDATA[//------------------------------DGI---------------------------------------
//Нет напряжения 380 на стартере
PPU_GR.U380_KK := LG.PPU_GR_Check AND  NOT DGI.U380_KK;
//Нет U в цепях упр. ПМНС
PPU_GR.U_PMNS := LG.PPU_GR_Check AND  NOT DGI.U_PMNS;
//Нет U в цепях упр. МНУ I
PPU_GR.U_MNU_1 := LG.PPU_GR_Check AND  NOT DGI.U_MNU_1;
//Нет U в цепях упр. МНУ II
PPU_GR.U_MNU_2 := LG.PPU_GR_Check AND  NOT DGI.U_MNU_2;
//Нет U =220В (на входе САУ)
PPU_GR.Check_U_DC220 := LG.PPU_GR_Check AND  NOT DGI.Check_U_DC220;
//Нет U ~220В (на входе САУ)
PPU_GR.Check_U_AC220 := LG.PPU_GR_Check AND  NOT DGI.Check_U_AC220;
//Нет U =110В цепи кранов
PPU_GR.Chec_Ukr_110 := LG.PPU_GR_Check AND  NOT DGI.Chec_Ukr_110;
//Уровень масла в МБН нижний
PPU_GR.Lm_MBN_down := LG.PPU_GR_Check AND DGI.Lm_MBN_down;
//Уровень масла в МБД нижний
PPU_GR.Lm_MBD_down := LG.PPU_GR_Check AND DGI.Lm_MBD_down;
//Двери блок-бокса САУ ГПА открыты
PPU_GR.Door_SAU_open := LG.PPU_GR_Check AND DGI.Door_SAU_open;
//Сист.порош.пожаротуш.неисправ.
PPU_GR.pgrP_brk := LG.PPU_GR_Check AND DGI.pgrP_brk;
//-------------------------------LG--------------------------------------
//Неисправность питания САУ
PPU_GR.U_SAU_fault := LG.PPU_GR_Check AND LG.U_SAU_fault;
//Неисправность аналоговых каналов
PPU_GR.AI_fault := LG.PPU_GR_Check AND LG.AI_fault;
//Неисправность цепей ИМ
PPU_GR.IM_fault := LG.PPU_GR_Check AND LG.IM_fault;
//Неисправность защит
PPU_GR.Def_fault := LG.PPU_GR_Check AND LG.Def_fault;
//Неисправность дискретных входов
PPU_GR.DI_fault := LG.PPU_GR_Check AND LG.DI_fault;
//-------------------------------FR--------------------------------------
//------------------------------------SR---------------------------------
//------------------------------AI---------------------------------------
//Т масла в МБН <15 °С
PPU_GR.Tm_in_MBN_PPUn := LG.PPU_GR_Check AND ANB.Tm_in_MBN_PPUn;
//Тм в МБД < 10 °С
PPU_GR.Tm_in_MBD_PPUn := LG.PPU_GR_Check AND LG.MS_8p AND ANB.Tm_in_MBD_PPUn;
//Тм в МБД < 35 °С
PPU_GR.Tm_in_MBD_PPUn1 := LG.PPU_GR_Check AND NOT LG.MS_8p AND ANB.Tm_in_MBD_PPUn1;
//Тгаза на выходе К > 60 °С
PPU_GR.Tg_out_N_PPUv := LG.PPU_GR_Check AND ANB.Tg_out_N_PPUv;
//------------------------------Calc_AI---------------------------------------
//---------------------------------------------------------------------
LG.PPU_GR_Ready := LG.PPU_GR_Check;
LG.PPU_GR_notReady := 	PPU_GR.U380_KK OR 
					PPU_GR.U_PMNS OR 
					PPU_GR.U_MNU_1 OR 
					PPU_GR.U_MNU_2 OR 
					PPU_GR.Check_U_DC220 OR 
					PPU_GR.Check_U_AC220 OR 
					PPU_GR.Chec_Ukr_110 OR 
					PPU_GR.Lm_MBN_down OR 
					PPU_GR.Lm_MBD_down OR 
					PPU_GR.Door_SAU_open OR 
					PPU_GR.pgrP_brk OR 
					PPU_GR.U_SAU_fault OR 
					PPU_GR.AI_fault OR 
					PPU_GR.IM_fault OR 
					PPU_GR.Def_fault OR 
					PPU_GR.DI_fault OR 
					PPU_GR.Tm_in_MBN_PPUn OR 
					PPU_GR.Tm_in_MBD_PPUn OR 
					PPU_GR.Tm_in_MBD_PPUn1 OR 
					PPU_GR.Tg_out_N_PPUv;
IF LG.PPU_GR_notReady THEN LG.PPU_GR_Ready := FALSE; END_IF;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="753BCBAA44A7A02021D0B6A8449340B3" Name="FB_PPU_HR0">
                <Variables>
                    <Variable UUID="87F5B3C541393B632EA12A97149FC2C8" Name="delay" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="100" Array="TRUE" Usage="internal" />
                </Variables>
                <ST><![CDATA[//------------------------------DGI---------------------------------------
//Кран 1 не закрыт
PPU_HR.Kr1_OF := LG.PPU_HR_Check AND  NOT DGI.Kr1_OF AND DGI.KCD_Kr1_OF;
//Кран 2 не закрыт
PPU_HR.Kr2_OF := LG.PPU_HR_Check AND  NOT DGI.Kr2_OF AND DGI.KCD_Kr2_OF;
//Кран 4 не закрыт
PPU_HR.Kr4_OF := LG.PPU_HR_Check AND  NOT DGI.Kr4_OF AND DGI.KCD_Kr4_OF;
//Кран 6 не закрыт
PPU_HR.Kr6_OF := LG.PPU_HR_Check AND  NOT DGI.Kr6_OF AND DGI.KCD_Kr6_OF;
//Кран 12 не закрыт
PPU_HR.Kr12_OF := LG.PPU_HR_Check AND  NOT DGI.Kr12_OF AND DGI.KCD_Kr12_OF;
//Кран 9 не открыт
PPU_HR.Kr9_ON := LG.PPU_HR_Check AND  NOT DGI.Kr9_ON AND DGI.KCD_Kr9_ON;
//СК не закрыт
PPU_HR.SK_OF := LG.PPU_HR_Check AND  NOT DGI.SK_OF;
//Загазованность галереи Н>1,0%
PPU_HR.Gas_N := LG.PPU_HR_Check AND DGI.Gas_N AND DGI.KCD_Gas_N;
//-------------------------------LG--------------------------------------
//Есть аварийные сообщения
PPU_HR.Alarm_msg := LG.PPU_HR_Check AND LG.Alarm_msg;
//Кран 5 не открыт
PPU_HR.Kr5_ON := LG.PPU_HR_Check AND LG.Kr5_ON;
//Кран 5 не закрыт
PPU_HR.Kr5_OF := LG.PPU_HR_Check AND LG.Kr5_OF;
//-------------------------------FR--------------------------------------
//------------------------------------SR---------------------------------
//------------------------------AI---------------------------------------
//------------------------------Calc_AI---------------------------------------
//Nкнд > 300 об/мин
PPU_HR.ev_N_KND_PPUv := LG.PPU_HR_Check AND ANB.ev_N_KND_PPUv;
//---------------------------------------------------------------------
LG.PPU_HR_Ready := LG.PPU_HR_Check OR LG.PPU_GR_Check;
LG.PPU_HR_notReady := 	PPU_HR.Kr1_OF OR 
					PPU_HR.Kr2_OF OR 
					PPU_HR.Kr4_OF OR 
					PPU_HR.Kr6_OF OR 
					PPU_HR.Kr12_OF OR 
					PPU_HR.Kr9_ON OR 
					PPU_HR.SK_OF OR 
					PPU_HR.Gas_N OR 
					PPU_HR.Alarm_msg OR 
					PPU_HR.Kr5_ON OR 
					PPU_HR.Kr5_OF OR 
					PPU_HR.ev_N_KND_PPUv;
IF LG.PPU_HR_notReady THEN LG.PPU_HR_Ready := FALSE; END_IF;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="A1DE2A054998B5CA26FF579B98758F2F" Name="FB_PS0">
                <Variables>
                    <Variable UUID="9F57C2FC4BFDE64C815AE1B1ACBA3A50" Name="delay" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="7FE8DF6B4514B02E9D2DC7A0384D8FD5" Name="cycle" Comment="cycle time (sec)" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="DF6687994EFA7D798BD2C1869F1A1BC2" Name="SND_PS_OFF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="E686E7D64B06483022167F8CE8B1790A" Name="PS_INDX" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="2BDC2F4A4CCD30B5D70B28AC59646ED0" Name="j" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="4D8DCEEF43CF8467F8E489B1C71117AF" Name="L_SND_COUNT" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="B28A65824ADC7EA1A123FA875825E08D" Name="SND_PS_OFF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="254" Array="TRUE" Usage="internal" />
                    <Variable UUID="BD8256C6430FDF31F7FB9F8D48ED9ACA" Name="SND_PS" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                </Variables>
                <ST><![CDATA[//------------------------------DGI---------------------------------------
//Давление масла нав. МНОД < 0,04 МПа (ОР)
IF LG.Nnd_3600v AND  NOT DGI.Pm_MNOD_004 THEN IF delay[0]  <= 2.0 THEN delay[0] := delay[0] + cycle; END_IF; ELSE delay[0]  := 0.0; END_IF;
PS.Pm_MNOD_004 := delay[0] > 2.0;
PS_INDX[0] := PS.Pm_MNOD_004;
//Неисправность ОРТ  (ОР)
PS.ORT_check := LG.Ntn_1600v AND  NOT DGI.ORT_check;
PS_INDX[1] := PS.ORT_check;
//Давление масла на входе в двигатель < 0,2 МПа  (ОР)
IF LG.Nnd_3600v AND DGI.Pm_in_D_low002 THEN IF delay[1]  <= 2.0 THEN delay[1] := delay[1] + cycle; END_IF; ELSE delay[1]  := 0.0; END_IF;
PS.Pm_in_D_low002 := delay[1] > 2.0;
PS_INDX[2] := PS.Pm_in_D_low002;
//Перепад давления масла на МОБе > 0,05 МПа  (ОР)
IF LG.MOB AND  NOT DGI.dPm_MOB_005 THEN IF delay[2]  <= 2.0 THEN delay[2] := delay[2] + cycle; END_IF; ELSE delay[2]  := 0.0; END_IF;
PS.dPm_MOB_005 := delay[2] > 2.0;
PS_INDX[3] := PS.dPm_MOB_005;
//Входной напрявляющий аппарат не в полож "-10" (ОФ)
PS.Pos_m10_VNA := LG.Pv_outOK_086 AND  NOT DGI.Pos_m10_VNA;
PS_INDX[4] := PS.Pos_m10_VNA;
//Входной напрявляющий аппарат не в полож "+15" (ОФ)
PS.Pos_p15_VNA := LG.Pv_outOK_157 AND  NOT DGI.Pos_p15_VNA;
PS_INDX[5] := PS.Pos_p15_VNA;
//Входной напрявляющий аппарат в полож "-10"
PS.Pos_m10_VNA_1 := LG.Pv_outOK_096 AND DGI.Pos_m10_VNA;
PS_INDX[6] := PS.Pos_m10_VNA;
//Входной напрявляющий аппарат в полож "+15"
PS.Pos_p15_VNA_1 := LG.Pv_outOK_147 AND DGI.Pos_p15_VNA;
PS_INDX[7] := PS.Pos_p15_VNA;
//Давление см. Н (ДМ2005 СГ) < 0.2
IF Q_ON.P_msm_N AND DGI.Pm_POD_N THEN IF delay[3]  <= 1.0 THEN delay[3] := delay[3] + cycle; END_IF; ELSE delay[3]  := 0.0; END_IF;
PS.Pm_POD_N := delay[3] > 1.0;
PS_INDX[8] := PS.Pm_POD_N;
//Давление масла на входе в Д < 0,2 МПа
IF Q_ON.P_msm_D AND  NOT DGI.Pm_in_D_002 THEN IF delay[4]  <= 1.0 THEN delay[4] := delay[4] + cycle; END_IF; ELSE delay[4]  := 0.0; END_IF;
PS.Pm_in_D_002 := delay[4] > 1.0;
PS_INDX[9] := PS.Pm_in_D_002;
//Нет включения 1 скорости (РК1) в КК1
IF LG.Altivar_Sk1 AND  NOT DGI.K1_KK1_1_ON THEN IF delay[5]  <= 3.0 THEN delay[5] := delay[5] + cycle; END_IF; ELSE delay[5]  := 0.0; END_IF;
PS.K1_KK1_1_ON := delay[5] > 3.0;
PS_INDX[10] := PS.K1_KK1_1_ON;
//Нет включения 1 скорости (РК1) в КК2
IF LG.Altivar_Sk1 AND  NOT DGI.K1_KK2_1_ON THEN IF delay[6]  <= 3.0 THEN delay[6] := delay[6] + cycle; END_IF; ELSE delay[6]  := 0.0; END_IF;
PS.K1_KK2_1_ON := delay[6] > 3.0;
PS_INDX[11] := PS.K1_KK2_1_ON;
//Нет включения 2 скорости (РК2) в КК1
IF LG.Altivar_Sk2 AND  NOT DGI.K2_KK1_2_ON THEN IF delay[7]  <= 7.0 THEN delay[7] := delay[7] + cycle; END_IF; ELSE delay[7]  := 0.0; END_IF;
PS.K2_KK1_2_ON := delay[7] > 7.0;
PS_INDX[12] := PS.K2_KK1_2_ON;
//Нет включения 2 скорости (РК2) в КК2
IF LG.Altivar_Sk2 AND  NOT DGI.K2_KK2_2_ON THEN IF delay[8]  <= 7.0 THEN delay[8] := delay[8] + cycle; END_IF; ELSE delay[8]  := 0.0; END_IF;
PS.K2_KK2_2_ON := delay[8] > 7.0;
PS_INDX[13] := PS.K2_KK2_2_ON;
//Наличие стружки на сливе из КП
PS.Chips_KP := DGI.Chips_KP;
PS_INDX[14] := PS.Chips_KP;
//Нал.стружки на сливе из перех.
PS.Chips_Per := DGI.Chips_Per;
PS_INDX[15] := PS.Chips_Per;
//Нал.стружки на сливе из ЗК КВД
PS.Chips_KVD := DGI.Chips_KVD;
PS_INDX[16] := PS.Chips_KVD;
//Нал.стружки на сливе ОВ ТН Д
PS.Chips_TN := DGI.Chips_TN;
PS_INDX[17] := PS.Chips_TN;
//Нал.стружки на сливе ОВ ТНД Д
PS.Chips_TND := DGI.Chips_TND;
PS_INDX[18] := PS.Chips_TND;
//Р возд. в маслобаке Д >0,02МПа
IF DGI.Pv_MB_N_002 THEN IF delay[9]  <= 2.0 THEN delay[9] := delay[9] + cycle; END_IF; ELSE delay[9]  := 0.0; END_IF;
PS.Pv_MB_N_002 := delay[9] > 2.0;
PS_INDX[19] := PS.Pv_MB_N_002;
//dР м на фил. на вх.в Д >0,1МПа
PS.dPm_in_D := DGI.dPm_in_D;
PS_INDX[20] := PS.dPm_in_D;
//Уровень масла в м/б Д нижний
IF DGI.Lm_MBD_down THEN IF delay[10]  <= 5.0 THEN delay[10] := delay[10] + cycle; END_IF; ELSE delay[10]  := 0.0; END_IF;
PS.Lm_MBD_down := delay[10] > 5.0;
PS_INDX[21] := PS.Lm_MBD_down;
//Уровень масла в м/б Д верхний
IF DGI.Lm_MBD_up THEN IF delay[11]  <= 5.0 THEN delay[11] := delay[11] + cycle; END_IF; ELSE delay[11]  := 0.0; END_IF;
PS.Lm_MBD_up := delay[11] > 5.0;
PS_INDX[22] := PS.Lm_MBD_up;
//Р г. на входе в БТА < 1,6 МПа
IF Q_ON.SK_ON AND  NOT DGI.Pg_in_BTA_16 THEN IF delay[12]  <= 2.0 THEN delay[12] := delay[12] + cycle; END_IF; ELSE delay[12]  := 0.0; END_IF;
PS.Pg_in_BTA_16 := delay[12] > 2.0;
PS_INDX[23] := PS.Pg_in_BTA_16;
//dР газа на кране 1
PS.dPg_in_Kr1 := LG.G_inN AND  NOT DGI.dPg_in_Kr1;
PS_INDX[24] := PS.dPg_in_Kr1;
//Нет U в цепях упр. ПМНС
IF  NOT DGI.U_PMNS THEN IF delay[13]  <= 2.0 THEN delay[13] := delay[13] + cycle; END_IF; ELSE delay[13]  := 0.0; END_IF;
PS.U_PMNS := delay[13] > 2.0;
PS_INDX[25] := PS.U_PMNS;
//Нет U в цепях упр. МНУ I
IF  NOT DGI.U_MNU_1 THEN IF delay[14]  <= 2.0 THEN delay[14] := delay[14] + cycle; END_IF; ELSE delay[14]  := 0.0; END_IF;
PS.U_MNU_1 := delay[14] > 2.0;
PS_INDX[26] := PS.U_MNU_1;
//Нет U в цепях упр. МНУ II
IF  NOT DGI.U_MNU_2 THEN IF delay[15]  <= 2.0 THEN delay[15] := delay[15] + cycle; END_IF; ELSE delay[15]  := 0.0; END_IF;
PS.U_MNU_2 := delay[15] > 2.0;
PS_INDX[27] := PS.U_MNU_2;
//Сист.порош.пожаротуш.неисправ.
IF DGI.pgrP_brk THEN IF delay[16]  <= 2.0 THEN delay[16] := delay[16] + cycle; END_IF; ELSE delay[16]  := 0.0; END_IF;
PS.pgrP_brk := delay[16] > 2.0;
PS_INDX[28] := PS.pgrP_brk;
//Двери блок-бокса САУ ГПА открыты
PS.Door_SAU_open := DGI.Door_SAU_open;
PS_INDX[29] := PS.Door_SAU_open;
//Нет основного питания РК БУ ~220 В
PS.Check_U_AC220 :=  NOT DGI.Check_U_AC220;
PS_INDX[30] := PS.Check_U_AC220;
//Нет резервного питания РК БУ =220 В
PS.Check_U_DC220 :=  NOT DGI.Check_U_DC220;
PS_INDX[31] := PS.Check_U_DC220;
//Нет исправности разрядников
PS.Check_UZIP :=  NOT DGI.Check_UZIP;
PS_INDX[32] := PS.Check_UZIP;
//Нет основного питания БЭАО ~220 В
PS.Check_U_DC220_BEO_osn :=  NOT DGI.Check_U_DC220_BEO_osn;
PS_INDX[33] := PS.Check_U_DC220_BEO_osn;
//Нет резервного питания БЭАО =220 В
PS.Check_U_DC220_BEO_rez :=  NOT DGI.Check_U_DC220_BEO_rez;
PS_INDX[34] := PS.Check_U_DC220_BEO_rez;
//Нет питания терминальных панелей AI
PS.Check_U_AI_Tp :=  NOT DGI.Check_U_AI_Tp;
PS_INDX[35] := PS.Check_U_AI_Tp;
//Нет питания терминальных панелей DI
PS.Check_U_DI_Tp :=  NOT DGI.Check_U_DI_Tp;
PS_INDX[36] := PS.Check_U_DI_Tp;
//Нет питания терминальных панелей DO
PS.Check_U_D0_Tp :=  NOT DGI.Check_U_D0_Tp;
PS_INDX[37] := PS.Check_U_D0_Tp;
//Нет основного ИП =24В ПЛК
PS.Check_U_DC24_PLC_osn :=  NOT DGI.Check_U_DC24_PLC_osn;
PS_INDX[38] := PS.Check_U_DC24_PLC_osn;
//Нет резервного ИП =24В ПЛК
PS.Check_U_DC24_PLC_rez :=  NOT DGI.Check_U_DC24_PLC_rez;
PS_INDX[39] := PS.Check_U_DC24_PLC_rez;
//Нет основного ИП =24В внутренних устройств
PS.Check_U_DC24_VU_osn :=  NOT DGI.Check_U_DC24_VU_osn;
PS_INDX[40] := PS.Check_U_DC24_VU_osn;
//Нет резервного ИП =24В внутренних устройств
PS.Check_U_DC24_VU_rez :=  NOT DGI.Check_U_DC24_VU_rez;
PS_INDX[41] := PS.Check_U_DC24_VU_rez;
//Нет основного ИП =24В аналоговых входов
PS.Check_U_DC24_AI_osn :=  NOT DGI.Check_U_DC24_AI_osn;
PS_INDX[42] := PS.Check_U_DC24_AI_osn;
//Нет резервного ИП =24В аналоговых входов
PS.Check_U_DC24_AI_rez :=  NOT DGI.Check_U_DC24_AI_rez;
PS_INDX[43] := PS.Check_U_DC24_AI_rez;
//Нет основного ИП =24В DI, (внеш.)
PS.Check_U_DC24_DI_osn :=  NOT DGI.Check_U_DC24_DI_osn;
PS_INDX[44] := PS.Check_U_DC24_DI_osn;
//Нет резервного ИП =24В DI, (внеш.)
PS.Check_U_DC24_DI_rez :=  NOT DGI.Check_U_DC24_DI_rez;
PS_INDX[45] := PS.Check_U_DC24_DI_rez;
//Нет основного ИП =24В внешних устройств
PS.Check_U_DC24_VU_1_osn :=  NOT DGI.Check_U_DC24_VU_1_osn;
PS_INDX[46] := PS.Check_U_DC24_VU_1_osn;
//Нет резервного ИП =24В внешних устройств
PS.Check_U_DC24_VU_1_rez :=  NOT DGI.Check_U_DC24_VU_1_rez;
PS_INDX[47] := PS.Check_U_DC24_VU_1_rez;
//Нет основного ИП =24В БЭО, РПКУ
PS.Check_U_DC24_BEO_osn :=  NOT DGI.Check_U_DC24_BEO_osn;
PS_INDX[48] := PS.Check_U_DC24_BEO_osn;
//Нет резервного ИП =24В БЭО , РПКУ
PS.Check_U_DC24_BEO_rez :=  NOT DGI.Check_U_DC24_BEO_rez;
PS_INDX[49] := PS.Check_U_DC24_BEO_rez;
//Нет питания +15 В СО-1
PS.Check_U_CO1_plus :=  NOT DGI.Check_U_CO1_plus;
PS_INDX[50] := PS.Check_U_CO1_plus;
//Нет питания -15 В СО-1
PS.Check_U_CO1_minus :=  NOT DGI.Check_U_CO1_minus;
PS_INDX[51] := PS.Check_U_CO1_minus;
//Нет основного питания БУШД ~220 В
PS.Check_U_osn_BUSHD220 :=  NOT DGI.Check_U_osn_BUSHD220;
PS_INDX[52] := PS.Check_U_osn_BUSHD220;
//Нет резервного питания БУШД =24 В
PS.Check_U_osn_BUSHD24 :=  NOT DGI.Check_U_osn_BUSHD24;
PS_INDX[53] := PS.Check_U_osn_BUSHD24;
//Нет питания кранов =110 В
PS.Chec_Ukr_110 :=  NOT DGI.Chec_Ukr_110;
PS_INDX[54] := PS.Chec_Ukr_110;
//Нет питания ПРУ =24 В
PS.Check_U_PRU24 :=  NOT DGI.Check_U_PRU24;
PS_INDX[55] := PS.Check_U_PRU24;
//Нет питания датчиков уровня и вибрации =24 В
PS.Check_Uvibr24 :=  NOT DGI.Check_Uvibr24;
PS_INDX[56] := PS.Check_Uvibr24;
//СК не открыт
IF LG.SK_ON_PS AND  NOT DGI.SK_ON THEN IF delay[17]  <= 2.0 THEN delay[17] := delay[17] + cycle; END_IF; ELSE delay[17]  := 0.0; END_IF;
PS.SK_ON := delay[17] > 2.0;
PS_INDX[57] := PS.SK_ON;
//СК не закрыт
//IF LG.SK_OF_PS AND  NOT DGI.SK_OF THEN IF delay[18]  <= 2.0 THEN delay[18] := delay[18] + cycle; END_IF; ELSE delay[18]  := 0.0; END_IF;
//PS.SK_OF := delay[18] > 2.0;
//PS_INDX[58] := PS.SK_OF;
//Уровень масла в МБН нижний
IF DGI.Lm_MBN_down THEN IF delay[19]  <= 1.0 THEN delay[19] := delay[19] + cycle; END_IF; ELSE delay[19]  := 0.0; END_IF;
PS.Lm_MBN_down := delay[19] > 1.0;
PS_INDX[59] := PS.Lm_MBN_down;
//-------------------------------LG--------------------------------------
//Высокая температура газа за ТНД (ОР)
PS.LIM_Tg_outTNDhigh := LG.Tg_Work AND LG.LIM_Tg_outTNDhigh;
PS_INDX[60] := PS.LIM_Tg_outTNDhigh;
//Не включен ВОД1 и ВОД2  (ОР)
IF LG.GTU_work AND LG.VOD_nON THEN IF delay[20]  <= 300.0 THEN delay[20] := delay[20] + cycle; END_IF; ELSE delay[20]  := 0.0; END_IF;
PS.VOD_nON := delay[20] > 300.0;
PS_INDX[61] := PS.VOD_nON;
//Превышение времени пуска
PS.Time_start_300 := LG.Time_start_300;
PS_INDX[62] := PS.Time_start_300;
//Нет отключения 1 стартера (КК1)
IF LG.KK1_st_1_fault THEN IF delay[21]  <= 0.5 THEN delay[21] := delay[21] + cycle; END_IF; ELSE delay[21]  := 0.0; END_IF;
PS.KK1_st_1_fault := delay[21] > 0.5;
PS_INDX[63] := PS.KK1_st_1_fault;
//Нет отключения 2 стартера (КК2)
IF LG.KK2_st_2_fault THEN IF delay[22]  <= 0.5 THEN delay[22] := delay[22] + cycle; END_IF; ELSE delay[22]  := 0.0; END_IF;
PS.KK2_st_2_fault := delay[22] > 0.5;
PS_INDX[64] := PS.KK2_st_2_fault;
//Нет отключения контактора ускорения в КК1
IF LG.KK1_ku_failt THEN IF delay[23]  <= 0.5 THEN delay[23] := delay[23] + cycle; END_IF; ELSE delay[23]  := 0.0; END_IF;
PS.KK1_ku_failt := delay[23] > 0.5;
PS_INDX[65] := PS.KK1_ku_failt;
//Нет отключения контактора ускорения в КК2
IF LG.KK2_ku_failt THEN IF delay[24]  <= 0.5 THEN delay[24] := delay[24] + cycle; END_IF; ELSE delay[24]  := 0.0; END_IF;
PS.KK2_ku_failt := delay[24] > 0.5;
PS_INDX[66] := PS.KK2_ku_failt;
//Неиспраность СС на сливе из КП
PS.Chips_KP_fault := LG.Chips_KP_fault;
PS_INDX[67] := PS.Chips_KP_fault;
//Неиспраность СС на сливе из перех.
PS.Chips_Per_fault := LG.Chips_Per_fault;
PS_INDX[68] := PS.Chips_Per_fault;
//Неиспраность СС на сливе из ЗК КВД
PS.Chips_KVD_fault := LG.Chips_KVD_fault;
PS_INDX[69] := PS.Chips_KVD_fault;
//Неиспраность СС на сливе ОВ ТН Д
PS.Chips_TN_fault := LG.Chips_TN_fault;
PS_INDX[70] := PS.Chips_TN_fault;
//Неиспраность СС на сливе ОВ ТНД Д
PS.Chips_TND_fault := LG.Chips_TND_fault;
PS_INDX[71] := PS.Chips_TND_fault;
//Рассогласование по ДГ
PS.P_Dgdistort := LG.P_Dgdistort;
PS_INDX[72] := PS.P_Dgdistort;
//Двигатель на нижнем ограничении
PS.Rp_loLimited := LG.Rp_loLimited;
PS_INDX[73] := PS.Rp_loLimited;
//Двигатель на верхнем ограничениии
PS.Rp_hiLimited := LG.Rp_hiLimited;
PS_INDX[74] := PS.Rp_hiLimited;
//Нижнеее ограничение по N КНД
PS.Rp_loLimitNnd := LG.Rp_loLimitNnd;
PS_INDX[75] := PS.Rp_loLimitNnd;
//Нижнеее ограничение по N КВД
PS.Rp_loLimitNvd := LG.Rp_loLimitNvd;
PS_INDX[76] := PS.Rp_loLimitNvd;
//Нижнеее ограничение по N СТ
PS.Rp_loLimitNst := LG.Rp_loLimitNst;
PS_INDX[77] := PS.Rp_loLimitNst;
//Верхнеееограничение по N КНД
PS.Rp_hiLimitNnd := LG.Rp_hiLimitNnd;
PS_INDX[78] := PS.Rp_hiLimitNnd;
//Верхнеее ограничение по N КВД
PS.Rp_hiLimitNvd := LG.Rp_hiLimitNvd;
PS_INDX[79] := PS.Rp_hiLimitNvd;
//Верхнеее ограничение по N СТ
PS.Rp_hiLimitNst := LG.Rp_hiLimitNst;
PS_INDX[80] := PS.Rp_hiLimitNst;
//Верхнее ограничение по Т газов за ТВД
PS.Rp_hiLimitT := LG.Rp_hiLimitT;
PS_INDX[81] := PS.Rp_hiLimitT;
//Верхнее ограничение по давлению за ОК
PS.Rp_hiLimitPk := LG.Rp_hiLimitPk;
PS_INDX[82] := PS.Rp_hiLimitPk;
//Верхнеее ограничение по расходу топлива
PS.Rp_hiLimitGt := LG.Rp_hiLimitGt;
PS_INDX[83] := PS.Rp_hiLimitGt;
//Нижнеее ограничение по расходу топлива
PS.Rp_loLimitGt := LG.Rp_loLimitGt;
PS_INDX[84] := PS.Rp_loLimitGt;
//-------------------------------FR--------------------------------------
//------------------------------------SR---------------------------------
//------------------------------AI---------------------------------------
//Высокая температура под кожухом Д  (ОР)
IF ANB.Tv_KGT_Pv THEN IF delay[25]  <= 3.0 THEN delay[25] := delay[25] + cycle; END_IF; ELSE delay[25]  := 0.0; END_IF;
PS.Tv_KGT_Pv := delay[25] > 3.0;
PS_INDX[85] := PS.Tv_KGT_Pv;
//Высокая температура масла на сливе из переходника  (ОР)
IF LG.GTU_work AND ANB.Tm_out_Per_Pv THEN IF delay[26]  <= 3.0 THEN delay[26] := delay[26] + cycle; END_IF; ELSE delay[26]  := 0.0; END_IF;
PS.Tm_out_Per_Pv := delay[26] > 3.0;
PS_INDX[86] := PS.Tm_out_Per_Pv;
//Повыш. Т м на сливе из переход.
IF ANB.Tm_out_Per_Pv1 THEN IF delay[27]  <= 3.0 THEN delay[27] := delay[27] + cycle; END_IF; ELSE delay[27]  := 0.0; END_IF;
PS.Tm_out_Per_Pv1 := delay[27] > 3.0;
PS_INDX[87] := PS.Tm_out_Per_Pv1;
//Высокая температура масла на сливе из заднего корпуса КВД  (ОР)
IF LG.GTU_work AND ANB.Tm_out_KVD_Pv THEN IF delay[28]  <= 3.0 THEN delay[28] := delay[28] + cycle; END_IF; ELSE delay[28]  := 0.0; END_IF;
PS.Tm_out_KVD_Pv := delay[28] > 3.0;
PS_INDX[88] := PS.Tm_out_KVD_Pv;
//Повыш. Т м на сливе из ЗК КВД
IF ANB.Tm_out_KVD_Pv1 THEN IF delay[29]  <= 3.0 THEN delay[29] := delay[29] + cycle; END_IF; ELSE delay[29]  := 0.0; END_IF;
PS.Tm_out_KVD_Pv1 := delay[29] > 3.0;
PS_INDX[89] := PS.Tm_out_KVD_Pv1;
//Высокая температура масла на сливе из опорного венца ТНД  (ОР)
IF LG.GTU_work AND ANB.Tm_out_TND_Pv THEN IF delay[30]  <= 3.0 THEN delay[30] := delay[30] + cycle; END_IF; ELSE delay[30]  := 0.0; END_IF;
PS.Tm_out_TND_Pv := delay[30] > 3.0;
PS_INDX[90] := PS.Tm_out_TND_Pv;
//Повыш. Т м на сливе из ОВ ТНД
IF ANB.Tm_out_TND_Pv1 THEN IF delay[31]  <= 3.0 THEN delay[31] := delay[31] + cycle; END_IF; ELSE delay[31]  := 0.0; END_IF;
PS.Tm_out_TND_Pv1 := delay[31] > 3.0;
PS_INDX[91] := PS.Tm_out_TND_Pv1;
//Высокая температура масла на сливе из опорного венца ТН  (ОР)
IF LG.GTU_work AND ANB.Tm_out_N_Pv THEN IF delay[32]  <= 3.0 THEN delay[32] := delay[32] + cycle; END_IF; ELSE delay[32]  := 0.0; END_IF;
PS.Tm_out_N_Pv := delay[32] > 3.0;
PS_INDX[92] := PS.Tm_out_N_Pv;
//Повыш. Т м на сливе из ОВ ТН
IF ANB.Tm_out_N_Pv1 THEN IF delay[33]  <= 3.0 THEN delay[33] := delay[33] + cycle; END_IF; ELSE delay[33]  := 0.0; END_IF;
PS.Tm_out_N_Pv1 := delay[33] > 3.0;
PS_INDX[93] := PS.Tm_out_N_Pv1;
//Низкая температура масла в МБД (ОР)
IF LG.GTU_work AND ANB.Tm_in_MBD_Pn THEN IF delay[34]  <= 60.0 THEN delay[34] := delay[34] + cycle; END_IF; ELSE delay[34]  := 0.0; END_IF;
PS.Tm_in_MBD_Pn := delay[34] > 60.0;
PS_INDX[94] := PS.Tm_in_MBD_Pn;
//Температура масла в МБД> 105 °C  (ОР)
IF ANB.Tm_in_MBD_Pv THEN IF delay[35]  <= 3.0 THEN delay[35] := delay[35] + cycle; END_IF; ELSE delay[35]  := 0.0; END_IF;
PS.Tm_in_MBD_Pv := delay[35] > 3.0;
PS_INDX[95] := PS.Tm_in_MBD_Pv;
//Пониж. Т масла в МБД
IF ANB.Tm_in_MBD_Pn1 THEN IF delay[36]  <= 3.0 THEN delay[36] := delay[36] + cycle; END_IF; ELSE delay[36]  := 0.0; END_IF;
PS.Tm_in_MBD_Pn1 := delay[36] > 3.0;
PS_INDX[96] := PS.Tm_in_MBD_Pn1;
//Т масла в МБД повышенная
IF ANB.Tm_in_MBD_Pv1 THEN IF delay[37]  <= 3.0 THEN delay[37] := delay[37] + cycle; END_IF; ELSE delay[37]  := 0.0; END_IF;
PS.Tm_in_MBD_Pv1 := delay[37] > 3.0;
PS_INDX[97] := PS.Tm_in_MBD_Pv1;
//Повыш. Т подшипников промопоры т1
IF ANB.T_POD_1_Pv THEN IF delay[38]  <= 3.0 THEN delay[38] := delay[38] + cycle; END_IF; ELSE delay[38]  := 0.0; END_IF;
PS.T_POD_1_Pv := delay[38] > 3.0;
PS_INDX[98] := PS.T_POD_1_Pv;
//Повыш. Т подшипников промопоры т2
IF ANB.T_POD_2_Pv THEN IF delay[39]  <= 3.0 THEN delay[39] := delay[39] + cycle; END_IF; ELSE delay[39]  := 0.0; END_IF;
PS.T_POD_2_Pv := delay[39] > 3.0;
PS_INDX[99] := PS.T_POD_2_Pv;
//Повыш. Т г на выходе Н
IF ANB.Tg_out_N_Pv THEN IF delay[40]  <= 3.0 THEN delay[40] := delay[40] + cycle; END_IF; ELSE delay[40]  := 0.0; END_IF;
PS.Tg_out_N_Pv := delay[40] > 3.0;
PS_INDX[100] := PS.Tg_out_N_Pv;
//Повыш. Т переднего ОП Н
IF ANB.T_PON_Pv THEN IF delay[41]  <= 3.0 THEN delay[41] := delay[41] + cycle; END_IF; ELSE delay[41]  := 0.0; END_IF;
PS.T_PON_Pv := delay[41] > 3.0;
PS_INDX[101] := PS.T_PON_Pv;
//Повыш. Т ОУП Н (опорная часть)
IF ANB.Tp_N_opora_Pv THEN IF delay[42]  <= 3.0 THEN delay[42] := delay[42] + cycle; END_IF; ELSE delay[42]  := 0.0; END_IF;
PS.Tp_N_opora_Pv := delay[42] > 3.0;
PS_INDX[102] := PS.Tp_N_opora_Pv;
//Повыш. Т ОУП Н (рабочая колодка)
IF ANB.Tp_N_work_Pv THEN IF delay[43]  <= 3.0 THEN delay[43] := delay[43] + cycle; END_IF; ELSE delay[43]  := 0.0; END_IF;
PS.Tp_N_work_Pv := delay[43] > 3.0;
PS_INDX[103] := PS.Tp_N_work_Pv;
//Повыш. Т ОУП Н (установ. колодка)
IF ANB.Tp_N_ust_Pv THEN IF delay[44]  <= 3.0 THEN delay[44] := delay[44] + cycle; END_IF; ELSE delay[44]  := 0.0; END_IF;
PS.Tp_N_ust_Pv := delay[44] > 3.0;
PS_INDX[104] := PS.Tp_N_ust_Pv;
//Высокое разрежение воздуха на входе в Д  (ОР)
PS.Razr_out_D_Pv := ANB.Razr_out_D_Pv;
PS_INDX[105] := PS.Razr_out_D_Pv;
//Повышенная разрежение воздуха на входе Д (1ая уставка)
PS.Razr_out_D_Pv1 := ANB.Razr_out_D_Pv1;
PS_INDX[106] := PS.Razr_out_D_Pv1;
//Пониж. Рм на входе Д (после ф.)
IF Q_ON.P_msm_D AND ANB.Pm_D_Pn THEN IF delay[45]  <= 2.0 THEN delay[45] := delay[45] + cycle; END_IF; ELSE delay[45]  := 0.0; END_IF;
PS.Pm_D_Pn := delay[45] > 2.0;
PS_INDX[107] := PS.Pm_D_Pn;
//Понижение давление масла смазки Н
IF Q_ON.P_msm_N AND ANB.Pm_N_Pn THEN IF delay[46]  <= 1.0 THEN delay[46] := delay[46] + cycle; END_IF; ELSE delay[46]  := 0.0; END_IF;
PS.Pm_N_Pn := delay[46] > 1.0;
PS_INDX[108] := PS.Pm_N_Pn;
//Понижение перепада давления масло-газ
IF Q_ON.dP_mg AND ANB.dP_mg_Pn THEN IF delay[47]  <= 1.0 THEN delay[47] := delay[47] + cycle; END_IF; ELSE delay[47]  := 0.0; END_IF;
PS.dP_mg_Pn := delay[47] > 1.0;
PS_INDX[109] := PS.dP_mg_Pn;
//Повыш. dР газа на фильтре
PS.dPtg_in_filtr_Pv := ANB.dPtg_in_filtr_Pv;
PS_INDX[110] := PS.dPtg_in_filtr_Pv;
//Повыш. Рг на выходе Н
PS.Pg_out_N_Pv := ANB.Pg_out_N_Pv;
PS_INDX[111] := PS.Pg_out_N_Pv;
//Повыш. Вибросмещение ОП Н
PS.Vibr_OP_N_Pv := ANB.Vibr_OP_N_Pv;
PS_INDX[112] := PS.Vibr_OP_N_Pv;
//Повыш. Вибросмещение ОУП Н
PS.Vibr_OUP_N_Pv := ANB.Vibr_OUP_N_Pv;
PS_INDX[113] := PS.Vibr_OUP_N_Pv;
//Высокая вибрация корпуса КВД  (ОР)
IF LG.GTU_work AND ANB.Vibr_KVD_Pv THEN IF delay[48]  <= 0.5 THEN delay[48] := delay[48] + cycle; END_IF; ELSE delay[48]  := 0.0; END_IF;
PS.Vibr_KVD_Pv := delay[48] > 0.5;
PS_INDX[114] := PS.Vibr_KVD_Pv;
//Повышенная вибрация корпуса КВД
IF ANB.Vibr_KVD_Pv1 THEN IF delay[49]  <= 0.5 THEN delay[49] := delay[49] + cycle; END_IF; ELSE delay[49]  := 0.0; END_IF;
PS.Vibr_KVD_Pv1 := delay[49] > 0.5;
PS_INDX[115] := PS.Vibr_KVD_Pv1;
//Высокая вибрация корпуса КНД  (ОР)
IF LG.GTU_work AND ANB.Vibr_KND_Pv THEN IF delay[50]  <= 0.5 THEN delay[50] := delay[50] + cycle; END_IF; ELSE delay[50]  := 0.0; END_IF;
PS.Vibr_KND_Pv := delay[50] > 0.5;
PS_INDX[116] := PS.Vibr_KND_Pv;
//Повышенная вибрация корпуса КНД
IF ANB.Vibr_KND_Pv1 THEN IF delay[51]  <= 0.5 THEN delay[51] := delay[51] + cycle; END_IF; ELSE delay[51]  := 0.0; END_IF;
PS.Vibr_KND_Pv1 := delay[51] > 0.5;
PS_INDX[117] := PS.Vibr_KND_Pv1;
//Высокая вибрация корпуса ТН  (ОР)
IF LG.GTU_work AND ANB.Vibr_N_Pv THEN IF delay[52]  <= 0.5 THEN delay[52] := delay[52] + cycle; END_IF; ELSE delay[52]  := 0.0; END_IF;
PS.Vibr_N_Pv := delay[52] > 0.5;
PS_INDX[118] := PS.Vibr_N_Pv;
//Повышенная вибрация корпуса ТН
IF ANB.Vibr_N_Pv1 THEN IF delay[53]  <= 0.5 THEN delay[53] := delay[53] + cycle; END_IF; ELSE delay[53]  := 0.0; END_IF;
PS.Vibr_N_Pv1 := delay[53] > 0.5;
PS_INDX[119] := PS.Vibr_N_Pv1;
//------------------------------Calc_AI---------------------------------------
//Повышенная Т газа за ТНД
IF ANB.ev_Tg_out_TND_Pv THEN IF delay[54]  <= 5.0 THEN delay[54] := delay[54] + cycle; END_IF; ELSE delay[54]  := 0.0; END_IF;
PS.ev_Tg_out_TND_Pv := delay[54] > 5.0;
PS_INDX[120] := PS.ev_Tg_out_TND_Pv;
//Пониженная Т газа за ТНД
IF LG.GTU_work AND ANB.ev_Tg_out_TND_Pn THEN IF delay[55]  <= 2.0 THEN delay[55] := delay[55] + cycle; END_IF; ELSE delay[55]  := 0.0; END_IF;
PS.ev_Tg_out_TND_Pn := delay[55] > 2.0;
PS_INDX[121] := PS.ev_Tg_out_TND_Pn;
//N КНД < 900 об/мин на 169 сек. пуска
PS.ev_N_KND_Pn := LG.Nnd_900n AND ANB.ev_N_KND_Pn;
PS_INDX[122] := PS.ev_N_KND_Pn;
//N КНД < 1500 об/мин на 194 сек. пуска
PS.ev_N_KND_Pn1 := LG.Nnd_1500n AND ANB.ev_N_KND_Pn1;
PS_INDX[123] := PS.ev_N_KND_Pn1;
L_SND_COUNT := FALSE;
FOR j := 0 TO 254 BY 1 DO
IF SND_PS_OFF[j] = FALSE AND ((BTN.SND_OFF OR DGI.But_Kvit_ON) AND PS_INDX[j]) THEN
SND_PS_OFF[j] := TRUE;
ELSE IF SND_PS_OFF[j] = TRUE AND LG.deblock THEN
SND_PS_OFF[j] := FALSE;
END_IF;
END_IF;
IF L_SND_COUNT = FALSE THEN
L_SND_COUNT := PS_INDX[j] AND NOT SND_PS_OFF[j];
END_IF;
END_FOR;
SND_PS := L_SND_COUNT;
LG.SND_PS := SND_PS;

LG.OGR :=   PS.dPm_MOB_005 OR 
			PS.Pm_MNOD_004 OR 
			PS.ORT_check OR 
			PS.Pm_in_D_low002 OR 
			PS.dPm_MOB_005 OR
			PS.VOD_nON OR 
			PS.Tv_KGT_Pv OR 
			PS.LIM_Tg_outTNDhigh OR 
			PS.Tm_out_Per_Pv OR 
			PS.Tm_out_KVD_Pv OR
			PS.Tm_out_TND_Pv OR
			PS.Tm_out_N_Pv OR
			PS.Tm_in_MBD_Pn OR
			PS.Tm_in_MBD_Pv OR
			PS.Razr_out_D_Pv OR
			PS.Vibr_KVD_Pv OR
			PS.Vibr_KND_Pv OR  
			PS.Vibr_N_Pv;
LG.OFun :=  PS.Pos_m10_VNA OR PS.Pos_p15_VNA;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="78618AE142A53E74F357FC9B49A56F58" Name="FB_TS">
                <Variables>
                    <Variable UUID="D644B38C46D380A70E752893156759EF" Name="TMRCheck_PZ" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="C28778EA4E68CA7DCCE5AF8148D6F1DC" Name="TMO_Check_PZ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="D5A051084EE132D3A934939E92918495" Name="TMR_Check_PZ" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Usage="internal" />
                </Variables>
                <ST><![CDATA[//строки состояний
TS.filling_MN := sm_startMN.ACC[1] AND NOT sm_startMN.ACC[2] ;// Заполнение МН
TS.Stab_MN := sm_startMN.ACC[2] AND NOT sm_startMN.ACC[3] ; //Стабилизация МН
TS.filling_MUN := sm_startMN.ACC[3] AND NOT sm_startMN.ACC[4] ; //Заполнение маслоуплотнений
TS.Stab_MUN := sm_startMN.ACC[4]; //Стабилизация маслоуплотнений
TS.Start_MD:=  sm_startMD.ACC[1] AND NOT sm_startMD.ACC[2]  ;//Пуск системы МД

TS.Wait_blow_N:=  (sm_fillingN.ACC[2] AND NOT sm_fillingN.ACC[3]) AND NOT DGI.Kr5_OF ;//Продувка контура Н
TS.Stab_Pg_N:=  DGI.Kr5_OF AND (sm_fillingN.ACC[3] AND NOT sm_fillingN.ACC[4]) AND HMI_APR.Pg_out_N.PV > 4.5;//Стабилизация Рг контура Н

TS.Wait_blow_TG:= sm_startTG.ACC[1] AND NOT sm_startTG.ACC[2]; //Продувка ТГ
TS.Start_TG :=  sm_startTG.ACC[1] ;//Пуск ТГ

TS.goHH := FRS.FRegMode = 2 OR FRS.FRegMode = 3; //Выход на ХХ
TS.warm_HH:=  FRS.FRegMode = 4  ;//Прогрев ГТД на ХХ
TS.goNARR:=  FRS.FRegMode = 5 OR FRS.FRegMode = 8 OR FRI.MG;//Выход на НАРР
TS.warm_NARR := FRS.FRegMode = 6; //прогрев НАРР
TS.cooling_NARR := FRS.FRegMode = 9; //Охлаждение на НАРР
TS.N_HH := FRS.FRegMode = 10 OR FRI.HH; //Снижение до ХХ
TS.CoolingGTD := FRS.FRegMode = 11;//Охлаждение ГПА


TS.noG_inN:=  LG.noG_inN  ;//Нет газа в контуре Н
TS.blowing_N:=  sm_BleedingN.ACC[1]  ;//Стравливание контура Н


TS.StartGTD :=  sm_startD.ACC[1];//Запуск ГТД
//TS.Wait_Nknd_1200 := sm_startD.ACC[1] AND NOT sm_startD.ACC[2];
TS.is_flame:=  LG.is_flame    ;//Есть розжиг камеры сгорания
//TS.D_Work :=  sm_startD.ACC[14]; //Двигатель работает
TS.Sound_ON := sm_Sound.ACC[1]; // Предпусковая сигнализация
TS.Check_PZM := Drum_PZM.ACC[3]; // Проверка защит по маслосистеме
TS.Check_PZM_finish := Drum_PZM.ACC[4]; //Защиты по маслосистеме проверены успешно
TS.HP_work := Drum_HP.ACC[4]; // ХП Двигателя
TS.HP_finish := Drum_HP.ACC[5]; //Окончание ХП
TS.AOss_finish := Drum_AOss.ACC[3]; // АОсс завершено
TS.AObs_finish := Drum_AObs.ACC[2] ; // АОбс завершено

//TS.POS_ON := LG.U_Ice_ON; //Условие работы ПОС
TS.VOD_15m_OF := LG.VOD_15m_OF; //Обдув двигателя после прогрева
TS.VOD_100s_OF := LG.VOD_100s_OF; //Обдув двигателя после останова
TS.GNSD_False := LG.GNSD_False;//Неисправен ГНС Д
//TS.PNSD_60m := (AI_HMI.N_KND.PV < 300.0) AND (us.Reserv OR Drum_HP.ACC[6]) AND AM.PNSD_ON.algOn AND LG.Was_worm; //Выбег ПНСД после прогрева Д
//TS.PNSD_10m := (AI_HMI.N_KND.PV < 300.0) AND (us.Reserv OR Drum_HP.ACC[6]) AND AM.PNSD_ON.algOn AND NOT LG.Was_worm; // Выбег ПНСД 
//TS.PNO_65m := (AI_HMI.N_KND.PV < 300.0) AND (us.Reserv OR Drum_HP.ACC[6]) AND AM.PNO_ON.algOn AND LG.Was_worm; //Выбег ПНО после прогрева Д
//TS.PNO_15m := (AI_HMI.N_KND.PV < 300.0) AND (us.Reserv OR Drum_HP.ACC[6]) AND AM.PNO_ON.algOn AND NOT LG.Was_worm; // Выбег ПНО 
TS.GNSN_False := LG.GNSN_False;//Неисправен ГНС Н
TS.GNU_False := LG.GNSN_False;//Неисправен ГНУ


//TS.BTA_gidro :=LG.BTA_gidro ; 
//TS.BTA_pnevmo := LG.BTA_pnevmo ;

//TS.D_OGR := LG.LimitCondition  OR LG.Clamp;







//----------Строка состояния





//TS.DU_Kr_KPK:= NOT LG.noRA_Kr AND Drum_KPK.Start   ;//ДУ Кр. при КПК
//TS.wasGas_OD := LG.wasGas_OD;
TS.wasGas_ON :=LG.wasGas_ON;






TS.stop_Finish:=  LG.AObs_finish OR LG.AOss_finish  ;//Останов ГПА завершен
TS.HR_noReady := us.Repair AND LG.PPU_HR_notReady ; //Контроль ХР 
TS.GR_noReady  :=  us.HR AND LG.PPU_GR_notReady ; //Контроль ГР 
TS.GR_Ready_G := us.GR AND LG.G_inN; //c газом
TS.HR_Ready_G :=us.HR AND LG.G_inN; //c газом
TS.GR_Ready := us.GR AND NOT LG.G_inN; //без газа
TS.HR_Ready :=  us.HR AND NOT LG.G_inN; //без газа
TS.Check_SAU := LG.Check_SAU;// Контроль САУ
TS.Check_PZ := LG.Check_PZ;//Проверка защит


//----------ПЗ
//TMRCheck_PZ(LG.was_Check_PZ, T#1s, TMO_Check_PZ, TMR_Check_PZ );
LG.was_Check_PZ := us.Repair AND  BTN.PZ AND LG.noG_inN OR LG.was_Check_PZ AND NOT (BTN.Start OR BTN.cancel);
//LG.Check_PZ := us.Repair AND  BTN.PZ AND LG.noG_inN OR LG.Check_PZ AND NOT BTN.cancel;
TS.Check_PZ := LG.was_Check_PZ AND us.Repair ;//Проверка защит

//Включение имитатора
TS.IMIT_ON := LG.IMIT_ON; 
//КПК
LG.was_BTN_KPK := us.GR  AND BTN.KPK OR LG.was_BTN_KPK AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_KPK := LG.was_BTN_KPK;
TS.Ready_KPK:=  LG.was_BTN_KPK (*AND LG.Check_SAU_OK*) AND us.GR   ;//Готов к КПК
//АПК
LG.was_BTN_APK :=  us.GR  AND BTN.APK OR LG.was_BTN_APK AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_APK :=LG.was_BTN_APK;
TS.Ready_APK:=  LG.was_BTN_APK (*AND LG.Check_SAU_OK*) AND us.GR  ;//Готов к АПК
//АПМ
LG.was_BTN_APM :=  us.GR  AND BTN.APM OR LG.was_BTN_APM AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_APM :=LG.was_BTN_APM;
TS.Ready_APM:=  LG.was_BTN_APM (*AND LG.Check_SAU_OK*) AND us.GR  ;//Готов к АПМ

//ПБЗ
LG.was_BTN_PBZ :=  us.GR  AND BTN.PBZ OR LG.was_BTN_PBZ AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_PBZ :=LG.was_BTN_PBZ;
TS.Ready_PBZ:=  LG.was_BTN_PBZ (*AND LG.Check_SAU_OK*) AND us.GR  ;//Готов к АПМ

//ХП
LG.was_BTN_HP  :=  us.GR  AND BTN.HP  OR LG.was_BTN_HP AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_HP  := LG.was_BTN_HP;
TS.Ready_HP:=   LG.was_BTN_HP (*AND LG.Check_SAU_OK*) AND us.GR  ;//Готов к ХП или ТП

//ТП
LG.was_BTN_TP  :=  us.GR  AND BTN.TP  OR LG.was_BTN_TP AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_TP  := LG.was_BTN_TP;
TS.Ready_TP:=   LG.was_BTN_TP (*AND LG.Check_SAU_OK*) AND us.GR  ;//Готов к ХП или ТП

//ПЗМ
LG.was_BTN_PZM :=  us.GR  AND BTN.PZM OR LG.was_BTN_PZM AND NOT (BTN.Start OR BTN.cancel OR NOT us.GR);
LG_to_ARM.was_BTN_PZM :=LG.was_BTN_PZM;
TS.Ready_PZM:=  LG.was_BTN_PZM (*AND LG.Check_SAU_OK*) AND us.GR  ;//Готов к ПЗМ


//Ручное управление ИМ
//TS.RU_IM := LG.RU_IM;

//Микрофакельный двигатель
LG_to_ARM.Micro_Fakel := ((us.Reserv AND BTN.Micro_Fakel_ON) OR LG_to_ARM.Micro_Fakel) AND NOT (BTN.Micro_Fakel_OF AND us.Reserv);
//Тип масла
LG_to_ARM.MS_8p := ((us.Reserv AND BTN.MS8P_ON) OR LG_to_ARM.MS_8p) AND NOT (BTN.MS8P_OF AND us.Reserv);
LG.MS_8p := LG_to_ARM.MS_8p; ]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="D1BDBA494F2C93D4369003A11AFB781E" Name="FB_Ust_init0">
                <Variables>
                    <Variable UUID="C863BC974A321F9BF064E8B47BF3437B" Name="firstCycleScan" Comment="First Cycle Scan" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                </Variables>
                <ST><![CDATA[IF firstCycleScan THEN
LG_to_ARM.Micro_Fakel := True;
//Повышенная Т газа за ТНД
Ust.ev_Tg_out_TND_Pv := 650.0;
//Пониженная Т газа за ТНД
Ust.ev_Tg_out_TND_Pn := 250.0;
//---------------------------------------------------------------------
//N КНД < 900 об/мин на 169 сек. пуска
Ust.ev_N_KND_Pn := 900.0;
//N КНД < 1500 об/мин на 194 сек. пуска
Ust.ev_N_KND_Pn1 := 1500.0;
//Nкнд > 300 об/мин
Ust.ev_N_KND_PPUv := 300.0;
//---------------------------------------------------------------------
//N КВД < 700 об/мин. на 192 сек. пуска
Ust.ev_N_KVD_An := 700.0;
//------------------€нициализациЯ уставок измерЯемых параметров---------------------------------------------------
//---------------------------------------------------------------------
//Аварийно-высокая температура под кожухом двигателя
Ust.Tv_KGT_Av := 110.0;
//Высокая температура под кожухом Д  (ОР)
Ust.Tv_KGT_Pv := 90.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура масла на сливе из переходника
Ust.Tm_out_Per_Av := 130.0;
//Высокая температура масла на сливе из переходника  (ОР)
Ust.Tm_out_Per_Pv := 125.0;
//Повыш. Т м на сливе из переход.
Ust.Tm_out_Per_Pv1 := 120.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура масла на сливе из заднего корпуса КВД
Ust.Tm_out_KVD_Av := 130.0;
//Высокая температура масла на сливе из заднего корпуса КВД  (ОР)
Ust.Tm_out_KVD_Pv := 125.0;
//Повыш. Т м на сливе из ЗК КВД
Ust.Tm_out_KVD_Pv1 := 120.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура масла на сливе из опорного венца ТНД
Ust.Tm_out_TND_Av := 105.0;
//Высокая температура масла на сливе из опорного венца ТНД  (ОР)
Ust.Tm_out_TND_Pv := 100.0;
//Повыш. Т м на сливе из ОВ ТНД
Ust.Tm_out_TND_Pv1 := 95.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура масла на сливе из опорного венца ТН
Ust.Tm_out_N_Av := 105.0;
//Высокая температура масла на сливе из опорного венца ТН  (ОР)
Ust.Tm_out_N_Pv := 100.0;
//Повыш. Т м на сливе из ОВ ТН
Ust.Tm_out_N_Pv1 := 95.0;
//---------------------------------------------------------------------
//Т масла в МБН <15 °С
Ust.Tm_in_MBN_PPUn := 15.0;
//---------------------------------------------------------------------
//Температура масла в МБД >110 °C
Ust.Tm_in_MBD_Av := 110.0;
//Низкая температура масла в МБД (ОР)
Ust.Tm_in_MBD_Pn := 20.0;
//Температура масла в МБД> 105 °C  (ОР)
Ust.Tm_in_MBD_Pv := 105.0;
//Пониж. Т масла в МБД
Ust.Tm_in_MBD_Pn1 := 30.0;
//Т масла в МБД повышенная
Ust.Tm_in_MBD_Pv1 := 100.0;
//Тм в МБД < 10 °С
Ust.Tm_in_MBD_PPUn := 10.0;
//Тм в МБД < 35 °С
Ust.Tm_in_MBD_PPUn1 := 15.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура подшипников промопоры т1
Ust.T_POD_1_Av := 90.0;
//Повыш. Т подшипников промопоры т1
Ust.T_POD_1_Pv := 75.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура подшипников промопоры т2
Ust.T_POD_2_Av := 90.0;
//Повыш. Т подшипников промопоры т2
Ust.T_POD_2_Pv := 75.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура газа на выходе Н
Ust.Tg_out_N_Av := 90.0;
//Повыш. Т г на выходе Н
Ust.Tg_out_N_Pv := 60.0;
//Тгаза на выходе К > 60 °С
Ust.Tg_out_N_PPUv := 60.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура переднего опорного подшипника Н
Ust.T_PON_Av := 80.0;
//Повыш. Т переднего ОП Н
Ust.T_PON_Pv := 75.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура ОУП Н (опорная часть)
Ust.Tp_N_opora_Av := 80.0;
//Повыш. Т ОУП Н (опорная часть)
Ust.Tp_N_opora_Pv := 75.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура ОУП опорно-упорного подшипника Н (рабочая колодка)
Ust.Tp_N_work_Av := 80.0;
//Повыш. Т ОУП Н (рабочая колодка)
Ust.Tp_N_work_Pv := 75.0;
//---------------------------------------------------------------------
//Аварийно-высокая температура опорно-упорного подшипника Н (установ. колодка)
Ust.Tp_N_ust_Av := 80.0;
//Повыш. Т ОУП Н (установ. колодка)
Ust.Tp_N_ust_Pv := 75.0;
//---------------------------------------------------------------------
//Аварийно-высокое разряжение воздуха на входе в двигатель
Ust.Razr_out_D_Av := 1.5;
//Высокое разрежение воздуха на входе в Д  (ОР)
Ust.Razr_out_D_Pv := 1.0;
//Повышенная разрежение воздуха на входе Д (1ая уставка)
Ust.Razr_out_D_Pv1 := 0.9;
//---------------------------------------------------------------------
//Аварийно-низкое давление масла на входе в двигатель(после ф.)
Ust.Pm_D_An := 0.1;
//Пониж. Рм на входе Д (после ф.)
Ust.Pm_D_Pn := 0.2;
//---------------------------------------------------------------------
//Аварийно-низкое давление масла смазки  H
Ust.Pm_N_An := 0.1;
//Понижение давление масла смазки Н
Ust.Pm_N_Pn := 0.2;
//---------------------------------------------------------------------
//Аварийно-низкий dР масло-газ 
Ust.dP_mg_An := 30.0;
//Понижение перепада давления масло-газ
Ust.dP_mg_Pn := 100.0;
//---------------------------------------------------------------------
//Аварийно-низкое давление топливного газа на входе в БТА
Ust.Ptg_in_BTA_An := 1.6;
//---------------------------------------------------------------------
//Повыш. dР газа на фильтре
Ust.dPtg_in_filtr_Pv := 150.0;
//---------------------------------------------------------------------
//Повыш. Рг на выходе Н
Ust.Pg_out_N_Pv := 7.5;
//---------------------------------------------------------------------
//Перепад давлений газа на форсунках высокий
Ust.dPg_fors_Av := 0.02;
//---------------------------------------------------------------------
//Аварийно-высокое вибросмещение опорного подшипника Н
Ust.Vibr_OP_N_Av := 120.0;
//Повыш. Вибросмещение ОП Н
Ust.Vibr_OP_N_Pv := 100.0;
//---------------------------------------------------------------------
//Аварийно-высокое вибросмещение опорно-упорного подшипника Н
Ust.Vibr_OUP_N_Av := 120.0;
//Повыш. Вибросмещение ОУП Н
Ust.Vibr_OUP_N_Pv := 100.0;
//---------------------------------------------------------------------
//Аварийно-высокая вибрация корпуса КВД
Ust.Vibr_KVD_Av := 26.0;
//Высокая вибрация корпуса КВД  (ОР)
Ust.Vibr_KVD_Pv := 23.0;
//Повышенная вибрация корпуса КВД
Ust.Vibr_KVD_Pv1 := 16.0;
//---------------------------------------------------------------------
//Аварийно-высокая вибрация корпуса КНД
Ust.Vibr_KND_Av := 26.0;
//Высокая вибрация корпуса КНД  (ОР)
Ust.Vibr_KND_Pv := 23.0;
//Повышенная вибрация корпуса КНД
Ust.Vibr_KND_Pv1 := 16.0;
//---------------------------------------------------------------------
//Аварийно-высокая вибрация корпуса ТН
Ust.Vibr_N_Av := 26.0;
//Высокая вибрация корпуса ТН  (ОР)
Ust.Vibr_N_Pv := 23.0;
//Повышенная вибрация корпуса ТН
Ust.Vibr_N_Pv1 := 16.0;
END_IF;
//-------------------Ћбработка уставок расчетных параметров--------------------------------------------------
//Средняя температура газа за ТНД
ANB.ev_Tg_out_TND_Pv := (Calc_AI.Tg_out_TND.PV > Ust.ev_Tg_out_TND_Pv) AND NOT Calc_AI.Tg_out_TND.fault;
ANB.ev_Tg_out_TND_Pn := (Calc_AI.Tg_out_TND.PV < Ust.ev_Tg_out_TND_Pn) AND NOT Calc_AI.Tg_out_TND.fault;
Calc_AI.Tg_out_TND.ps := ANB.ev_Tg_out_TND_Pv OR ANB.ev_Tg_out_TND_Pn;
//Расчетные обороты КНД
ANB.ev_N_KND_Pn := (Calc_AI.N_KND.PV < Ust.ev_N_KND_Pn) AND NOT Calc_AI.N_KND.fault;
ANB.ev_N_KND_Pn1 := (Calc_AI.N_KND.PV < Ust.ev_N_KND_Pn1) AND NOT Calc_AI.N_KND.fault;
ANB.ev_N_KND_PPUv := (Calc_AI.N_KND.PV > Ust.ev_N_KND_PPUv) AND NOT Calc_AI.N_KND.fault;
Calc_AI.N_KND.ps := ANB.ev_N_KND_Pn OR ANB.ev_N_KND_Pn1;
//Расчетные обороты КВД
ANB.ev_N_KVD_An := (Calc_AI.N_KVD.PV < Ust.ev_N_KVD_An) AND NOT Calc_AI.N_KVD.fault;
Calc_AI.N_KVD.as := ANB.ev_N_KVD_An;
//-------------Ћбработка уставок измерЯемых параметров--------------------------------------------------------
//Температура под кожухом Д
ANB.Tv_KGT_Av := (AI_HMI.Tv_KGT.PV > Ust.Tv_KGT_Av) AND NOT AI_HMI.Tv_KGT.Condition.fault_common;
ANB.Tv_KGT_Pv := (AI_HMI.Tv_KGT.PV > Ust.Tv_KGT_Pv) AND NOT AI_HMI.Tv_KGT.Condition.fault_common;
AI_HMI.Tv_KGT.Condition.ps := ANB.Tv_KGT_Pv;
AI_HMI.Tv_KGT.Condition.as := ANB.Tv_KGT_Av;
//Температура масла на сливе из переходника
ANB.Tm_out_Per_Av := (AI_HMI.Tm_out_Per.PV > Ust.Tm_out_Per_Av) AND NOT AI_HMI.Tm_out_Per.Condition.fault_common;
ANB.Tm_out_Per_Pv := (AI_HMI.Tm_out_Per.PV > Ust.Tm_out_Per_Pv) AND NOT AI_HMI.Tm_out_Per.Condition.fault_common;
ANB.Tm_out_Per_Pv1 := (AI_HMI.Tm_out_Per.PV > Ust.Tm_out_Per_Pv1) AND NOT AI_HMI.Tm_out_Per.Condition.fault_common;
AI_HMI.Tm_out_Per.Condition.ps := ANB.Tm_out_Per_Pv OR ANB.Tm_out_Per_Pv1;
AI_HMI.Tm_out_Per.Condition.as := ANB.Tm_out_Per_Av;
//Температура масла на сливе из заднего корпуса КВД
ANB.Tm_out_KVD_Av := (AI_HMI.Tm_out_KVD.PV > Ust.Tm_out_KVD_Av) AND NOT AI_HMI.Tm_out_KVD.Condition.fault_common;
ANB.Tm_out_KVD_Pv := (AI_HMI.Tm_out_KVD.PV > Ust.Tm_out_KVD_Pv) AND NOT AI_HMI.Tm_out_KVD.Condition.fault_common;
ANB.Tm_out_KVD_Pv1 := (AI_HMI.Tm_out_KVD.PV > Ust.Tm_out_KVD_Pv1) AND NOT AI_HMI.Tm_out_KVD.Condition.fault_common;
AI_HMI.Tm_out_KVD.Condition.ps := ANB.Tm_out_KVD_Pv OR ANB.Tm_out_KVD_Pv1;
AI_HMI.Tm_out_KVD.Condition.as := ANB.Tm_out_KVD_Av;
//Температура масла на сливе из опорного венца ТНД
ANB.Tm_out_TND_Av := (AI_HMI.Tm_out_TND.PV > Ust.Tm_out_TND_Av) AND NOT AI_HMI.Tm_out_TND.Condition.fault_common;
ANB.Tm_out_TND_Pv := (AI_HMI.Tm_out_TND.PV > Ust.Tm_out_TND_Pv) AND NOT AI_HMI.Tm_out_TND.Condition.fault_common;
ANB.Tm_out_TND_Pv1 := (AI_HMI.Tm_out_TND.PV > Ust.Tm_out_TND_Pv1) AND NOT AI_HMI.Tm_out_TND.Condition.fault_common;
AI_HMI.Tm_out_TND.Condition.ps := ANB.Tm_out_TND_Pv OR ANB.Tm_out_TND_Pv1;
AI_HMI.Tm_out_TND.Condition.as := ANB.Tm_out_TND_Av;
//Температура масла на сливе из опорного венца ТН
ANB.Tm_out_N_Av := (AI_HMI.Tm_out_N.PV > Ust.Tm_out_N_Av) AND NOT AI_HMI.Tm_out_N.Condition.fault_common;
ANB.Tm_out_N_Pv := (AI_HMI.Tm_out_N.PV > Ust.Tm_out_N_Pv) AND NOT AI_HMI.Tm_out_N.Condition.fault_common;
ANB.Tm_out_N_Pv1 := (AI_HMI.Tm_out_N.PV > Ust.Tm_out_N_Pv1) AND NOT AI_HMI.Tm_out_N.Condition.fault_common;
AI_HMI.Tm_out_N.Condition.ps := ANB.Tm_out_N_Pv OR ANB.Tm_out_N_Pv1;
AI_HMI.Tm_out_N.Condition.as := ANB.Tm_out_N_Av;
//Температура масла в МБН
ANB.Tm_in_MBN_PPUn := (AI_HMI.Tm_in_MBN.PV < Ust.Tm_in_MBN_PPUn) AND NOT AI_HMI.Tm_in_MBN.Condition.fault_common;
//Температура масла в МБД
ANB.Tm_in_MBD_Av := (AI_HMI.Tm_in_MBD.PV > Ust.Tm_in_MBD_Av) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
ANB.Tm_in_MBD_Pn := (AI_HMI.Tm_in_MBD.PV < Ust.Tm_in_MBD_Pn) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
ANB.Tm_in_MBD_Pv := (AI_HMI.Tm_in_MBD.PV > Ust.Tm_in_MBD_Pv) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
ANB.Tm_in_MBD_Pn1 := (AI_HMI.Tm_in_MBD.PV < Ust.Tm_in_MBD_Pn1) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
ANB.Tm_in_MBD_Pv1 := (AI_HMI.Tm_in_MBD.PV > Ust.Tm_in_MBD_Pv1) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
ANB.Tm_in_MBD_PPUn := (AI_HMI.Tm_in_MBD.PV < Ust.Tm_in_MBD_PPUn) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
ANB.Tm_in_MBD_PPUn1 := (AI_HMI.Tm_in_MBD.PV < Ust.Tm_in_MBD_PPUn1) AND NOT AI_HMI.Tm_in_MBD.Condition.fault_common;
AI_HMI.Tm_in_MBD.Condition.ps := ANB.Tm_in_MBD_Pn OR ANB.Tm_in_MBD_Pv OR ANB.Tm_in_MBD_Pn1 OR ANB.Tm_in_MBD_Pv1;
AI_HMI.Tm_in_MBD.Condition.as := ANB.Tm_in_MBD_Av;
//Температура 1 подшипников промопоры
ANB.T_POD_1_Av := (AI_HMI.T_POD_1.PV > Ust.T_POD_1_Av) AND NOT AI_HMI.T_POD_1.Condition.fault_common;
ANB.T_POD_1_Pv := (AI_HMI.T_POD_1.PV > Ust.T_POD_1_Pv) AND NOT AI_HMI.T_POD_1.Condition.fault_common;
AI_HMI.T_POD_1.Condition.ps := ANB.T_POD_1_Pv;
AI_HMI.T_POD_1.Condition.as := ANB.T_POD_1_Av;
//Температура 2 подшипников промопоры
ANB.T_POD_2_Av := (AI_HMI.T_POD_2.PV > Ust.T_POD_2_Av) AND NOT AI_HMI.T_POD_2.Condition.fault_common;
ANB.T_POD_2_Pv := (AI_HMI.T_POD_2.PV > Ust.T_POD_2_Pv) AND NOT AI_HMI.T_POD_2.Condition.fault_common;
AI_HMI.T_POD_2.Condition.ps := ANB.T_POD_2_Pv;
AI_HMI.T_POD_2.Condition.as := ANB.T_POD_2_Av;
//Температура газа на выходе Н
ANB.Tg_out_N_Av := (AI_HMI.Tg_out_N.PV > Ust.Tg_out_N_Av) AND NOT AI_HMI.Tg_out_N.Condition.fault_common;
ANB.Tg_out_N_Pv := (AI_HMI.Tg_out_N.PV > Ust.Tg_out_N_Pv) AND NOT AI_HMI.Tg_out_N.Condition.fault_common;
ANB.Tg_out_N_PPUv := (AI_HMI.Tg_out_N.PV > Ust.Tg_out_N_PPUv) AND NOT AI_HMI.Tg_out_N.Condition.fault_common;
AI_HMI.Tg_out_N.Condition.ps := ANB.Tg_out_N_Pv;
AI_HMI.Tg_out_N.Condition.as := ANB.Tg_out_N_Av;
//Температура переднего опорного подшипника Н
ANB.T_PON_Av := (AI_HMI.T_PON.PV > Ust.T_PON_Av) AND NOT AI_HMI.T_PON.Condition.fault_common;
ANB.T_PON_Pv := (AI_HMI.T_PON.PV > Ust.T_PON_Pv) AND NOT AI_HMI.T_PON.Condition.fault_common;
AI_HMI.T_PON.Condition.ps := ANB.T_PON_Pv;
AI_HMI.T_PON.Condition.as := ANB.T_PON_Av;
//Температура опорно-упорного подшипника Н (опорная часть)
ANB.Tp_N_opora_Av := (AI_HMI.Tp_N_opora.PV > Ust.Tp_N_opora_Av) AND NOT AI_HMI.Tp_N_opora.Condition.fault_common;
ANB.Tp_N_opora_Pv := (AI_HMI.Tp_N_opora.PV > Ust.Tp_N_opora_Pv) AND NOT AI_HMI.Tp_N_opora.Condition.fault_common;
AI_HMI.Tp_N_opora.Condition.ps := ANB.Tp_N_opora_Pv;
AI_HMI.Tp_N_opora.Condition.as := ANB.Tp_N_opora_Av;
//Температура опорно-упорного подшипника Н (рабочая колодка)
ANB.Tp_N_work_Av := (AI_HMI.Tp_N_work.PV > Ust.Tp_N_work_Av) AND NOT AI_HMI.Tp_N_work.Condition.fault_common;
ANB.Tp_N_work_Pv := (AI_HMI.Tp_N_work.PV > Ust.Tp_N_work_Pv) AND NOT AI_HMI.Tp_N_work.Condition.fault_common;
AI_HMI.Tp_N_work.Condition.ps := ANB.Tp_N_work_Pv;
AI_HMI.Tp_N_work.Condition.as := ANB.Tp_N_work_Av;
//Температура опорно-упорного подшипника Н (установочная колодка)
ANB.Tp_N_ust_Av := (AI_HMI.Tp_N_ust.PV > Ust.Tp_N_ust_Av) AND NOT AI_HMI.Tp_N_ust.Condition.fault_common;
ANB.Tp_N_ust_Pv := (AI_HMI.Tp_N_ust.PV > Ust.Tp_N_ust_Pv) AND NOT AI_HMI.Tp_N_ust.Condition.fault_common;
AI_HMI.Tp_N_ust.Condition.ps := ANB.Tp_N_ust_Pv;
AI_HMI.Tp_N_ust.Condition.as := ANB.Tp_N_ust_Av;
//Разрежение воздуха на входе в двигатель
ANB.Razr_out_D_Av := (AI_HMI.Razr_out_D.PV > Ust.Razr_out_D_Av) AND NOT AI_HMI.Razr_out_D.Condition.fault_common;
ANB.Razr_out_D_Pv := (AI_HMI.Razr_out_D.PV > Ust.Razr_out_D_Pv) AND NOT AI_HMI.Razr_out_D.Condition.fault_common;
ANB.Razr_out_D_Pv1 := (AI_HMI.Razr_out_D.PV > Ust.Razr_out_D_Pv1) AND NOT AI_HMI.Razr_out_D.Condition.fault_common;
AI_HMI.Razr_out_D.Condition.ps := ANB.Razr_out_D_Pv OR ANB.Razr_out_D_Pv1;
AI_HMI.Razr_out_D.Condition.as := ANB.Razr_out_D_Av;
//Давление масла на входе в двигатель (после фильтра)
ANB.Pm_D_An := (AI_HMI.Pm_D.PV < Ust.Pm_D_An) AND NOT AI_HMI.Pm_D.Condition.fault_common;
ANB.Pm_D_Pn := (AI_HMI.Pm_D.PV < Ust.Pm_D_Pn) AND NOT AI_HMI.Pm_D.Condition.fault_common;
AI_HMI.Pm_D.Condition.ps := ANB.Pm_D_Pn;
AI_HMI.Pm_D.Condition.as := ANB.Pm_D_An;
//Давление масла смазки Н
ANB.Pm_N_An := (AI_HMI.Pm_N.PV < Ust.Pm_N_An) AND NOT AI_HMI.Pm_N.Condition.fault_common;
ANB.Pm_N_Pn := (AI_HMI.Pm_N.PV < Ust.Pm_N_Pn) AND NOT AI_HMI.Pm_N.Condition.fault_common;
AI_HMI.Pm_N.Condition.ps := ANB.Pm_N_Pn;
AI_HMI.Pm_N.Condition.as := ANB.Pm_N_An;
//Перепад давлений масло-газ
ANB.dP_mg_An := (AI_HMI.dP_mg.PV < Ust.dP_mg_An) AND NOT AI_HMI.dP_mg.Condition.fault_common;
ANB.dP_mg_Pn := (AI_HMI.dP_mg.PV < Ust.dP_mg_Pn) AND NOT AI_HMI.dP_mg.Condition.fault_common;
AI_HMI.dP_mg.Condition.ps := ANB.dP_mg_Pn;
AI_HMI.dP_mg.Condition.as := ANB.dP_mg_An;
//Давление топливного газа на входе БТА
ANB.Ptg_in_BTA_An := (AI_HMI.Ptg_in_BTA.PV < Ust.Ptg_in_BTA_An) AND NOT AI_HMI.Ptg_in_BTA.Condition.fault_common;
AI_HMI.Ptg_in_BTA.Condition.as := ANB.Ptg_in_BTA_An;
//Перепад давлений топливного газа на фильтре
ANB.dPtg_in_filtr_Pv := (AI_HMI.dPtg_in_filtr.PV > Ust.dPtg_in_filtr_Pv) AND NOT AI_HMI.dPtg_in_filtr.Condition.fault_common;
AI_HMI.dPtg_in_filtr.Condition.ps := ANB.dPtg_in_filtr_Pv;
//Давление газа на выходе Н
ANB.Pg_out_N_Pv := (HMI_APR.Pg_out_N.PV > Ust.Pg_out_N_Pv) AND NOT HMI_APR.Pg_out_N.Condition.fault_common;
HMI_APR.Pg_out_N.Condition.ps := ANB.Pg_out_N_Pv;
//Перепад давлений газа на форсунках
ANB.dPg_fors_Av := (AI_HMI.dPg_fors.PV > Ust.dPg_fors_Av) AND NOT AI_HMI.dPg_fors.Condition.fault_common;
AI_HMI.dPg_fors.Condition.as := ANB.dPg_fors_Av;
//Вибросмещение ОП нагнетателя
ANB.Vibr_OP_N_Av := (AI_HMI.Vibr_OP_N.PV > Ust.Vibr_OP_N_Av) AND NOT AI_HMI.Vibr_OP_N.Condition.fault_common;
ANB.Vibr_OP_N_Pv := (AI_HMI.Vibr_OP_N.PV > Ust.Vibr_OP_N_Pv) AND NOT AI_HMI.Vibr_OP_N.Condition.fault_common;
AI_HMI.Vibr_OP_N.Condition.ps := ANB.Vibr_OP_N_Pv;
AI_HMI.Vibr_OP_N.Condition.as := ANB.Vibr_OP_N_Av;
//Вибросмещение ОУП нагнетателя
ANB.Vibr_OUP_N_Av := (AI_HMI.Vibr_OUP_N.PV > Ust.Vibr_OUP_N_Av) AND NOT AI_HMI.Vibr_OUP_N.Condition.fault_common;
ANB.Vibr_OUP_N_Pv := (AI_HMI.Vibr_OUP_N.PV > Ust.Vibr_OUP_N_Pv) AND NOT AI_HMI.Vibr_OUP_N.Condition.fault_common;
AI_HMI.Vibr_OUP_N.Condition.ps := ANB.Vibr_OUP_N_Pv;
AI_HMI.Vibr_OUP_N.Condition.as := ANB.Vibr_OUP_N_Av;
//Вибрация корпуса КВД
ANB.Vibr_KVD_Av := (AI_HMI.Vibr_KVD.PV > Ust.Vibr_KVD_Av) AND NOT AI_HMI.Vibr_KVD.Condition.fault_common;
ANB.Vibr_KVD_Pv := (AI_HMI.Vibr_KVD.PV > Ust.Vibr_KVD_Pv) AND NOT AI_HMI.Vibr_KVD.Condition.fault_common;
ANB.Vibr_KVD_Pv1 := (AI_HMI.Vibr_KVD.PV > Ust.Vibr_KVD_Pv1) AND NOT AI_HMI.Vibr_KVD.Condition.fault_common;
AI_HMI.Vibr_KVD.Condition.ps := ANB.Vibr_KVD_Pv OR ANB.Vibr_KVD_Pv1;
AI_HMI.Vibr_KVD.Condition.as := ANB.Vibr_KVD_Av;
//Вибрация корпуса КНД
ANB.Vibr_KND_Av := (AI_HMI.Vibr_KND.PV > Ust.Vibr_KND_Av) AND NOT AI_HMI.Vibr_KND.Condition.fault_common;
ANB.Vibr_KND_Pv := (AI_HMI.Vibr_KND.PV > Ust.Vibr_KND_Pv) AND NOT AI_HMI.Vibr_KND.Condition.fault_common;
ANB.Vibr_KND_Pv1 := (AI_HMI.Vibr_KND.PV > Ust.Vibr_KND_Pv1) AND NOT AI_HMI.Vibr_KND.Condition.fault_common;
AI_HMI.Vibr_KND.Condition.ps := ANB.Vibr_KND_Pv OR ANB.Vibr_KND_Pv1;
AI_HMI.Vibr_KND.Condition.as := ANB.Vibr_KND_Av;
//Вибрация корпуса ТН
ANB.Vibr_N_Av := (AI_HMI.Vibr_N.PV > Ust.Vibr_N_Av) AND NOT AI_HMI.Vibr_N.Condition.fault_common;
ANB.Vibr_N_Pv := (AI_HMI.Vibr_N.PV > Ust.Vibr_N_Pv) AND NOT AI_HMI.Vibr_N.Condition.fault_common;
ANB.Vibr_N_Pv1 := (AI_HMI.Vibr_N.PV > Ust.Vibr_N_Pv1) AND NOT AI_HMI.Vibr_N.Condition.fault_common;
AI_HMI.Vibr_N.Condition.ps := ANB.Vibr_N_Pv OR ANB.Vibr_N_Pv1;
AI_HMI.Vibr_N.Condition.as := ANB.Vibr_N_Av;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="36D3D2FB472934ACD75228BC2B42B603" Name="FB_protection">
                <Variables>
                    <Variable UUID="CC37CEBD4804260916670EB9E5B93D32" Name="Proc_Kr1_fault" Type="FB_Analysis_AI" TypeUUID="F3E060074330CC4FF31FEBBC1C6F9352" Usage="internal" />
                    <Variable UUID="977C9D4341EDDD42416A0FBFAA01880F" Name="LG_Kr1_fault" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                </Variables>
                <ST><![CDATA[if not APP_FST_SCN then
// Защита по dPмасло-газ
Q_ON.dP_mg :=  (TMO.stabMUN OR Drum_PZ.Start OR  Q_ON.dP_mg) AND NOT (Drum_PZM.ACC[4] OR sm_BleedingN.ACC[3] OR Drum_PZ.Finish OR (us.Reserv AND NOT LG.G_inN)); 	
// Защита по Pмсм Н
Q_ON.P_msm_N := (TMO.stabMN OR Drum_PZ.Start OR Q_ON.P_msm_N) AND NOT (Drum_PZM.ACC[4] OR sm_BleedingN.ACC[3] OR Drum_PZ.Finish OR (us.Reserv AND NOT LG.G_inN));
// Защита по форсункам
Q_ON.dP_g_fors := (sm_startD.ACC[3] OR Drum_PZ.Start OR Q_ON.dP_g_fors )AND NOT (sm_Stop.ACC[1] OR Drum_PZ.Finish OR sm_startD.ACC[6]); 
// Защита по P топливного газа
Q_ON.P_tg := (sm_startD.ACC[3] OR Drum_PZ.Start OR Q_ON.P_tg )AND NOT (sm_Stop.ACC[1] OR Drum_PZ.Finish); 
// Защита по Pмсм Д										
Q_ON.P_msm_D := ((Calc_AI.N_KND.PV > 2000.0 AND NOT Calc_AI.N_KND.fault) OR Drum_PZ.Start OR Q_ON.P_msm_D) AND NOT (Drum_PZ.Finish OR us.AOss OR us.AObs OR sm_Stop.ACC[1] OR us.Reserv);
// Защита по Pмсм Д до ХХ
Q_ON.P_msm_D_HH := (sm_startMD.ACC[3] OR Drum_PZ.Start OR Q_ON.P_msm_D_HH) AND NOT 
				(Drum_PZM.ACC[4] OR Drum_PZ.Finish OR us.AOss OR us.AObs OR sm_Stop.ACC[2] OR Drum_HP.ACC[5] OR Drum_TP.ACC[5] OR NOT DGO.MNOD_ON OR us.Reserv); 
// Защита по СК
Q_ON.SK_ON := (sm_startD.ACC[6] OR Drum_PZ.Start OR Q_ON.SK_ON) AND NOT (sm_Stop.ACC[1] OR us.AOss OR us.AObs OR sm_CoolingD.Finish OR Drum_PZ.Finish OR us.Reserv); 
// Защита по факелу
Q_ON.fakel := ((TMR.StartGTD > T#230s) OR Drum_PZ.Start OR Q_ON.fakel) AND NOT (sm_Stop.ACC[1] OR Drum_PZ.Finish OR us.Reserv);
end_if;
//
//Взвод защит дополнительных

LG.Block_380  := DGO.Starter_upr_ON OR DGO.Speed_ON OR us.PZ;
LG.Altivar_Sk1  := (DGO.Starter_upr_ON AND NOT DGO.Speed_ON) OR us.PZ;
LG.Altivar_Sk2  := (DGO.Starter_upr_ON AND DGO.Speed_ON) OR us.PZ;
LG.Start_D_192  := (TMR.StartGTD > T#192s) OR us.PZ;
LG.Start_D_204 := ((TMR.StartGTD > T#204s) OR us.PZ OR LG.Start_D_204) AND NOT Q_ON.fakel;
LG.GTU_work:= (sm_warmD.ACC[1] OR LG.GTU_work) AND NOT sm_Stop.ACC[1];
LG.Tg_Work := LG.GTU_work;
LG.Tg_Start := (sm_startD.ACC[5] OR LG.Tg_Start)  AND NOT LG.Tg_Work;
LG.Nnd_3600v := Calc_AI.N_KND.PV > 3600.0 AND NOT Calc_AI.N_KND.fault;
LG.Nnd_1600v := Calc_AI.N_KND.PV > 1600.0 AND NOT Calc_AI.N_KND.fault;
LG.Pv_outOK_086 := Calc_FR.Pv_outOK.out <= 0.86 AND NOT Calc_FR.Pv_outOK.outBrk AND LG.GTU_work;
LG.Pv_outOK_157 := Calc_FR.Pv_outOK.out >= 1.57 AND NOT Calc_FR.Pv_outOK.outBrk AND LG.GTU_work;
LG.Pv_outOK_096 := Calc_FR.Pv_outOK.out >= 0.96 AND NOT Calc_FR.Pv_outOK.outBrk ;
LG.Pv_outOK_147 := Calc_FR.Pv_outOK.out <= 1.47 AND NOT Calc_FR.Pv_outOK.outBrk ;
LG.Nnd_900n := TMR.StartGTD > T#169s;
LG.Nnd_1500n := TMR.StartGTD > T#194s;




//Обработка сложных защит
//АС
LG.Aoss_BTN_ARM  := BTN.ARM_AOss;
LG.Aoss_BTN_PRU := LG.PRU_AOss;
LG.SurgeN := flag_from_SR.SurgeN OR us.PZ;
			(*SurgeAlert(
             dPconf := AI_HMI.dP_conf.PV,                      //перепад на конфузоре Н
             nCompr := Calc_AI.N_TN.PV,                     //частота вращ.вала Н           
             maxDPconfDownSpeed := 40.0, //настр. макс.ск.падениЯ dPк    
             maxNcomprUpSpeed := 150.0,     //настр. макс.ск.роста Nтнд    
             cycle := del_T,                               //цикл программы
             init := APP_FST_SCN,                          //флаг инициализации
             permit := (us.M OR us.K_M OR us.K_M),                        //Разрешение изменил SVS
             ) OR us.PZ; //SurgeAlert *)
LG.KU_KK1_nON_1 := NOT DGI.KU_KK1_ON AND DGI.K1_KK1_1_ON;
LG.KU_KK2_nON_1 := NOT DGI.KU_KK2_ON AND DGI.K1_KK2_1_ON;
LG.KU_KK1_nON_2 := NOT DGI.KU_KK1_ON AND DGI.K2_KK1_2_ON;
LG.KU_KK2_nON_2 := NOT DGI.KU_KK2_ON AND DGI.K2_KK2_2_ON;
LG.Time_start_600 := TMO.StartGTD OR us.PZ ; 
LG.Aobs_BTN_ARM := BTN.ARM_AObs;
LG.Aobs_BTN_PRU := LG.PRU_AObs;
LG.No_rozjig := Calc_AI.dT_KC.PV <= 60.0 AND NOT Calc_AI.dT_KC.fault; 
LG.No_fakel := Calc_AI.dT_KC.PV <= 165.0 AND NOT Calc_AI.dT_KC.fault; 
LG.N_KND_brk := Calc_AI.N_KND.fault;
LG.N_KVD_brk :=  Calc_AI.N_KVD.fault;
LG.N_TN_brk :=  Calc_AI.N_TN.fault;
LG.N_TND_brk :=   Calc_AI.Tg_out_TND.fault; 
LG.A_Dgdistort := (abs(Calc_FR.setDG - AI_HMI.Pos_TRK.PV)  >  5.0) OR us.PZ ;
Proc_Kr1_fault(AI := HMI_APR.Pg_in_N, Permit:= (us.Work OR  us.PZ) , Ust := 10.0, Alarm_out => LG_Kr1_fault);
LG.Kr1_sh_vz := sm_startD.ACC[1] OR LG.Kr1_sh_vz AND NOT us.Stop;
LG.Kr1_sh :=  NOT DGI.Kr1_ON AND (LG_Kr1_fault OR us.PZ) AND (LG.Kr1_sh_vz OR us.PZ); 
LG.Kr2_sh := NOT DGI.Kr2_ON AND NOT DGI.Kr6_ON AND (us.M OR us.PZ);
LG.Kr6_sh_vz := (DGO.Kr6_ON AND DGI.Kr6_ON OR LG.Kr6_sh_vz) AND NOT DGO.Kr6_OF;
LG.Kr6_sh := NOT DGI.Kr6_ON AND (NOT DGI.Kr2_ON OR DGI.Kr2_OF) AND (LG.Kr6_sh_vz OR us.PZ);

//ПС
LG.VOD_nON := NOT DGI.VOD_1_ON AND NOT DGI.VOD_2_ON; 
LG.Time_start_300 := TMR.StartGTD > T#300s;
LG.KK1_st_1_fault := (DGI.K1_KK1_1_ON OR DGI.K1_KK2_1_ON) AND NOT DGO.Starter_upr_ON AND NOT DGO.Speed_ON;
LG.KK2_st_2_fault := (DGI.K2_KK1_2_ON OR DGI.K2_KK2_2_ON) AND NOT DGO.Starter_upr_ON AND NOT DGO.Speed_ON;
LG.KK1_ku_failt := DGI.KU_KK1_ON AND NOT DGO.Starter_upr_ON AND NOT DGO.Speed_ON;
LG.KK2_ku_failt := DGI.KU_KK2_ON AND NOT DGO.Starter_upr_ON AND NOT DGO.Speed_ON;
LG.Chips_KP_fault := NOT DGI.Chips_KP AND TMO.Check_SAU_4s;
LG.Chips_Per_fault := NOT DGI.Chips_Per AND TMO.Check_SAU_4s;
LG.Chips_KVD_fault := NOT DGI.Chips_KVD AND TMO.Check_SAU_4s;
LG.Chips_TN_fault := NOT DGI.Chips_TN AND TMO.Check_SAU_4s;
LG.Chips_TND_fault := NOT DGI.Chips_TND AND TMO.Check_SAU_4s;
LG.P_Dgdistort := LG.A_Dgdistort; 
LG.Noss_BTN_ARM := BTN.ARM_NOss;
LG.Noss_BTN_PRU := LG.PRU_NOss;
LG.Nobs_BTN_ARM := BTN.ARM_NObs;
LG.Nobs_BTN_PRU := LG.PRU_NObs;
LG.Alarm_msg := LG.SND_AS;
LG.Kr5_ON := NOT DGI.Kr5_ON AND LG.noG_inN;
LG.Kr5_OF := NOT DGI.Kr5_OF AND LG.G_inN;
LG.U_SAU_fault := NOT ( DGI.Check_U_AC220 AND DGI.Check_U_DC220 AND DGI.Check_UZIP AND DGI.QF_ON AND DGI.Check_U_DC220_BEO_osn AND DGI.Check_U_DC220_BEO_rez AND 
						DGI.Check_U_AI_Tp AND DGI.Check_U_DI_Tp AND DGI.Check_U_D0_Tp AND DGI.Check_U_DC24_PLC_osn AND DGI.Check_U_DC24_PLC_rez AND DGI.Check_U_DC24_VU_osn AND 
						DGI.Check_U_DC24_VU_rez AND DGI.Check_U_DC24_AI_osn AND DGI.Check_U_DC24_AI_rez AND DGI.Check_U_DC24_DI_osn AND DGI.Check_U_DC24_DI_rez AND 
						DGI.Check_U_DC24_VU_1_osn AND DGI.Check_U_DC24_VU_1_rez AND DGI.Check_U_DC24_BEO_osn AND DGI.Check_U_DC24_BEO_rez); 
//LG.AI_fault
//LG.IM_fault
//LG.Def_fault
//LG.DI_fault
LG.Ntn_1600v := Calc_AI.N_TN.PV > 1600.0 AND NOT Calc_AI.N_TN.fault;
LG.MOB := AI_HMI.Pv_out_KVD.PV >0.8 AND NOT AI_HMI.Pv_out_KVD.Condition.fault_common AND NOT AI_HMI.Pv_out_KVD.Condition.repair;
LG.SK_ON_PS := DGO.SK_ON AND (DGO.U_KNO_ON OR DGO.U_KNO_udrj12_ON);
LG.SK_OF_PS := NOT LG.SK_ON_PS;
//Защиты из ТР
LG.A_noFire1 := FRS.A_noFire1;//Нет розжига
LG.A_noFire2 := FRS.A_noFire2;//Погасание факела
LG.A_NndBrk := FRS.A_NndBrk;//Отказ каналов изм. N КНД
LG.A_NvdBrk := FRS.A_NvdBrk;//Отказ каналов изм. N КВД
LG.A_NstBrk := FRS.A_NstBrk;//Отказ каналов изм. N ТН
LG.A_Tg_outTNDbrk := FRS.A_Tg_outTNDbrk;//Отказ каналов изм. Т газа за ТНД
LG.A_NndLow := FRS.A_NndLow;//Низкая N КНД на режиме
LG.A_NvdLow := FRS.A_NvdLow;//Низкая N КВД на режиме
LG.A_NstLow := FRS.A_NstLow;//Низкая N ТН на режиме
LG.A_NndHigh := FRS.A_NndHigh;//Высокая N КНД
LG.A_NvdHigh := FRS.A_NvdHigh;//Высокая N КВД
LG.A_Pv_outKVDHigh := FRS.A_Pv_outKVDHigh;//Высокое давление воздуза за КВД
LG.A_Tg_outTNDhigh := FRS.A_Tg_outTNDhigh;//Высокая температура газа за ТНД
LG.A_Tg_outTNDstartHigh := FRS.A_Tg_outTNDstartHigh;//Высокая температура газа за ТНД на запуске
LG.A_Dgdistort := FRS.A_DGdistort;//Рассогласование по ДГ
LG.A_NstHigh := FRS.A_NstHigh;//Высокая N ТН
LG.P_Dgdistort := FRS.P_DGdistort;//Рассогласование по ДГ
LG.LIM_Tg_outTNDhigh := FRS.LIM_Tg_outTNDhigh;

LG.Rp_loLimited := FRS.Rp_loLimited; //Двигатель на нижнем ограничении
LG.Rp_hiLimited := FRS.Rp_hiLimited; //Двигатель на верхнем ограничениии
LG.Rp_loLimitNnd := FRS.Rp_loLimitNnd; //Нижнеее ограничение по N КНД
LG.Rp_loLimitNvd := FRS.Rp_loLimitNvd; //Нижнеее ограничение по N КВД
LG.Rp_loLimitNst := FRS.Rp_loLimitNst; //Нижнеее ограничение по N СТ
LG.Rp_hiLimitNnd := FRS.Rp_hiLimitNnd; //Верхнеееограничение по N КНД
LG.Rp_hiLimitNvd := FRS.Rp_hiLimitNvd; //Верхнеее ограничение по N КВД
LG.Rp_hiLimitNst := FRS.Rp_hiLimitNst; //Верхнеее ограничение по N СТ
LG.Rp_hiLimitT := FRS.Rp_hiLimitT; //Верхнее ограничение по Т газов за ТВД
LG.Rp_hiLimitPk	 := FRS.Rp_hiLimitPk; //Верхнее ограничение по давлению за ОК
LG.Rp_hiLimitGt := FRS.Rp_hiLimitGt; //Верхнеее ограничение по расходу топлива
LG.Rp_loLimitGt := FRS.Rp_loLimitGt; //Нижнеее ограничение по расходу топлива


]]></ST>
            </FunctionBlock>
            <Function UUID="F17399F147D16E4D7B2D848BC0ADEBC7" Name="FC_initAlarm" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="6714ABEA44F498BA01172185D5B47D06" Name="initAlarm" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                </Variables>
                <ST><![CDATA[if not initAlarm then

	initAlarm := true;

	Alarm1[0].category := DINT#10100;//Категория сигнала
	Alarm1[0].algName  := 'PS.Tv_KGT_Pv'; //Алгоритмическое имя
	Alarm1[0].message  := 'Высокая температура под кожухом Д  (ОР)';
	Alarm1[0].tag      := 'PS';//Допинфо для служебных целей
	Alarm1[0].source   := 'ПС';//Источник сигнала

	Alarm1[1].category := DINT#10100;//Категория сигнала
	Alarm1[1].algName  := 'PS.Tm_out_Per_Pv'; //Алгоритмическое имя
	Alarm1[1].message  := 'Высокая температура масла на сливе из переходника  (ОР)';
	Alarm1[1].tag      := 'PS';//Допинфо для служебных целей
	Alarm1[1].source   := 'ПС';//Источник сигнала

	Alarm1[2].category := DINT#10100;//Категория сигнала
	Alarm1[2].algName  := 'PS.Tm_out_Per_Pv1'; //Алгоритмическое имя
	Alarm1[2].message  := 'Повыш. Т м на сливе из переход.';
	Alarm1[2].tag      := 'PS';//Допинфо для служебных целей
	Alarm1[2].source   := 'ПС';//Источник сигнала

end_if;]]></ST>
            </Function>
        </Folder>
        <Folder Name="05_AM" Comment="" Data="" UUID="741897B147D86F8BCD82A09AD8FE4F63">
            <FunctionBlock UUID="9CE2465C4A01BD2A3769F9BD95F4BF66" Name="FB_ALG_AM">
                <Variables>
                    <Variable UUID="1776436946F834B62D07FF96C370F9CE" Name="TMR_PNSD_60m" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="009EA4844ECE9F0C54EFA89794AB9D84" Name="TMR_PNSD_10m" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="A838B3624D498B6BB407A4BA548DFD80" Name="TMR_PNO_65m" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="D3ABB5B242286090D2B4A787E00A6A50" Name="TMR_PNO_15m" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="76326B67430450A4CFEE9DB75E899C69" Name="TMR_KAO_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="064DF8294A111EB2E0EDB48E12384A08" Name="TMR_KPG_1s" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="1C01F47E45EAD225FA40C5A0743A56EA" Name="TMR_KPG_1_1s" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="AAC14DFC43C1EB1D0109DB8C64B43B01" Name="TMR_OpenSK" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="B81171B1401FCF3B5BAD65BDBA7BF836" Name="TMR_Starter_65s" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="42294B6942866F96D6D9F4A5BE2165C1" Name="TMR_Starter_75s" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="09E941474961D1515A29CB829383C3E8" Name="TMR_VVD_1_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="5FCBE7B54EB9D3CC3FF4B48F215B40BD" Name="TMR_VVD_3_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="B93709E944318E9435BA5D926C91BEDF" Name="TMR_VOD_15m" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="744781954053B3D8AE20FA85ACAE9F13" Name="TMR_VOD_100s" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="A4C1FFE7452E1AEFAA33A1A8C0E0F490" Name="TMR_VVN_1_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="E8D6CA1549D8277B062D28994A43F67C" Name="TMR_Filling_oil_Kr1" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="E358B1644D67013FCEC15DB6E5CB8FF2" Name="TMR_Filling_oil_Kr2" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="D403973440C09272B8B7F39B54BB73EC" Name="TMR_KPR1_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="118A5BFC425A586E3D740FA63B80B12F" Name="TMR_KPR2_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="E818D1234935347189412D9E4D9F4079" Name="TMR_BP_SPV_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="109CB74D49FB4EA343A7229D8684B4ED" Name="TMR_ORT" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="81116F75499FF007997871BC60C94345" Name="TMR_MNU_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="66B239824BBBCA20A7B667AB146CE522" Name="TMR_Pm_D" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="BAA8706F4CC8939ABA5EBB9501B6C4E4" Name="TMR_Modes" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="532112FF4716CEF968CC24B654CECE79" Name="TMR_Pm_MNOD_004" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="378646B043F5237D5F134BBE6EF3DE45" Name="TMR_Pm_MNOD" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="555011E84A05F504F97DF29204DA2B00" Name="TMR_MNOD_PZM_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="AAC075B74BF6F7B6E1C1E4B01B70B2FB" Name="TMR_MNOD_OF" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="917D6F7746BD3E90072DA4B687E1F4E5" Name="TMR_Pm_in_D_002" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="B7C79D184BFF8F153B10C9BD1F5BD748" Name="TMR_Gas_N1" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="A7939BDB4142ECD4C4D264A7B7E46087" Name="TMR_Gas_N2" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="5390787E4C6B99795CB6B2B0DDB2AA3B" Name="TMR_Tv_KGT50" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="5D8CEF0E4480F9878D6B8CB2DF152FD1" Name="TMR_Tv_KGT30" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="2F8995F7481314D0219D4FB1BCC7E7A3" Name="TMR_Tv_KGT70" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="13AF1D734C2872C1A0C7E29DDF07AEC6" Name="TMR_Tv_KGT60" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="A7ABB364428F89827FC3E489614727D7" Name="TMR_Check_Chips" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="68F9015A44637FC732732285DB44B2AE" Name="curr_H_Time" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CD44B1174885AF2FF8C5AEA5953A3560" Name="Light_ON" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5E10FDF14E5604569DF132876C8D3B2B" Name="Light_OF" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Кран № 1----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr1.disableManual	:=	NOT (DGI.dPg_in_Kr1 AND HMI_APR.Pg_in_N.PV > 4.0 AND DGI.Kr5_OF AND (us.Reserv OR us.KPK));  //Запрет РУ
AM.Kr1.algOff	:=	sm_Stop.ACC[2] OR (Drum_KPK.ACC[5] AND NOT Drum_KPK.ACC[6]);  //Логическая команда на закр.(выкл.)
AM.Kr1.algOn	:=	sm_fillingN.ACC[4] AND NOT sm_fillingN.ACC[5];  //Логическая команда на откр.(вкл.)

//Кран № 1 смазка----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr1_oil.disableManual	:=	TRUE;  //Запрет РУ

LG.Filling_oil_Kr1 := (DGI.Kr1_OF OR LG.Filling_oil_Kr1) AND NOT DGI.Kr1_ON;
TMR_Filling_oil_Kr1(LG.Filling_oil_Kr1, ustT.Filling_oil_Kr1, TMO.Filling_oil_Kr1, TMR.Filling_oil_Kr1); 
AM.Kr1_oil.algOn	:=	NOT TMO.Filling_oil_Kr1 AND DGI.Kr1_OF AND NOT us.Repair;  //Логическая команда на откр.(вкл.)

//Кран № 2----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr2.disableManual	:=	NOT us.K_M;  //Запрет РУ
AM.Kr2.algOff	:=	sm_M_K.ACC[2] OR (sm_Stop.ACC[1] AND NOT sm_Stop.ACC[2]);  //Логическая команда на закр.(выкл.)
AM.Kr2.algOn	:=	sm_K_M.ACC[1] AND NOT sm_K_M.ACC[2];  //Логическая команда на откр.(вкл.)

//Кран № 2 смазка----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr2_oil.disableManual	:=	TRUE;  //Запрет РУ

LG.Filling_oil_Kr2 := (DGI.Kr2_OF OR LG.Filling_oil_Kr2) AND NOT DGI.Kr2_ON;
TMR_Filling_oil_Kr2(LG.Filling_oil_Kr2, ustT.Filling_oil_Kr2, TMO.Filling_oil_Kr2, TMR.Filling_oil_Kr2);
AM.Kr2_oil.algOn	:=	NOT TMO.Filling_oil_Kr2 AND DGI.Kr2_OF AND NOT us.Repair;  //Логическая команда на откр.(вкл.)

//Кран № 4----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr4.disableManual	:=	NOT ((us.Reserv OR us.KPK) AND DGI.Kr5_OF);  //Запрет РУ
AM.Kr4.algOff	:=	(sm_fillingN.ACC[5] AND NOT sm_fillingN.ACC[6]) OR (sm_Stop.ACC[1] AND NOT sm_Stop.ACC[2]) ;  //Логическая команда на закр.(выкл.)
AM.Kr4.algOn	:=	sm_fillingN.ACC[1] AND NOT sm_fillingN.ACC[2];  //Логическая команда на откр.(вкл.)

//Кран № 5----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr5.disableManual	:=	NOT (us.Reserv OR us.KPK) ;  //Запрет РУ
AM.Kr5.algOff	:=	sm_fillingN.ACC[3] AND NOT sm_fillingN.ACC[4];  //Логическая команда на закр.(выкл.)
AM.Kr5.algOn	:=	sm_BleedingN.ACC[2] AND NOT sm_BleedingN.ACC[3];  //Логическая команда на откр.(вкл.)

//Кран № 6----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr6.disableManual	:=	NOT (DGI.dPg_in_Kr1 AND HMI_APR.Pg_in_N.PV > 4.0 AND DGI.Kr5_OF AND (us.Reserv OR us.KPK) OR us.K_M OR us.M); ;  //Запрет РУ
AM.Kr6.algOff	:=	(*sm_K_M.ACC[2] OR*) sm_Stop.ACC[2] OR (Drum_KPK.ACC[5] AND NOT Drum_KPK.ACC[6]);  //Логическая команда на закр.(выкл.)
AM.Kr6.algOn	:=	sm_fillingN.ACC[6] OR (sm_M_K.ACC[1] AND NOT sm_M_K.ACC[2]) OR (sm_Stop.ACC[1] AND NOT sm_Stop.ACC[2] AND LG.G_inN);  //Логическая команда на откр.(вкл.)

//Кран № 9----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr9.disableManual	:=	NOT ((us.Reserv OR us.KPK) AND DGI.SK_OF);  //Запрет РУ
AM.Kr9.algOff	:=	sm_startTG.ACC[2];  //Логическая команда на закр.(выкл.)
AM.Kr9.algOn	:=	(sm_Stop.ACC[1] AND NOT sm_Stop.ACC[2]) OR Drum_KPK.ACC[6];  //Логическая команда на откр.(вкл.)

//Кран № 12----------------------------------------------------------------------------------------------------
//-------------2x2---------------------------------------------------------------------------------------------------------------------------------------
AM.Kr12.disableManual	:=	NOT ((us.Reserv OR us.KPK) AND DGI.SK_OF);  //Запрет РУ
AM.Kr12.algOff	:=	(sm_Stop.ACC[1] AND NOT sm_Stop.ACC[2]) OR Drum_KPK.ACC[6];  //Логическая команда на закр.(выкл.)
AM.Kr12.algOn	:=	sm_startTG.ACC[1] AND NOT sm_startTG.ACC[2];  //Логическая команда на откр.(вкл.)

//ПМНС Н ----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
LG.GTU_ON := Calc_AI.N_TN.PV > 4250.0 AND AI_HMI.Pm_N.PV < 0.1 AND LG.GTU_work;
LG.GNS_fault:= (LG.GTU_ON OR LG.GNS_fault) AND NOT (LG.deblock OR us.Stop);

LG.Modes:=us.Check OR us.Start OR us.Work;
LG.Modes_TR:= (Calc_AI.N_TN.PV < 300.0 OR LG.Modes_TR) AND NOT LG.Modes;
TMR_MNU_OF(LG.Modes_TR, ustT.MNU_OF, TMO.MNU_OF, TMR.MNU_OF);
LG.MNU_OF:=TMO.MNU_OF AND LG.noG_inN;

LG.PMNS_ON:= AM.MNU_1_ON.algOn OR AM.MNU_2_ON.algOn OR sm_startMN.ACC[1] OR LG.G_inN OR (NOT (Calc_AI.N_TN.PV > 4250.0) AND (LG.GTU_work OR (us.NOss OR  us.NObs))) OR (us.AOss OR us.AObs) OR LG.GNS_fault;
LG.PMNS_OF:= (NOT LG.GNS_fault AND LG.GTU_work AND Calc_AI.N_TN.PV > 4350.0)OR Drum_PZM.ACC[3] OR LG.MNU_OF;
LG.PMNS_TR:=(LG.PMNS_ON OR LG.PMNS_TR) AND NOT LG.PMNS_OF;

//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.PMNS_ON.disableManual	:=	NOT (NOT AM.PMNS_ON.algOn OR (us.Reserv AND NOT LG.noG_inN) AND NOT DGI.Fire);  //Запрет РУ
AM.PMNS_ON.algOn	:=	NOT us.PZ AND LG.PMNS_TR AND NOT DGI.Fire;  //Логическая команда на откр.(вкл.)

//МНУ (1 секция)----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
LG.MNU_ON := sm_startMN.ACC[3] OR NOT LG.noG_inN OR (NOT (Calc_AI.N_TN.PV > 4250.0) AND (LG.GTU_work OR (us.NOss OR  us.NObs))) OR (us.AOss OR us.AObs);
LG.MNU1_ON := DGI.PMNS_ON AND NOT (AI_HMI.Pm_N.PV < 0.12) AND LG.MNU_ON;
LG.MNU1_OF := (LG.MNU_OF OR Drum_PZM.ACC[3]) OR (LG.GTU_work AND Calc_AI.N_TN.PV > 4300.0) OR DGI.Fire OR(us.Reserv AND NOT DGI.PMNS_ON); 
LG.MNU1_TR := (LG.MNU1_ON OR LG.MNU1_TR ) AND NOT LG.MNU1_OF;
LG.MNU_fault := LG.MNU1_TR AND ((TS.MNU_1_main AND AM.MNU_1_ON.fNotOn OR TS.MNU_2_main AND AM.MNU_2_ON.fNotOn) OR LG.MNU_fault AND NOT (BTN.MNU_1_main OR BTN.MNU_2_main));
redundancy_AM(
				AM1 := AM.MNU_1_ON //структура 1го ИМ
				AM2 := AM.MNU_2_ON //структура 2го ИМ
				AM_ON := LG.MNU1_TR //вкл. ИМ
				AM_Switch := LG.MNU_fault // ошибка ИМ, усл. неисправности
				AM_both_ON := FALSE //включить оба ИМа
				not_of := FALSE // усл. блокировки
				AM1_main := TS.MNU_1_main //усл. ИМ1 осн.
				AM2_main := TS.MNU_2_main // усл ИМ2 осн.
);
TS.MNU_1_main := NOT TS.MNU_2_main;
TS.MNU_2_main := (BTN.MNU_2_main OR TS.MNU_2_main) AND NOT BTN.MNU_1_main;
//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.MNU_1_ON.disableManual	:=	NOT(NOT DGI.Fire AND DGI.PMNS_ON AND (NOT AM.MNU_1_ON.algOn OR (us.Reserv AND NOT LG.GTU_work)));  //Запрет РУ
//AM.MNU_1_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//МНУ (2 секция)----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------

//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.MNU_2_ON.disableManual	:=	NOT(NOT DGI.Fire AND DGI.PMNS_ON AND (NOT AM.MNU_2_ON.algOn OR (us.Reserv AND NOT LG.GTU_work)));  //Запрет РУ
//AM.MNU_2_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//МННД----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------

TMR_Pm_D((NOT DGI.Pm_in_D_002 OR DGI.Pm_in_D_alarm_low), ustT.Pm_D, TMO.Pm_D, TMR.Pm_D);
LG.Pm_D := (Calc_AI.N_KND.PV < 3600.0 AND Calc_AI.N_KND.PV > 300.0) OR (TMO.Pm_D AND Q_ON.P_msm_D);
LG.MNND_AND := LG.Pm_D AND (LG.GTU_work OR (us.Stop AND NOT DGI.Pm_MNOD_004));
LG.MNND_OR := LG.MNND_AND OR sm_startMD.ACC[2];
LG.MNND_ON := LG.MNND_OR AND DGI.MNOD_ON;

TMR_Modes((Calc_AI.N_KND.PV < 300.0 AND (us.Reserv OR us.Stop)), ustT.Modes, TMO.Modes, TMR.Modes); //Отключение МННД
TMR_Pm_MNOD_004(DGI.Pm_MNOD_004, ustT.Pm_MNOD_004, TMO.Pm_MNOD_004, TMR.Pm_MNOD_004); // 
LG.MNND_OF := Drum_PZM.ACC[3] OR DGI.Pm_in_D_002 AND LG.GTU_work AND Calc_AI.N_KND.PV > 3650.0 AND TMO.Pm_MNOD_004 OR TMO.Modes;

LG.MNND_TR := LG.MNND_ON OR LG.MNND_TR AND NOT LG.MNND_OF;

//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.MNND_ON.disableManual	:=	NOT(us.Reserv AND DGI.MNOD_ON AND NOT DGI.Fire);  //Запрет РУ
AM.MNND_ON.algOn	:=	LG.MNND_TR AND DGI.MNOD_ON AND NOT us.PZ AND NOT DGI.Fire;  //Логическая команда на откр.(вкл.)

//МНОД----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
TMR_Pm_MNOD((NOT DGI.Pm_in_D_002 OR (NOT DGI.Pm_MNOD_002 AND Calc_AI.N_KND.PV < 3650.0) OR DGI.Pm_in_D_alarm_low OR NOT DGI.Pm_MNOD_004) ustT.Pm_MNOD, TMO.Pm_MNOD, TMR.Pm_MNOD); 
LG.MNOD_ON := DGI.MNND_ON  OR 
			  sm_startMD.ACC[1] OR (
			 (LG.GTU_work OR us.Stop) AND ((Calc_AI.N_KND.PV < 3600.0 AND Calc_AI.N_KND.PV > 300.0) OR (TMO.Pm_MNOD AND Q_ON.P_msm_D)));

//TMR_MNOD_PZM_OF(Drum_PZM.ACC[3], ustT.MNOD_PZM_OF, TMO.MNOD_PZM_OF, TMR.MNOD_PZM_OF); //таймер 300с
TMR_MNOD_OF((Calc_AI.N_KND.PV < 300.00 AND (us.Reserv OR us.Stop)), ustT.MNOD_OF, TMO.MNOD_OF, TMR.MNOD_OF); //таймер 65мин

LG.MNOD_OF := (DGI.Pm_in_D_002 AND LG.GTU_work AND Calc_AI.N_KND.PV > 3650.0) OR 
			  (*TMO.MNOD_PZM_OF*) (Drum_PZM.ACC[3] AND DGI.MNND_OF) OR 
			  TMO.MNOD_OF;
LG.MNOD_TR := LG.MNOD_ON OR LG.MNOD_TR AND NOT LG.MNOD_OF;
//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.MNOD_ON.disableManual	:=	NOT(NOT DGI.Fire AND NOT sm_startMD.ACC[1] AND us.Reserv);  //Запрет РУ
AM.MNOD_ON.algOn	:=	LG.MNOD_TR AND NOT us.PZ AND NOT DGI.Fire;  //Логическая команда на откр.(вкл.)

//МНОБ Д----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
TMR_Pm_in_D_002(DGI.Pm_in_D_002, ustT.Pm_in_D_002, TMO.Pm_in_D_002, TMR.Pm_in_D_002);
LG.MNOB_DU_ON := (TMO.Pm_in_D_002 OR LG.MNOB_DU_ON) AND NOT BTN.Deblock;

LG.MNOB_OF := us.Stop OR DGI.Fire OR TMO.Pm_in_D_002;
LG.MNOB_ON := sm_startMD.ACC[2] (*OR (us.HP AND NOT LG.MNOB_DU_ON)*);


//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.MNOB_ON.disableManual	:=	NOT(NOT LG.MNOB_DU_ON AND NOT DGI.Fire AND DGI.MNND_ON);  //Запрет РУ
AM.MNOB_ON.algOn	:=	(LG.MNOB_ON OR AM.MNOB_ON.algOn) AND NOT LG.MNOB_OF;  //Логическая команда на откр.(вкл.)

//ВОД 1----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
//TMR_Gas_N1(NOT DGI.Gas_N, ustT.Gas_N1, TMO.Gas_N1, TMR.Gas_N1);
//TMR_Gas_N2(TMO.Gas_N1, ustT.Gas_N2, TMO.Gas_N2, TMR.Gas_N2);
//LG.Gas_N := TMO.Gas_N1 AND NOT TMO.Gas_N2; 

//TMR_Tv_KGT50(AI_HMI.Tv_KGT.PV > 50.0, ustT.Tv_KGT50, TMO.Tv_KGT50, TMR.Tv_KGT50);
LG.VOD1_ON := LG.GTU_work;
TMR_Tv_KGT30(AI_HMI.Tv_KGT.PV < 50.0 AND us.Reserv, ustT.Tv_KGT30, TMO.Tv_KGT30, TMR.Tv_KGT30);
LG.VOD1_OF := TMO.Tv_KGT30 OR DGI.Fire;
LG.VOD1_TR := (LG.VOD1_ON OR LG.VOD1_TR) AND NOT LG.VOD1_OF;

//TMR_Tv_KGT70(AI_HMI.Tv_KGT.PV > 70.0, ustT.Tv_KGT70, TMO.Tv_KGT70, TMR.Tv_KGT70);
//LG.VOD2_ON := (LG.GTU_work AND TMO.Tv_KGT70)OR DGI.Gas_N;
//TMR_Tv_KGT60(AI_HMI.Tv_KGT.PV < 60.0, ustT.Tv_KGT60, TMO.Tv_KGT60, TMR.Tv_KGT60);
//LG.VOD2_OF := TMO.Tv_KGT60 OR DGI.Fire OR LG.Gas_N;
//LG.VOD2_TR := (LG.VOD2_ON OR LG.VOD2_TR) AND NOT LG.VOD2_OF;

LG.VOD_fault := LG.VOD1_TR AND ((TS.VOD_1_main AND AM.VOD_1_ON.fNotOn OR TS.VOD_2_main AND AM.VOD_2_ON.fNotOn) OR LG.VOD_fault AND NOT (BTN.VOD_1_main  OR  BTN.VOD_2_main));
redundancy_AM(
				AM1 := AM.VOD_1_ON //структура 1го ИМ
				AM2 := AM.VOD_2_ON //структура 2го ИМ
				AM_ON := LG.VOD1_TR //вкл. ИМ
				AM_Switch := LG.VOD_fault // ошибка ИМ, усл. неисправности
				AM_both_ON := FALSE //включить оба ИМа
				not_of := FALSE// усл. блокировки
				AM1_main := TS.VOD_1_main //усл. ИМ1 осн.
				AM2_main := TS.VOD_2_main // усл ИМ2 осн.
);
TS.VOD_1_main := NOT TS.VOD_2_main; 
TS.VOD_2_main := (BTN.VOD_2_main OR TS.VOD_2_main) AND NOT BTN.VOD_1_main;


//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VOD_1_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
//AM.VOD_1_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ВОД 2----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VOD_2_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
//AM.VOD_2_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ВМОН1----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VMON_1_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
AM.VMON_1_ON.algOn	:=	(AI_HMI.Tms_N_AVO.PV > 35.0 OR AM.VMON_1_ON.algOn) AND NOT (AI_HMI.Tms_N_AVO.PV < 30.0 OR DGI.Fire);;  //Логическая команда на откр.(вкл.)

//ВМОН4----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VMON_4_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
AM.VMON_4_ON.algOn	:=	(AI_HMI.Tms_N_AVO.PV > 40.0 OR AM.VMON_4_ON.algOn) AND NOT (AI_HMI.Tms_N_AVO.PV < 35.0 OR DGI.Fire);  //Логическая команда на откр.(вкл.)

//ВМОД2----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VMOD_2_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
AM.VMOD_2_ON.algOn	:=	(AI_HMI.Tm_in_D.PV > 35.0 OR AM.VMOD_2_ON.algOn) AND NOT (AI_HMI.Tm_in_D.PV < 30.0 OR DGI.Fire);  //Логическая команда на откр.(вкл.)

//ВМОД3----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VMOD_3_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
AM.VMOD_3_ON.algOn	:=	(AI_HMI.Tm_in_D.PV > 40.0 OR AM.VMOD_3_ON.algOn) AND NOT (AI_HMI.Tm_in_D.PV < 35.0 OR DGI.Fire);  //Логическая команда на откр.(вкл.)

//ВМОД5----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VMOD_5_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
AM.VMOD_5_ON.algOn	:=	(AI_HMI.Tm_in_D.PV > 45.0 OR AM.VMOD_5_ON.algOn) AND NOT (AI_HMI.Tm_in_D.PV < 40.0 OR DGI.Fire);  //Логическая команда на откр.(вкл.)

//ВМОД6----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.VMOD_6_ON.disableManual	:=	DGI.Fire;  //Запрет РУ
AM.VMOD_6_ON.algOn	:=	(AI_HMI.Tm_in_D.PV > 50.0 OR AM.VMOD_6_ON.algOn) AND NOT (AI_HMI.Tm_in_D.PV < 45.0 OR DGI.Fire);  //Логическая команда на откр.(вкл.)

//ТЭН МБД----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN_MBD_ON.disableManual	:=	NOT (us.Reserv AND NOT (NOT (AI_HMI.Tm_in_MBD.PV > -30.0) OR DGI.Fire OR DGI.Lm_MBD_down OR ((LG.MS_8p AND NOT (AI_HMI.Tm_in_MBD.PV < 40.0)) OR (NOT LG.MS_8p AND AI_HMI.Tm_in_MBD.PV > 25.0))));  //Запрет РУ
AM.TEN_MBD_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН1 в МБН----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN1_MBN_ON.disableManual	:=	NOT (us.Reserv AND NOT((AI_HMI.Tm_in_MBN.PV > 30.0) OR (AI_HMI.Tm_in_MBN.PV < -35.0) OR  DGI.Fire OR DGI.Lm_MBN_down));  //Запрет РУ
AM.TEN1_MBN_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН2 в МБН----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN2_MBN_ON.disableManual	:=	AM.TEN1_MBN_ON.disableManual;  //Запрет РУ
AM.TEN2_MBN_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН3 в МБН----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN3_MBN_ON.disableManual	:=	AM.TEN1_MBN_ON.disableManual;  //Запрет РУ
AM.TEN3_MBN_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН4 в МБН----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN4_MBN_ON.disableManual	:=	AM.TEN1_MBN_ON.disableManual;  //Запрет РУ
AM.TEN4_MBN_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН1 трубопроводов Н----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN1_N_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.TEN1_N_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН2 трубопроводов Н----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN2_N_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.TEN2_N_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН3 трубопроводов Н----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN3_N_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.TEN3_N_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//ТЭН4 трубопроводов Н----------------------------------------------------------------------------------------------------
//-------------1x1---------------------------------------------------------------------------------------------------------------------------------------
AM.TEN4_N_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.TEN4_N_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//Звуковуя сигнализация----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Alarm_sound_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.Alarm_sound_ON.algOn	:=	Drum_PZM.ACC[1] OR  Drum_KPK.ACC[1] OR Drum_HP.ACC[1] OR Drum_TP.ACC[1] OR Drum_APK.ACC[1] OR Drum_PBZ.ACC[1] OR Drum_APM.ACC[1];  //Логическая команда на откр.(вкл.)

//Освещение----------------------------------------------------------------------------------------------------
curr_H_Time := UINT_TO_REAL(GET_HOURS(NOW()));

//AM.Light_ON.algOn := (curr_H_Time > 0.0 AND curr_H_Time <= Ust.Light_OF) OR (curr_H_Time >= Ust.Light_ON AND curr_H_Time < 23.59);
//(curr_H_Time >= Ust.Light_ON OR AM.Light_ON.algOn) AND (curr_H_Time < Ust.Light_OF) ; //Логическая команда на И

IF Calc_AI.Light_ON < 14.0 Then Calc_AI.Light_ON := 22.0; end_IF;
IF Calc_AI.Light_OF > 12.0 Then Calc_AI.Light_OF := 5.0; end_IF;
AM.Light_ON.algOn := (curr_H_Time >= Calc_AI.Light_ON  AND curr_H_Time <= 23.0) OR (curr_H_Time >= 0.0 AND curr_H_Time <= Calc_AI.Light_OF);
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Light_ON.disableManual	:=	False;  //Запрет РУ
//AM.Light_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//Питание на клапан СК----------------------------------------------------------------------------------------------------
LG.SK_TR := (sm_startD.ACC[4] OR LG.SK_TR) AND NOT (sm_Stop.ACC[1] OR us.Reserv);//триггер
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.SK_ON.disableManual	:=	NOT ((us.Reserv OR us.KPK) AND DGI.Kr12_OF);  //Запрет РУ

TMR_OpenSK(DGI.SK_ON, ustT.OpenSK, TMO.OpenSK, TMR.OpenSK);
AM.SK_ON.algOn	:=	LG.SK_TR AND NOT TMO.OpenSK;  //Логическая команда на откр.(вкл.)
IF LG.SK_TR THEN
AM.SK_ON.fNotOff :=  False;
END_IF;
//КПГ открыть (отключить)----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
LG.KPG_OF:= us.Stop OR sm_startD.ACC[6];
LG.KPG_TR:= (sm_startD.ACC[3] OR LG.KPG_TR) AND NOT LG.KPG_OF;
TMR_KPG_1s(LG.KPG_TR AND NOT TMO.KPG_1_1s, ustT.KPG_1s, TMO.KPG_1s, TMR.KPG_1s);
TMR_KPG_1_1s(TMO.KPG_1s, ustT.KPG_1_1s, TMO.KPG_1_1s, TMR.KPG_1_1s);

//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.KPG_ON.disableManual	:=	NOT (us.Reserv);  //Запрет РУ
AM.KPG_ON.algOn	:=	LG.KPG_TR AND NOT TMO.KPG_1s;;  //Логическая команда на откр.(вкл.)

//Питание на КНО----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.U_KNO_ON.disableManual	:=	TRUE;  //Запрет РУ
AM.U_KNO_ON.algOn	:=	LG.SK_TR;  //Логическая команда на откр.(вкл.)
AM.U_KNO_ON.qHoldOn	:=	LG.KNOu_TR;
//Питание на КНО (удержание12 В)----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.U_KNO_udrj12_ON.disableManual	:=	TRUE;  //Запрет РУ
LG.KNOu_TR := (DGI.SK_ON OR LG.KNOu_TR) AND NOT (sm_Stop.ACC[1] OR us.Reserv);
AM.U_KNO_udrj12_ON.algOn	:=	LG.KNOu_TR AND LG.KNOu_TR;  //Логическая команда на откр.(вкл.)

//Питание на КАО----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.U_KAO_ON.disableManual	:=	TRUE;  //Запрет РУ

TMR_KAO_ON(LG.KAO_TR, ustT.OpenKPG, TMO.KAO_ON, TMR.KAO_ON);
LG.KAO_TR := (sm_Stop.ACC[1] OR LG.KAO_TR) AND NOT (DGI.SK_OF OR TMO.KAO_ON);
AM.U_KAO_ON.algOn	:=	LG.KAO_TR;  //Логическая команда на откр.(вкл.)

//БП плазменных воспламенителей СПВ----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
LG.BP_SPV_OF:= us.Stop OR sm_startD.ACC[6];
TMR_BP_SPV_OF(sm_startD.ACC[3], ustT.BP_SPV_OF, TMO.BP_SPV_OF, TMR.BP_SPV_OF);
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.BP_SPV_ON.disableManual	:=	NOT (us.Reserv AND NOT TMO.BP_SPV_OF AND NOT DGI.Fire);  //Запрет РУ
AM.BP_SPV_ON.algOn	:=	(sm_startD.ACC[3] OR AM.BP_SPV_ON.algOn) AND NOT LG.BP_SPV_OF;  //Логическая команда на откр.(вкл.)

//КПР1----------------------------------------------------------------------------------------------------
//-------------формирование условий-----------------------
LG.KPR1_ON := (sm_startD.ACC[1] AND LG_to_ARM.Micro_Fakel) OR us.AOss OR us.AObs;
LG.KPR1_OF := (us.AOss OR us.AObs OR us.Reserv) AND DGI.SK_OF;
LG.KPR2_OF := us.Start AND Calc_AI.N_KVD.PV > 6100.0 AND LG_to_ARM.Micro_Fakel;
TMR_KPR1_ON(LG.KPR1_OF, ustT.KPR1_ON, TMO.KPR1_ON, TMR.KPR1_ON);
TMR_KPR2_ON(LG.KPR2_OF, ustT.KPR2_ON, TMO.KPR2_ON, TMR.KPR2_ON);
LG.KPR1_TR := (LG.KPR1_ON OR LG.KPR1_TR) AND NOT (TMO.KPR1_ON OR LG.KPR2_OF);
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.KPR1_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.KPR1_ON.algOn	:=	LG.KPR1_TR;  //Логическая команда на откр.(вкл.)

//КПР2 ----------------------------------------------------------------------------------------------------
//--------------формирование условий-----------------------
LG.KPR2_TR := (LG.KPR1_ON OR LG.KPR2_TR) AND NOT (TMO.KPR1_ON OR TMO.KPR2_ON);
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.KPR2_ON.disableManual	:=	NOT us.Reserv;  //Запрет РУ
AM.KPR2_ON.algOn	:=	LG.KPR2_TR;  //Логическая команда на откр.(вкл.)

//ОРТ----------------------------------------------------------------------------------------------------
//--------------формирование условий-----------------------
TMR_ORT((us.AOss OR us.AObs), ustT.ORT, TMO.ORT, TMR.ORT);
LG.ORT_OF:= ((sm_Stop.Start AND NOT sm_Stop.Finish) AND (us.NOss OR us.NObs)) OR TMO.ORT;
LG.ORT_ON:=sm_startD.Start AND NOT sm_startD.Finish;
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.ORT_ON.disableManual	:=	NOT ((us.NOss OR us.NObs) AND DGI.SK_OF);  //Запрет РУ
AM.ORT_ON.algOn	:=	(LG.ORT_ON OR AM.ORT_ON.algOn) AND NOT LG.ORT_OF;  //Логическая команда на откр.(вкл.)

//Контроль механизмов с БС----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Check_mex_perm_ON.disableManual	:=	TRUE;  //Запрет РУ
AM.Check_mex_perm_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

//Реле управления стартерами----------------------------------------------------------------------------------------------------
//------------------формирование условий-----------------------
LG.Starter_ON := (sm_startD.ACC[1] OR Drum_HP.ACC[3] OR Drum_TP.ACC[3]) AND DGI.U380_KK;
LG.RPS_ON:=sm_startD.ACC[2] AND DGI.U380_KK;
LG.Starter_OF:= us.Stop OR sm_startD.ACC[7] OR Drum_HP.ACC[5] OR Drum_TP.ACC[5] OR us.Reserv;
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Starter_upr_ON.disableManual	:=	TRUE;  //Запрет РУ
AM.Starter_upr_ON.algOn	:=	(LG.Starter_ON OR AM.Starter_upr_ON.algOn) AND NOT LG.Starter_OF;  //Логическая команда на откр.(вкл.)

//Реле переключения скоростей ----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Speed_ON.disableManual	:=	TRUE;  //Запрет РУ
AM.Speed_ON.algOn	:= (LG.RPS_ON OR AM.Speed_ON.algOn) AND NOT LG.Starter_OF;  //Логическая команда на откр.(вкл.)

//Контроль сигнализаторов стружки ----------------------------------------------------------------------------------------------------
TMR_Check_Chips(sm_Check.ACC[1], ustT.Check_Chips, TMO.Check_Chips, TMR.Check_Chips);
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Chips_chek_alarm_ON.disableManual	:=	us.Reserv;  //Запрет РУ
AM.Chips_chek_alarm_ON.algOn	:=	sm_Check.ACC[1] AND NOT TMO.Check_Chips;  //Логическая команда на откр.(вкл.)

//Исправность ПЛК----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.PLC_wor_ON.disableManual	:=	FALSE;  //Запрет РУ //Исправность контроллера (BEO.DOut_PLC_OK формируется в приложении BEO)
AM.PLC_wor_ON.algOn	:=	BEO.DOut_PLC_OK;  //Логическая команда на откр.(вкл.)
BEO.FORCE_DO := LG.Force_DO;

//Светозвуковая сигнализация ПС----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Ind_PS_ON.disableManual	:=	TRUE;  //Запрет РУ
AM.Ind_PS_ON.algOn	:=	LG.SND_PS;  //Логическая команда на откр.(вкл.)

//Светозвуковая сигнализация АС ----------------------------------------------------------------------------------------------------
//-------------1x0---------------------------------------------------------------------------------------------------------------------------------------
AM.Ind_AS_ON.disableManual	:=	TRUE;  //Запрет РУ
AM.Ind_AS_ON.algOn	:=	LG.SND_AS;  //Логическая команда на откр.(вкл.)

//ТРК----------------------------------------------------------------------------------------------------
//-------------1x2---------------------------------------------------------------------------------------------------------------------------------------
AM.TRK_ON.disableManual	:=	NOT(us.Reserv OR LG.RO_TRK_RU); //Запрет РУ
//AM.TRK_ON.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="6C881C4A49F9C30F154CEB8A106779F8" Name="FB_AM_Universal" Comment="FB Исполнительных механизмов v1.4, 06.12.2017">
                <Variables>
                    <Variable UUID="3C05926649B6A96E6108D19CDF33CDC8" Name="AM_1Q0FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="4246E4C84224361556BC2F8F454671C2" Name="AM_2Q_FH" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="3022022C4375BECB138193AB8959E373" Name="AM_1Q1FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="0A0A58464DC16B6657C8589A3AC70FC0" Name="AM_1Q2FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="51B1E05B44E280B8E0C0A38A693AA6D4" Name="AM_2Q1FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="2A6231564E8192FC4C7EF6B18EAE7AED" Name="AM_2Q2FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="F7B0EEFB48DE7C6034D104A33F712730" Name="AM_inv1Q1FB" Comment="ИМ 1Q 1FB с командой/конечником OFF" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="3897BFC546FF4CAF950A5483A0F78C93" Name="AM_inv1Q2FB" Comment="ИМ 1Q 2FB с командой OFF и двумя конечниками" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="EF51F0ED46C35A19B5539A8715A3347C" Name="AMtype" Comment="тип ИМ" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="input" />
                    <Variable UUID="29E726794373CF4E11356598B18EF6AD" Name="AM" Comment="структура ИМ" Type="support_AM" TypeUUID="C106944B4821777BDF4444BFAF940D8C" Usage="inout" />
                    <Variable UUID="4B06BB3B42A3517F624A3CB57F0CE589" Name="algOn" Comment="команда открытия от алгоритма" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="10222E13467CF6B6A2B9A280F3C8B874" Name="algOff" Comment="команда закрытия от алгоритма" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="0CA2524642CDE7794576E1BBC97029FC" Name="iOn" Comment="сигнал (конечник) открытия" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="4F82FF4441F48A7923C7CE9F52A0979F" Name="iOff" Comment="сигнал (конечник) закрытия" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="40EB4D4E4C194BEFF4FD248753AF7250" Name="qOn" Comment="выход на открытие" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1" Name="qOff" Comment="выход на закрытие" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="3F551FAD48A665F167C8E0A7160F939A" Name="btnOn" Comment="кнопка открытия (включения)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="81BE8B5144AFF09BB7E0B7A4251CCDF9" Name="btnOff" Comment="кнопка закрытия (отключения)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="E16C82F549D80A0E7C8684904250821E" Name="modeManual" Comment="ручное управление" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="2CFDBB6B42785B053E4D6A82AC6B88C3" Name="reset" Comment="сброс блокировки поджима" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="079190FB4E459D85B11B2A8616C2EDC8" Name="delayChangeOvertimeAlert" Comment="время перестановки, при превышении которого выдается предупреждение" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="45" Usage="input" />
                    <Variable UUID="3017872B4680975178EBFBB3E8E96F8E" Name="delayQTimeout" Comment="время перестановки, при превышении которого снимается выходная команда" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="90" Usage="input" />
                    <Variable UUID="94431252436EED14E261BAA96B0E0D4F" Name="delayExtraOn" Comment="время дожима на открытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="1" Usage="input" />
                    <Variable UUID="6BA9E9CD4D8254FB62555AA664ABACE0" Name="delayExtraOff" Comment="время дожима на закрытие" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="1" Usage="input" />
                    <Variable UUID="935EADA942DDEA5431580782B97D3A76" Name="delayNotMoveAlert" Comment="задержка формирования нестрагивания" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="4" Usage="input" />
                    <Variable UUID="EE3E042949C51E7A88E6A8B25E821D23" Name="delayCircBrkAlert" Comment="задержка формирования обрыва контроля цепи" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="1" Usage="input" />
                    <Variable UUID="4694EB2041F75C169D00479567F85953" Name="cycle" Comment="цикл вызова (с)" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="4FD86A9B43F300AD9DB81D903B470D57" Name="notOn" Comment="не открыт (не включен)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="0D2D1D8C4BEFA8A237A787B0D3E2794F" Name="notOff" Comment="не закрыт (не выключен)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="9C4987BD4B26237647DE7E972A3A3C7A" Name="setOn" Comment="обобщенная команда на открытие" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="6131E6974801E51BDBFAD7B2AC63C39F" Name="setOff" Comment="обобщенная команда на закрытие" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="4BA20AD64CA697910DF70AA25AAC6A2B" Name="int_iOn" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="4B4843364174F44A102CB2B9AB40879D" Name="int_iOff" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="10045F4A4BA5DEAFB8E3949B7A69D2C5" Name="qOnPrev" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="74586366458A8F6061721C80FDBCA4CC" Name="qOffPrev" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="FB3BB2A943ED09BE3B2CB1B230AFD03F" Name="timeQOn" Comment="текущее время подачи команды открытия" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7AD37E0A4AEA08EF9769F68F31034DA0" Name="timeQOff" Comment="текущее время подачи команды закрытия" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="794F018F432AD6B45C4CB5849B9A91E9" Name="timeExtraOn" Comment="текущее время дожима открытия" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A11569334ECE874F5251E29802CD0148" Name="timeExtraOff" Comment="текущее время дожима закрытия" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="80C5D9784228A865D7A0A79323F2CB93" Name="timeCircBrkOn" Comment="текущее время КЦУ On" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9DE1B06140E31B059DEF93B73D02F98E" Name="timeCircBrkOff" Comment="текущее время КЦУ Off" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="14D05D0241C36FC6B10D3F8F242F7620" Name="changeCounter" Comment="количество попыток перевода в текущее положение" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="60FE9D40454E55844945E0BA1C003E73" Name="FRONT_BTN" Comment="передний фронт кнопки РУ" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="E48B9E8F482F96CFFD42578B46360781" Name="frBTN" Comment="передний фронт кнопки РУ" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="17283C434A0594CA88E4F78313CB2B26" Name="wasOn" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="A71FBDD445173C76F46435AEC27EB844" Name="wasOff" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="2997011349F25F3469B723A9DCFC8F1E" Name="selfOn" Comment="самопроизвольное открытие (включение)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="0FDC12F34C16F08C5C2C1D9A12AC4778" Name="selfOff" Comment="самопроизвольное закрытие (отключение)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="2B34ED2D4BDC42BEFED8CCBC1D629411" Name="init" Comment="признак инициализации" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="05CF7DA2440A1011926D0DBDFD5A655C" Name="imtState" Comment="текущее состояние" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D069F50C43CBF51B3BA9A9AB65FF99FA" Name="imt_qOn" Comment="внутренний сигнал ON (для унификации разнотипных ИМ)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="23D0818F49BCFACE0CB275AF1DB5C53E" Name="imt_qOff" Comment="внутренний сигнал OFF (для унификации разнотипных ИМ)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="AB6CBF60413EE9FBCA070F9BC6D967CC" Name="onImit" Comment="включить режим имитации" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="7850959044E97EAACCA3F0B4FAE3168D" Name="iCon" Comment="контроль цепи" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="B4D9422A4C6239304AF12FB4E63E2860" Name="iCoff" Comment="контроль цепи" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="646953534397FA1651020DA92D145E87" Name="imtChangeTime" Comment="время переключения состояния для имитатора" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" InitialValue="4" Usage="input" />
                    <Variable UUID="91B140C24000CA578A05F397F8A6F2AD" Name="I_ON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="451D044844368326683F849443B31715" Name="I_OFF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="C29D95404959B8C01A4CDEA8835A90F9" Name="I_Con" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="477C2C234ADD97742A8B1482AD5AD9AE" Name="I_Coff" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="2B94DF784C0C6AF1E27A7281570F6944" Name="Q_ON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                    <Variable UUID="B74699AF49DF78BD9C253381F5115E9A" Name="Q_OFF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                    <Variable UUID="FA64A08A4BA1A11006800581A38EC9F3" Name="Q_HoldOn" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                    <Variable UUID="0DC10F6C48022009CAD222A7F937796E" Name="frontImitOn" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="BA75DA7E4A0021231C50A3914DDEFBC9" Name="frImitOn" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="388C7F394B8C009926165B9FDE1A060D" Name="disableManual" Comment="запрет ручного режима (внутренний сигнал)" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="C97F3DFB4D84CFC009506B8BA06A1F3E" Name="unlock" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="DE62507B41D0B6CDBB1DA09508B6A69F" Name="AM_1Q1CFB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="4B35E5D6443B190D07441FBADCED57E3" Name="AM_Reg" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                </Variables>
                <ST><![CDATA[//// FB Исполнительных механизмов v1.4, 06.12.2017 ///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(* История изменений:
v1.4 - 2017.12.06 : ИМ 1Q 0FB, Добавлено описание конечников, убрана имитация

*)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// константы AMtype
AM_1Q0FB := 2; //ИМ 1Q 0FB 
AM_2Q_FH := 3; //ИМ 2Q(Fors+Hold) 2FB
AM_1Q1FB := 4; //ИМ 1Q 1FB
AM_1Q2FB := 5; //ИМ 1Q 2FB
AM_2Q1FB := 6; //ИМ 2Q 1FB
AM_2Q2FB := 7; //ИМ 2Q 2FB
AM_inv1Q1FB := 8; //ИМ 1Q 1FB с командой/конечником OFF
AM_inv1Q2FB := 9; //ИМ 1Q 2FB с командой OFF и двумя конечниками
//inv
AM_1Q1CFB := 10; //ИМ 1Q 1FB с командой ON/ конечником OF 
AM_Reg := 11; //ИМ ТРК, АПК и прчие с положением
//inv
IF TRUE(*NOT onImit*) THEN
  AM.iOn   := I_ON;
  AM.iOff  := I_OFF;
  AM.iCon  := I_Con;
  AM.iCoff := I_Coff;
END_IF; //IF NOT OnImit

// привязка к входам структуры AM
  btnOn  := AM.btnOn;
  btnOff := AM.btnOff;
  algOn  := AM.algOn;
  algOff := AM.algOff;
  modeManual := AM.modeManual;
  AM.AMtype := AMtype;  //запись типа ИМ в структуру

// инициализация задержек (если в структуре задержка не инициализирована - используем значение по-умолчанию)
IF AM.delayChangeOvertimeAlert = 0.0 THEN delayChangeOvertimeAlert := 45.0; ELSE delayChangeOvertimeAlert := AM.delayChangeOvertimeAlert; END_IF; //время перестановки, при превышении которого выдается предупреждение
IF AM.delayQTimeout = 0.0 THEN delayQTimeout := 90.0; ELSE delayQTimeout := AM.delayQTimeout; END_IF; //время перестановки, при превышении которого снимается выходная команда
(*IF AM.delayExtraOn = 0.0 THEN delayExtraOn := 1.0; ELSE*) delayExtraOn := AM.delayExtraOn; (*END_IF;*) //время дожима на открытие
(*IF AM.delayExtraOff = 0.0 THEN delayExtraOff := 1.0; ELSE*) delayExtraOff := AM.delayExtraOff; (*END_IF;*) //время дожима на закрытие
IF AM.delayNotMoveAlert = 0.0 THEN delayNotMoveAlert := 4.0; ELSE delayNotMoveAlert := AM.delayNotMoveAlert; END_IF; //задержка формирования нестрагивания
IF AM.delayCircBrkAlert = 0.0 THEN delayCircBrkAlert := 1.0; ELSE delayCircBrkAlert := AM.delayCircBrkAlert; END_IF; //задержка формирования обрыва контроля цепи

// обобщенная неисправность
  AM.fCommon := AM.fNotOn OR AM.fNotOff OR AM.fNotStart OR AM.fSelfOn OR AM.fSelfOff OR AM.fFB OR AM.fCon OR AM.fCoff;
// запрет ручного режима (внутренний сигнал)
  disableManual := AM.disableManual AND NOT (AM.fNotOn OR AM.fNotOff); // добавлено отсутствие неисправностей, для возможности ручного управления при неисправности ИМ

//** Переключатель РУЧНОГО РЕЖИМА (переключение по одному сигналу)
//*****************************************************************************************************************
FRONT_BTN(AM.btnMode, frBTN); //передний фронт кнопки сохраняем в темп (frBTN)
IF (frBTN AND AM.modeManual) OR //если есть фронт кнопки, и включен ручной режим - сброс ручного режима
	(disableManual) THEN //так же, ручной режим сбрасывается, когда он не разрешен!
	AM.modeManual := FALSE; //сброс ручного режима
	frBTN := FALSE; //сброс фронта
	AM.btnMode := FALSE; //сброс кнопки
END_IF;
//IF (frBTN AND NOT AM.modeManual) THEN //если есть фронт кнопки, и ручной режим не включен
IF (frBTN AND NOT AM.modeManual) AND NOT disableManual THEN //если есть фронт кнопки, ручной режим не включен, и нет запрета ручного режима
	AM.modeManual := TRUE; //включение ручного режима
	frBTN := FALSE; //сброс фронта
	AM.btnMode := FALSE; //сброс кнопки
END_IF;


CASE AMtype OF

2: // AM_1Q0FB *************************** ИМ 1Q 0FB ******************************************************
   // *****************************************************************************************************
// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR (btnOn AND AM.prmBtnOn) )
       OR  modeManual AND (btnOn OR qOn) AND NOT (btnOff);

// сигналы положения (конечники)
AM.iOn := AM.qOn;
AM.iOff := NOT AM.iOn;

3: // AM_2Q_FH *************************** ИМ 2Q(Fors+Hold) 2FB *******************************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; END_IF;
int_iOn := (timeExtraOn > delayExtraOn); // на время дожима - задерживаем сигналы открытия...
IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; END_IF;
int_iOff := (timeExtraOff > delayExtraOff); // ...и закрытия.

// обобщенные команды от алгоритма и от кнопок РУ
AM.qHoldOn := int_iOn AND NOT setOff; //команда "удержание"
setOn  := (modeManual AND  btnOn 
          OR NOT modeManual AND algOn  OR setOn ) 
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); // обобщенная команда: открыть
setOff := (modeManual AND btnOff
          OR NOT modeManual AND algOff OR setOff) 
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn ); // обобщенная команда: закрыть
qOn  := setOn  AND NOT int_iOn  AND timeQOn < delayQTimeout AND (changeCounter <  2   OR qOn );   // выход на ИМ: открыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) OR reset THEN changeCounter := 0;
ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; END_IF;
IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
AM.fNotStart := ((timeQOn > delayNotMoveAlert) AND (qOn AND iOff))    //на открытие
             OR ((timeQOff > delayNotMoveAlert) AND (NOT qOn AND NOT AM.qHoldOn AND iOn)); //на закрытие

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND (qOn OR AM.qHoldOn);
wasOff := (iOff OR wasOff) AND NOT (qOn OR AM.qHoldOn);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

4: // AM_1Q1FB *************************** ИМ 1Q 1FB ******************************************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR (btnOn AND AM.prmBtnOn) )
       OR  modeManual AND (btnOn OR qOn) AND NOT (btnOff);

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; END_IF;
IF     qOn THEN timeQOff := 0.0; 
ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF (NOT qOn AND iCon) OR (qOn) THEN timeCircBrkOn := 0.0;
ELSIF timeCircBrkOn < delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

5: // AM_1Q2FB *************************** ИМ 1Q 2FB ******************************************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR (btnOn AND AM.prmBtnOn) )
       OR  modeManual AND (btnOn OR qOn) AND NOT (btnOff);

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; END_IF;
IF     qOn THEN timeQOff := 0.0; 
ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
AM.fNotStart := ((timeQOn > delayNotMoveAlert) AND (qOn AND iOff))    //на открытие
             OR ((timeQOff > delayNotMoveAlert) AND (NOT qOn AND NOT AM.qHoldOn AND iOn)); //на закрытие

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF (NOT qOn AND iCon) OR (qOn) THEN timeCircBrkOn := 0.0;
ELSIF timeCircBrkOn < delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

6: // AM_2Q1FB *************************** ИМ 2Q 1FB ******************************************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; END_IF;
int_iOn := (timeExtraOn > delayExtraOn); // на время дожима - задерживаем сигналы открытия...
IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; END_IF;
int_iOff := (timeExtraOff > delayExtraOff); // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
  setOn  := (modeManual AND  btnOn 
			OR NOT modeManual AND (algOn OR (btnOn AND AM.prmBtnOn) )  OR setOn ) 
			AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); // обобщенная команда: открыть
  setOff := (modeManual AND btnOff 
			OR NOT modeManual AND (algOff OR (btnOff AND AM.prmBtnOff) ) OR setOff) 
			AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn ); // обобщенная команда: закрыть
  qOn  := setOn  AND NOT int_iOn  AND timeQOn < delayQTimeout AND (changeCounter <  2   OR qOn );   // выход на ИМ: открыть 
  qOff := setOff AND NOT int_iOff AND timeQOff< delayQTimeout AND (changeCounter > (-2) OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) OR reset THEN changeCounter := 0;
ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; END_IF;
IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF (NOT qOn AND iCon) OR (qOn) THEN timeCircBrkOn := 0.0;
ELSIF timeCircBrkOn < delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

IF (NOT qOff AND iCoff) OR (qOff) THEN timeCircBrkOff := 0.0;
ELSIF timeCircBrkOff < delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
  selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
  selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); //
  wasOn  := (iOn OR wasOn) AND NOT qOff;
  wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

7: // AM_2Q2FB *************************** ИМ 2Q 2FB ******************************************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; END_IF;
int_iOn := (timeExtraOn > delayExtraOn); // на время дожима - задерживаем сигналы открытия...
IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; END_IF;
int_iOff := (timeExtraOff > delayExtraOff); // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
setOn  := (modeManual AND  btnOn 
          OR NOT modeManual AND (algOn OR (btnOn AND AM.prmBtnOn) )  OR setOn ) 
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); // обобщенная команда: открыть
setOff := (modeManual AND btnOff 
          OR NOT modeManual AND (algOff OR (btnOff AND AM.prmBtnOff) ) OR setOff) 
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn ); // обобщенная команда: закрыть
qOn  := setOn  AND NOT int_iOn  AND timeQOn < delayQTimeout AND (changeCounter <  2   OR qOn );   // выход на ИМ: открыть 
qOff := setOff AND NOT int_iOff AND timeQOff< delayQTimeout AND (changeCounter > (-2) OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) OR reset THEN changeCounter := 0;
ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; END_IF;
IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
AM.fNotStart := ((timeQOn > delayNotMoveAlert) AND (qOn AND iOff))    //на открытие
             OR ((timeQOff > delayNotMoveAlert) AND (qOff AND iOn));   //на закрытие

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF (NOT qOn AND iCon) OR (qOn) THEN timeCircBrkOn := 0.0;
ELSIF timeCircBrkOn < delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

IF (NOT qOff AND iCoff) OR (qOff) THEN timeCircBrkOff := 0.0;
ELSIF timeCircBrkOff < delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); //
wasOn  := (iOn OR wasOn) AND NOT qOff;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

8: // AM_inv1Q1FB ************************ ИМ 1Q 1FB с командой/конечником OFF ****************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR (btnOff AND AM.prmBtnOff) )
        OR  modeManual AND (btnOff OR qOff) AND NOT (btnOn);

// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF (NOT qOff AND iCoff) OR (qOff) THEN timeCircBrkOff := 0.0;
ELSIF timeCircBrkOff < delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

9: // AM_inv1Q2FB ************************ ИМ 1Q 2FB с командой OFF/ и двумя конечниками ******************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR (btnOff AND AM.prmBtnOff) )
        OR  modeManual AND (btnOff OR qOff) AND NOT (btnOn);

// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF (NOT qOff AND iCoff) OR (qOff) THEN timeCircBrkOff := 0.0;
ELSIF timeCircBrkOff < delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

(*10: // AM_inv1Q2FB ************************ Стопорный клапан с одной командой "закрыть" ****************************
    // ******************* СК открывается механически на режиме, закрывается при подаче команды "открыть ЭМВ" ******

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR (btnOff AND AM.prmBtnOff) )
        OR  modeManual AND (btnOff OR qOff) AND NOT (btnOn);

// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF (NOT qOff AND iCoff) OR (qOff) THEN timeCircBrkOff := 0.0;
ELSIF timeCircBrkOff < delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"
*)

10: // AM_1Q1CFB *************************** ИМ 1Q 1FB ******************************************************
   // *****************************************************************************************************

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR (btnOn AND AM.prmBtnOn) )
       OR  modeManual AND (btnOn OR qOn) AND NOT (btnOff);

// накапливаем время подачи команды открытия (включения)
IF NOT qOn or LG.deblock THEN timeQOn  := 0.0; 
ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; END_IF;
IF     qOn or LG.deblock THEN timeQOff := 0.0; 
ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF (NOT qOn AND iCon) OR (qOn) THEN timeCircBrkOn := 0.0;
ELSIF timeCircBrkOn < delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn or LG.deblock);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT (iOn or LG.deblock);
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT (qOn or LG.deblock);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

END_CASE;


// Имитатор ИМ для
// FB Исполнительных механизмов Универсальный //////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
frontImitOn(onImit, frImitOn); //передний фронт onImit

IF onImit THEN //Начало имитации


IF frImitOn THEN // по переднему фронту onImit инициализация положение ИМ
  IF    (iOn AND NOT iOff) THEN imtState := imtChangeTime; // открыт
  ELSIF (iOff AND NOT iOn) THEN imtState := 0.0; //закрыт
  ELSE imtState := imtChangeTime / 2.0; // ставим в середину
  END_IF;
END_IF;

// формирование внутренних команд в соответствии с типом ИМ
IF AMtype = 1 OR AMtype = 6 OR AMtype = 7 THEN // ИМ с двумя командами
  imt_qOn  := qOn;
  imt_qOff := qOff;
ELSIF AMtype = 3 THEN // ИМ с форсировкой-удержанием
  imt_qOn  := qOn OR AM.qHoldOn;
  imt_qOff := NOT imt_qOn;
ELSIF AMtype = 8 OR AMtype = 9 THEN // для ИМ (1x1) (с командой/конечником OFF)
  imt_qOff  := qOff;
  imt_qOn := NOT qOff;
ELSE // ИМ с одной командой
  imt_qOn  := qOn;
  imt_qOff := NOT qOn;
END_IF;    

IF imt_qOn  THEN imtState := imtState + cycle; END_IF; // перемещение -> ON
IF imt_qOff THEN imtState := imtState - cycle; END_IF; // перемещение -> OFF

IF imtState > imtChangeTime THEN imtState := imtChangeTime; END_IF; // ограничение
IF imtState < 0.0 THEN imtState := 0.0; END_IF;

//концевики
IF AMtype = 4 OR AMtype = 6 THEN
  AM.iOn  := (imtState/imtChangeTime > 0.9); // формируем выход при 90% перемещения 
  AM.iOff := NOT iOn; // для ИМ 2х1
ELSIF AMtype = 8 THEN // для ИМ (1x1) (с командой/конечником OFF)
  AM.iOff  := (imtState/imtChangeTime < 0.1); 
  AM.iOn := NOT iOff; // для ИМ 2х1
ELSIF AMtype = 11 THEN // для ИМ ТРК, АПК и прочих 
  AM.iOff  := I_OFF; 
  AM.iOn :=  I_ON; 
(*ELSIF AMtype = 2 THEN // для ИМ 1х0
  AM.iOn := imt_qOn;*)
ELSIF AMtype <> 2 THEN
  AM.iOn  := (imtState/imtChangeTime > 0.9); // формируем выход при 90% перемещения
  AM.iOff := (imtState/imtChangeTime < 0.1); // формируем выход при 10% перемещения
END_IF;

//КЦУ (формируется, когда не подается команда управления)
AM.iCon  := NOT imt_qOn;
AM.iCoff := NOT imt_qOff;

(* так не получится, т.к. тогда нужно делать все конечники типа in/out, но тогда придется их все привязывать при вызове, даже если у ИМ нет какого-то конечника
// имитация дискретных сигналов
I_ON   := AM.iOn;
I_OFF  := AM.iOff;
I_Con  := AM.iCon;
I_Coff := AM.iCoff;
*)

END_IF; //Конец имитации

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//inv
IF unlock THEN 
	notOn   := FALSE;
	notOff  := FALSE;
timeQOn := 0.0;
timeQOff :=0.0;
	selfOn  := FALSE;
	selfOff := FALSE;
wasOn := FALSE;
wasOff := FALSE;
END_IF; 

// привязка к выходам структуры AM
	AM.qOn  := qOn;
	AM.qOff := qOff;
	AM.fNotOn  := notOn;
	AM.fNotOff := notOff;
	AM.fSelfOn  := selfOn;
	AM.fSelfOff := selfOff;

// передача выходных сигналов
    Q_ON     := AM.qOn;
    Q_OFF    := AM.qOff;
    Q_HoldOn := AM.qHoldOn;

// сброс кнопок РУ (откр/закр)
AM.btnOn  := FALSE;
AM.btnOff := FALSE;]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="C04905BA4CF2A506837C48AEAF84EA78" Name="FB_handling_AM">
                <Variables>
                    <Variable UUID="4FBB8E6948826978FAF124ABB30E337D" Name="AM_1Q0FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="20E7A1724180057CB4364A82FCE37A9B" Name="AM_2Q_FH" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="3B30DFC64A2C5448F40B7A8D51C3CCEF" Name="AM_1Q1FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="B69808AC4D1DE4F5516214A839174746" Name="AM_1Q2FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="E450CC1E4099E1C31E68FFB5F080F861" Name="AM_2Q1FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="981770BA4327F11893537D96102EEE90" Name="AM_2Q2FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="DC6AA162472316235B878EA26893C41D" Name="AM_inv1Q1FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="5176CF49458BF57E23CD7AB1B5D5D078" Name="AM_inv1Q2FB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="DA135F6143597C80D786F181A8D5AB80" Name="AM_1Q1CFB" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="2DFE6EA04108EFD8628C8B9F249E41F0" Name="AM_Reg" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="D95ECC5A99A64EB6915FEF23B8469D58" Name="Proc_Kr1" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="426E05280B2445B8B7B5789A7FD68593" Name="Proc_Kr1_oil" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="50C85676B4764D0BB3792F7D0E0C2795" Name="Proc_Kr2" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="CC3E262CBA0443169AB7E4B21D5DA0B0" Name="Proc_Kr2_oil" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="B7A4C20025D64A3F85C2E6E84773352B" Name="Proc_Kr4" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="27FAE52E158A4276BE24309E58624134" Name="Proc_Kr5" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="71921E881F7447EA935881A0B9ADB4AB" Name="Proc_Kr6" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="AA7E0CDC321C433296623D0B7D1E39D6" Name="Proc_Kr9" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="201065CCA9C24B6C8F8218D09ACAD3A7" Name="Proc_Kr12" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="F1F64EFAA5684A2893ECFA2CD2B19130" Name="Proc_PMNS_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="17BEC4A0CDE4451BBEB312EC25AB680E" Name="Proc_MNU_1_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="7E1230F4A1DA42668D3BD2CD187B1C9B" Name="Proc_MNU_2_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="B7AC663EC10C4DB79C554671E08407EB" Name="Proc_MNND_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="BE4A9DEC094043F8BB35F9AAE8DA947F" Name="Proc_MNOD_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="44901B8E437444A7AAE2A5439ACE9F20" Name="Proc_MNOB_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="1322E81859EA4A4384EB7782C12B211C" Name="Proc_VOD_1_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="38844CDA284C450F8622E94A64D7595C" Name="Proc_VOD_2_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="0BA09D2E8A304A30BA4B415EA59901A9" Name="Proc_VMON_1_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="EA70CCBA82084E8EB3497442F2087535" Name="Proc_VMOD_2_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="C8E8B0C28A8449928A10A553B4C70AE3" Name="Proc_VMOD_3_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="A6867F72D92E428DA1F1952D7ED1E46B" Name="Proc_VMON_4_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="0622C15E5F044EAE88604464F2FACF06" Name="Proc_VMOD_5_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="6C107AB0C2264A3289C8094A7E75EACF" Name="Proc_VMOD_6_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="EBB2441CADC6425EBD609DC7FFB76667" Name="Proc_TEN_MBD_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="22F265E8B9264DB69355C094B09C9678" Name="Proc_TEN1_MBN_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="B0CACCB05FB84B35B3FC19E09A7E5E4B" Name="Proc_TEN2_MBN_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="DE169C1E01D64D898188F603B9E26BA4" Name="Proc_TEN3_MBN_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="3F741674A66A463798D1A32DE81E757E" Name="Proc_TEN4_MBN_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="463AFC7E02904AC2964086F1D78A3C53" Name="Proc_TEN1_N_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="B32285A0817C4C2C8C4842E23A624452" Name="Proc_TEN2_N_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="3340976CD20E40A0B431527EEE67283D" Name="Proc_TEN3_N_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="C2C62E1ADB1C430F861122525EA554F4" Name="Proc_TEN4_N_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="68769A9A10584E6F895D997DDDA1FE66" Name="Proc_Alarm_sound_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="1396A812A3484C48BCDCDAE46F313577" Name="Proc_Light_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="FB1026B04AA249DAB31066CE93192070" Name="Proc_SK_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="3274B8D0163C4B45A755F8BAF99D48D4" Name="Proc_KPG_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="C03A360EB42A47D78BE4038FD3EF760F" Name="Proc_U_KNO_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="A632B8FAB2D24F98A936D7410B49168C" Name="Proc_U_KNO_udrj12_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="DAF28C4A8C9C4F7FBD356F6458584B7D" Name="Proc_U_KAO_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="558047AC72224B5BB4C4BBF692545CAB" Name="Proc_BP_SPV_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="C014EAE2BF1040D2BA09E506D27C0736" Name="Proc_KPR1_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="77F0E48EB22C447C98873E97947DC0A7" Name="Proc_KPR2_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="69E49FDABB32430EBE17E2E8BBCCD114" Name="Proc_ORT_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="99B0198219F047CDBF893747FF062652" Name="Proc_Check_mex_perm_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="9A600F98E4A24D5D81EAD8CA9F0EA69C" Name="Proc_Starter_upr_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="FE808EDEA5B849028BF50071DE6F79D8" Name="Proc_Speed_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="96A03BD6D32442DD86B711E22D8FA51D" Name="Proc_Chips_chek_alarm_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="088C5BD226D44594B8D8EF30F259FC7A" Name="Proc_Check_SAU_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="53BC9DF8A0A64A8DB03611EC609CAEF9" Name="Proc_PLC_wor_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="548EBF0AF2BC4B30B0055A31F4E6B012" Name="Proc_Ind_PS_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="4042138C48AC467BBBDBA1F5798E7E6A" Name="Proc_Ind_AS_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                    <Variable UUID="1CF4CA2261CA47D2B1E1F62A8EC35696" Name="Proc_TRK_ON" Type="FB_AM_Universal" TypeUUID="6C881C4A49F9C30F154CEB8A106779F8" Usage="internal" />
                </Variables>
                <ST><![CDATA[AM_1Q0FB := 2; //РРњ 1Q 0FB
AM_2Q_FH := 3; //РРњ 2Q(Fors+Hold) 2FB
AM_1Q1FB := 4; //РРњ 1Q 1FB
AM_1Q2FB := 5; //РРњ 1Q 2FB
AM_2Q1FB := 6; //РРњ 2Q 1FB
AM_2Q2FB := 7; //РРњ 2Q 2FB
AM_inv1Q1FB:= 8; //РРњ 1Q 1FB СЃ РєРѕРјР°РЅРґРѕР№ Р·Р°РєСЂС‹С‚СЊ
AM_inv1Q2FB := 9; //РРњ 1Q 2FB СЃ РєРѕРјР°РЅРґРѕР№/РєРѕРЅРµС‡РЅРёРєРѕРј OFF
AM_1Q1CFB := 10; //РРњ 1Q 1FB СЃ РєРѕРјР°РЅРґРѕР№ ON/ РєРѕРЅРµС‡РЅРёРєРѕРј OF
AM_Reg := 11; //РРњ РўР Рљ, РђРџРљ Рё РїСЂС‡РёРµ СЃ РїРѕР»РѕР¶РµРЅРёРµРј

IF APP_FST_SCN THEN

//Кран № 1
AM.Kr1.delayChangeOvertimeAlert := 15.0;
AM.Kr1.delayQTimeout := 90.0;
AM.Kr1.delayExtraOn := 5.0;
AM.Kr1.delayExtraOff := 5.0;
AM.Kr1.delayNotMoveAlert := 40.0;
AM.Kr1.delayCircBrkAlert := 1.0;

//Кран № 1 смазка
AM.Kr1_oil.delayChangeOvertimeAlert := 15.0;
AM.Kr1_oil.delayQTimeout := 20.0;
AM.Kr1_oil.delayExtraOn := 1.0;
AM.Kr1_oil.delayExtraOff := 1.0;
AM.Kr1_oil.delayNotMoveAlert := 5.0;
AM.Kr1_oil.delayCircBrkAlert := 1.0;

//Кран № 2
AM.Kr2.delayChangeOvertimeAlert := 15.0;
AM.Kr2.delayQTimeout := 90.0;
AM.Kr2.delayExtraOn := 5.0;
AM.Kr2.delayExtraOff := 5.0;
AM.Kr2.delayNotMoveAlert := 20.0;
AM.Kr2.delayCircBrkAlert := 1.0;

//Кран № 2 смазка
AM.Kr2_oil.delayChangeOvertimeAlert := 15.0;
AM.Kr2_oil.delayQTimeout := 20.0;
AM.Kr2_oil.delayExtraOn := 1.0;
AM.Kr2_oil.delayExtraOff := 1.0;
AM.Kr2_oil.delayNotMoveAlert := 5.0;
AM.Kr2_oil.delayCircBrkAlert := 1.0;

//Кран № 4
AM.Kr4.delayChangeOvertimeAlert := 15.0;
AM.Kr4.delayQTimeout := 20.0;
AM.Kr4.delayExtraOn := 5.0;
AM.Kr4.delayExtraOff := 5.0;
AM.Kr4.delayNotMoveAlert := 10.0;
AM.Kr4.delayCircBrkAlert := 1.0;

//Кран № 5
AM.Kr5.delayChangeOvertimeAlert := 15.0;
AM.Kr5.delayQTimeout := 20.0;
AM.Kr5.delayExtraOn := 5.0;
AM.Kr5.delayExtraOff := 5.0;
AM.Kr5.delayNotMoveAlert := 10.0;
AM.Kr5.delayCircBrkAlert := 1.0;

//Кран № 6
AM.Kr6.delayChangeOvertimeAlert := 15.0;
AM.Kr6.delayQTimeout := 40.0;
AM.Kr6.delayExtraOn := 5.0;
AM.Kr6.delayExtraOff := 5.0;
AM.Kr6.delayNotMoveAlert := 20.0;
AM.Kr6.delayCircBrkAlert := 1.0;

//Кран № 9
AM.Kr9.delayChangeOvertimeAlert := 15.0;
AM.Kr9.delayQTimeout := 20.0;
AM.Kr9.delayExtraOn := 5.0;
AM.Kr9.delayExtraOff := 5.0;
AM.Kr9.delayNotMoveAlert := 10.0;
AM.Kr9.delayCircBrkAlert := 1.0;

//Кран № 12
AM.Kr12.delayChangeOvertimeAlert := 15.0;
AM.Kr12.delayQTimeout := 20.0;
AM.Kr12.delayExtraOn := 5.0;
AM.Kr12.delayExtraOff := 5.0;
AM.Kr12.delayNotMoveAlert := 10.0;
AM.Kr12.delayCircBrkAlert := 1.0;

//ПМНС Н 
AM.PMNS_ON.delayChangeOvertimeAlert := 15.0;
AM.PMNS_ON.delayQTimeout := 20.0;
AM.PMNS_ON.delayExtraOn := 1.0;
AM.PMNS_ON.delayExtraOff := 1.0;
AM.PMNS_ON.delayNotMoveAlert := 5.0;
AM.PMNS_ON.delayCircBrkAlert := 1.0;

//МНУ (1 секция)
AM.MNU_1_ON.delayChangeOvertimeAlert := 15.0;
AM.MNU_1_ON.delayQTimeout := 20.0;
AM.MNU_1_ON.delayExtraOn := 1.0;
AM.MNU_1_ON.delayExtraOff := 1.0;
AM.MNU_1_ON.delayNotMoveAlert := 5.0;
AM.MNU_1_ON.delayCircBrkAlert := 1.0;

//МНУ (2 секция)
AM.MNU_2_ON.delayChangeOvertimeAlert := 15.0;
AM.MNU_2_ON.delayQTimeout := 20.0;
AM.MNU_2_ON.delayExtraOn := 1.0;
AM.MNU_2_ON.delayExtraOff := 1.0;
AM.MNU_2_ON.delayNotMoveAlert := 5.0;
AM.MNU_2_ON.delayCircBrkAlert := 1.0;

//МННД
AM.MNND_ON.delayChangeOvertimeAlert := 15.0;
AM.MNND_ON.delayQTimeout := 20.0;
AM.MNND_ON.delayExtraOn := 1.0;
AM.MNND_ON.delayExtraOff := 1.0;
AM.MNND_ON.delayNotMoveAlert := 5.0;
AM.MNND_ON.delayCircBrkAlert := 1.0;

//МНОД
AM.MNOD_ON.delayChangeOvertimeAlert := 15.0;
AM.MNOD_ON.delayQTimeout := 20.0;
AM.MNOD_ON.delayExtraOn := 1.0;
AM.MNOD_ON.delayExtraOff := 1.0;
AM.MNOD_ON.delayNotMoveAlert := 5.0;
AM.MNOD_ON.delayCircBrkAlert := 1.0;

//МНОБ Д
AM.MNOB_ON.delayChangeOvertimeAlert := 15.0;
AM.MNOB_ON.delayQTimeout := 20.0;
AM.MNOB_ON.delayExtraOn := 1.0;
AM.MNOB_ON.delayExtraOff := 1.0;
AM.MNOB_ON.delayNotMoveAlert := 5.0;
AM.MNOB_ON.delayCircBrkAlert := 1.0;

//ВОД 1
AM.VOD_1_ON.delayChangeOvertimeAlert := 15.0;
AM.VOD_1_ON.delayQTimeout := 20.0;
AM.VOD_1_ON.delayExtraOn := 1.0;
AM.VOD_1_ON.delayExtraOff := 1.0;
AM.VOD_1_ON.delayNotMoveAlert := 5.0;
AM.VOD_1_ON.delayCircBrkAlert := 1.0;

//ВОД 2
AM.VOD_2_ON.delayChangeOvertimeAlert := 15.0;
AM.VOD_2_ON.delayQTimeout := 20.0;
AM.VOD_2_ON.delayExtraOn := 1.0;
AM.VOD_2_ON.delayExtraOff := 1.0;
AM.VOD_2_ON.delayNotMoveAlert := 5.0;
AM.VOD_2_ON.delayCircBrkAlert := 1.0;

//ВМОН1
AM.VMON_1_ON.delayChangeOvertimeAlert := 15.0;
AM.VMON_1_ON.delayQTimeout := 20.0;
AM.VMON_1_ON.delayExtraOn := 1.0;
AM.VMON_1_ON.delayExtraOff := 1.0;
AM.VMON_1_ON.delayNotMoveAlert := 5.0;
AM.VMON_1_ON.delayCircBrkAlert := 1.0;

//ВМОД2
AM.VMOD_2_ON.delayChangeOvertimeAlert := 15.0;
AM.VMOD_2_ON.delayQTimeout := 20.0;
AM.VMOD_2_ON.delayExtraOn := 1.0;
AM.VMOD_2_ON.delayExtraOff := 1.0;
AM.VMOD_2_ON.delayNotMoveAlert := 5.0;
AM.VMOD_2_ON.delayCircBrkAlert := 1.0;

//ВМОД3
AM.VMOD_3_ON.delayChangeOvertimeAlert := 15.0;
AM.VMOD_3_ON.delayQTimeout := 20.0;
AM.VMOD_3_ON.delayExtraOn := 1.0;
AM.VMOD_3_ON.delayExtraOff := 1.0;
AM.VMOD_3_ON.delayNotMoveAlert := 5.0;
AM.VMOD_3_ON.delayCircBrkAlert := 1.0;

//ВМОН4
AM.VMON_4_ON.delayChangeOvertimeAlert := 15.0;
AM.VMON_4_ON.delayQTimeout := 20.0;
AM.VMON_4_ON.delayExtraOn := 1.0;
AM.VMON_4_ON.delayExtraOff := 1.0;
AM.VMON_4_ON.delayNotMoveAlert := 5.0;
AM.VMON_4_ON.delayCircBrkAlert := 1.0;

//ВМОД5
AM.VMOD_5_ON.delayChangeOvertimeAlert := 15.0;
AM.VMOD_5_ON.delayQTimeout := 20.0;
AM.VMOD_5_ON.delayExtraOn := 1.0;
AM.VMOD_5_ON.delayExtraOff := 1.0;
AM.VMOD_5_ON.delayNotMoveAlert := 5.0;
AM.VMOD_5_ON.delayCircBrkAlert := 1.0;

//ВМОД6
AM.VMOD_6_ON.delayChangeOvertimeAlert := 15.0;
AM.VMOD_6_ON.delayQTimeout := 20.0;
AM.VMOD_6_ON.delayExtraOn := 1.0;
AM.VMOD_6_ON.delayExtraOff := 1.0;
AM.VMOD_6_ON.delayNotMoveAlert := 5.0;
AM.VMOD_6_ON.delayCircBrkAlert := 1.0;

//ТЭН МБД
AM.TEN_MBD_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN_MBD_ON.delayQTimeout := 20.0;
AM.TEN_MBD_ON.delayExtraOn := 1.0;
AM.TEN_MBD_ON.delayExtraOff := 1.0;
AM.TEN_MBD_ON.delayNotMoveAlert := 5.0;
AM.TEN_MBD_ON.delayCircBrkAlert := 1.0;

//ТЭН1 в МБН
AM.TEN1_MBN_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN1_MBN_ON.delayQTimeout := 20.0;
AM.TEN1_MBN_ON.delayExtraOn := 1.0;
AM.TEN1_MBN_ON.delayExtraOff := 1.0;
AM.TEN1_MBN_ON.delayNotMoveAlert := 5.0;
AM.TEN1_MBN_ON.delayCircBrkAlert := 1.0;

//ТЭН2 в МБН
AM.TEN2_MBN_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN2_MBN_ON.delayQTimeout := 20.0;
AM.TEN2_MBN_ON.delayExtraOn := 1.0;
AM.TEN2_MBN_ON.delayExtraOff := 1.0;
AM.TEN2_MBN_ON.delayNotMoveAlert := 5.0;
AM.TEN2_MBN_ON.delayCircBrkAlert := 1.0;

//ТЭН3 в МБН
AM.TEN3_MBN_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN3_MBN_ON.delayQTimeout := 20.0;
AM.TEN3_MBN_ON.delayExtraOn := 1.0;
AM.TEN3_MBN_ON.delayExtraOff := 1.0;
AM.TEN3_MBN_ON.delayNotMoveAlert := 5.0;
AM.TEN3_MBN_ON.delayCircBrkAlert := 1.0;

//ТЭН4 в МБН
AM.TEN4_MBN_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN4_MBN_ON.delayQTimeout := 20.0;
AM.TEN4_MBN_ON.delayExtraOn := 1.0;
AM.TEN4_MBN_ON.delayExtraOff := 1.0;
AM.TEN4_MBN_ON.delayNotMoveAlert := 5.0;
AM.TEN4_MBN_ON.delayCircBrkAlert := 1.0;

//ТЭН1 трубопроводов Н
AM.TEN1_N_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN1_N_ON.delayQTimeout := 20.0;
AM.TEN1_N_ON.delayExtraOn := 1.0;
AM.TEN1_N_ON.delayExtraOff := 1.0;
AM.TEN1_N_ON.delayNotMoveAlert := 5.0;
AM.TEN1_N_ON.delayCircBrkAlert := 1.0;

//ТЭН2 трубопроводов Н
AM.TEN2_N_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN2_N_ON.delayQTimeout := 20.0;
AM.TEN2_N_ON.delayExtraOn := 1.0;
AM.TEN2_N_ON.delayExtraOff := 1.0;
AM.TEN2_N_ON.delayNotMoveAlert := 5.0;
AM.TEN2_N_ON.delayCircBrkAlert := 1.0;

//ТЭН3 трубопроводов Н
AM.TEN3_N_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN3_N_ON.delayQTimeout := 20.0;
AM.TEN3_N_ON.delayExtraOn := 1.0;
AM.TEN3_N_ON.delayExtraOff := 1.0;
AM.TEN3_N_ON.delayNotMoveAlert := 5.0;
AM.TEN3_N_ON.delayCircBrkAlert := 1.0;

//ТЭН4 трубопроводов Н
AM.TEN4_N_ON.delayChangeOvertimeAlert := 15.0;
AM.TEN4_N_ON.delayQTimeout := 20.0;
AM.TEN4_N_ON.delayExtraOn := 1.0;
AM.TEN4_N_ON.delayExtraOff := 1.0;
AM.TEN4_N_ON.delayNotMoveAlert := 5.0;
AM.TEN4_N_ON.delayCircBrkAlert := 1.0;

//Звуковуя сигнализация
AM.Alarm_sound_ON.delayChangeOvertimeAlert := 15.0;
AM.Alarm_sound_ON.delayQTimeout := 20.0;
AM.Alarm_sound_ON.delayExtraOn := 1.0;
AM.Alarm_sound_ON.delayExtraOff := 1.0;
AM.Alarm_sound_ON.delayNotMoveAlert := 5.0;
AM.Alarm_sound_ON.delayCircBrkAlert := 1.0;

//Освещение
AM.Light_ON.delayChangeOvertimeAlert := 15.0;
AM.Light_ON.delayQTimeout := 20.0;
AM.Light_ON.delayExtraOn := 1.0;
AM.Light_ON.delayExtraOff := 1.0;
AM.Light_ON.delayNotMoveAlert := 5.0;
AM.Light_ON.delayCircBrkAlert := 1.0;

//Питание на клапан СК
AM.SK_ON.delayChangeOvertimeAlert := 15.0;
AM.SK_ON.delayQTimeout := 20.0;
AM.SK_ON.delayExtraOn := 1.0;
AM.SK_ON.delayExtraOff := 1.0;
AM.SK_ON.delayNotMoveAlert := 5.0;
AM.SK_ON.delayCircBrkAlert := 1.0;

//КПГ открыть (отключить)
AM.KPG_ON.delayChangeOvertimeAlert := 15.0;
AM.KPG_ON.delayQTimeout := 20.0;
AM.KPG_ON.delayExtraOn := 1.0;
AM.KPG_ON.delayExtraOff := 1.0;
AM.KPG_ON.delayNotMoveAlert := 5.0;
AM.KPG_ON.delayCircBrkAlert := 1.0;

//Питание на КНО
AM.U_KNO_ON.delayChangeOvertimeAlert := 15.0;
AM.U_KNO_ON.delayQTimeout := 20.0;
AM.U_KNO_ON.delayExtraOn := 1.0;
AM.U_KNO_ON.delayExtraOff := 1.0;
AM.U_KNO_ON.delayNotMoveAlert := 5.0;
AM.U_KNO_ON.delayCircBrkAlert := 1.0;

//Питание на КНО (удержание12 В)
AM.U_KNO_udrj12_ON.delayChangeOvertimeAlert := 15.0;
AM.U_KNO_udrj12_ON.delayQTimeout := 20.0;
AM.U_KNO_udrj12_ON.delayExtraOn := 1.0;
AM.U_KNO_udrj12_ON.delayExtraOff := 1.0;
AM.U_KNO_udrj12_ON.delayNotMoveAlert := 5.0;
AM.U_KNO_udrj12_ON.delayCircBrkAlert := 1.0;

//Питание на КАО
AM.U_KAO_ON.delayChangeOvertimeAlert := 15.0;
AM.U_KAO_ON.delayQTimeout := 20.0;
AM.U_KAO_ON.delayExtraOn := 1.0;
AM.U_KAO_ON.delayExtraOff := 1.0;
AM.U_KAO_ON.delayNotMoveAlert := 5.0;
AM.U_KAO_ON.delayCircBrkAlert := 1.0;

//БП плазменных воспламенителей СПВ
AM.BP_SPV_ON.delayChangeOvertimeAlert := 15.0;
AM.BP_SPV_ON.delayQTimeout := 20.0;
AM.BP_SPV_ON.delayExtraOn := 1.0;
AM.BP_SPV_ON.delayExtraOff := 1.0;
AM.BP_SPV_ON.delayNotMoveAlert := 5.0;
AM.BP_SPV_ON.delayCircBrkAlert := 1.0;

//КПР1
AM.KPR1_ON.delayChangeOvertimeAlert := 15.0;
AM.KPR1_ON.delayQTimeout := 20.0;
AM.KPR1_ON.delayExtraOn := 1.0;
AM.KPR1_ON.delayExtraOff := 1.0;
AM.KPR1_ON.delayNotMoveAlert := 5.0;
AM.KPR1_ON.delayCircBrkAlert := 1.0;

//КПР2 
AM.KPR2_ON.delayChangeOvertimeAlert := 15.0;
AM.KPR2_ON.delayQTimeout := 20.0;
AM.KPR2_ON.delayExtraOn := 1.0;
AM.KPR2_ON.delayExtraOff := 1.0;
AM.KPR2_ON.delayNotMoveAlert := 5.0;
AM.KPR2_ON.delayCircBrkAlert := 1.0;

//ОРТ
AM.ORT_ON.delayChangeOvertimeAlert := 15.0;
AM.ORT_ON.delayQTimeout := 20.0;
AM.ORT_ON.delayExtraOn := 1.0;
AM.ORT_ON.delayExtraOff := 1.0;
AM.ORT_ON.delayNotMoveAlert := 5.0;
AM.ORT_ON.delayCircBrkAlert := 1.0;

//Контроль механизмов с БС
AM.Check_mex_perm_ON.delayChangeOvertimeAlert := 15.0;
AM.Check_mex_perm_ON.delayQTimeout := 20.0;
AM.Check_mex_perm_ON.delayExtraOn := 1.0;
AM.Check_mex_perm_ON.delayExtraOff := 1.0;
AM.Check_mex_perm_ON.delayNotMoveAlert := 5.0;
AM.Check_mex_perm_ON.delayCircBrkAlert := 1.0;

//Реле управления стартерами
AM.Starter_upr_ON.delayChangeOvertimeAlert := 15.0;
AM.Starter_upr_ON.delayQTimeout := 20.0;
AM.Starter_upr_ON.delayExtraOn := 1.0;
AM.Starter_upr_ON.delayExtraOff := 1.0;
AM.Starter_upr_ON.delayNotMoveAlert := 5.0;
AM.Starter_upr_ON.delayCircBrkAlert := 1.0;

//Реле переключения скоростей 
AM.Speed_ON.delayChangeOvertimeAlert := 15.0;
AM.Speed_ON.delayQTimeout := 20.0;
AM.Speed_ON.delayExtraOn := 1.0;
AM.Speed_ON.delayExtraOff := 1.0;
AM.Speed_ON.delayNotMoveAlert := 5.0;
AM.Speed_ON.delayCircBrkAlert := 1.0;

//Контроль сигнализаторов стружки 
AM.Chips_chek_alarm_ON.delayChangeOvertimeAlert := 15.0;
AM.Chips_chek_alarm_ON.delayQTimeout := 20.0;
AM.Chips_chek_alarm_ON.delayExtraOn := 1.0;
AM.Chips_chek_alarm_ON.delayExtraOff := 1.0;
AM.Chips_chek_alarm_ON.delayNotMoveAlert := 5.0;
AM.Chips_chek_alarm_ON.delayCircBrkAlert := 1.0;

//Исправность ПЛК
AM.PLC_wor_ON.delayChangeOvertimeAlert := 15.0;
AM.PLC_wor_ON.delayQTimeout := 20.0;
AM.PLC_wor_ON.delayExtraOn := 1.0;
AM.PLC_wor_ON.delayExtraOff := 1.0;
AM.PLC_wor_ON.delayNotMoveAlert := 5.0;
AM.PLC_wor_ON.delayCircBrkAlert := 1.0;

//Светозвуковая сигнализация ПС
AM.Ind_PS_ON.delayChangeOvertimeAlert := 15.0;
AM.Ind_PS_ON.delayQTimeout := 20.0;
AM.Ind_PS_ON.delayExtraOn := 1.0;
AM.Ind_PS_ON.delayExtraOff := 1.0;
AM.Ind_PS_ON.delayNotMoveAlert := 5.0;
AM.Ind_PS_ON.delayCircBrkAlert := 1.0;

//Светозвуковая сигнализация АС 
AM.Ind_AS_ON.delayChangeOvertimeAlert := 15.0;
AM.Ind_AS_ON.delayQTimeout := 20.0;
AM.Ind_AS_ON.delayExtraOn := 1.0;
AM.Ind_AS_ON.delayExtraOff := 1.0;
AM.Ind_AS_ON.delayNotMoveAlert := 5.0;
AM.Ind_AS_ON.delayCircBrkAlert := 1.0;

//ТРК
AM.TRK_ON.delayChangeOvertimeAlert := 15.0;
AM.TRK_ON.delayQTimeout := 20.0;
AM.TRK_ON.delayExtraOn := 1.0;
AM.TRK_ON.delayExtraOff := 1.0;
AM.TRK_ON.delayNotMoveAlert := 5.0;
AM.TRK_ON.delayCircBrkAlert := 1.0;

END_IF;

IF NOT LG.Force_DO THEN

//Кран № 1
//2x2
Proc_Kr1( AMtype := AM_2Q2FB, AM := AM.Kr1, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr1_ON
I_OFF      := DGI.Kr1_OF
I_Con      := DGI.KCU_Kr1_ON
I_Coff     := DGI.KCU_Kr1_OF
Q_ON     	=> DGO.Kr1_ON
Q_OFF     	=> DGO.Kr1_OF);

//Кран № 1 смазка
//1x0
Proc_Kr1_oil( AMtype := AM_1Q0FB, AM := AM.Kr1_oil, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Kr1_oil
I_Con      := DGI.KCU_Kr1_oil
Q_ON     	=> DGO.Kr1_oil);

//Кран № 2
//2x2
Proc_Kr2( AMtype := AM_2Q2FB, AM := AM.Kr2, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr2_ON
I_OFF      := DGI.Kr2_OF
I_Con      := DGI.KCU_Kr2_ON
I_Coff     := DGI.KCU_Kr2_OF
Q_ON     	=> DGO.Kr2_ON
Q_OFF     	=> DGO.Kr2_OF);

//Кран № 2 смазка
//1x0
Proc_Kr2_oil( AMtype := AM_1Q0FB, AM := AM.Kr2_oil, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Kr2_oil
I_Con      := DGI.KCU_Kr2_oil
Q_ON     	=> DGO.Kr2_oil);

//Кран № 4
//2x2
Proc_Kr4( AMtype := AM_2Q2FB, AM := AM.Kr4, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr4_ON
I_OFF      := DGI.Kr4_OF
I_Con      := DGI.KCU_Kr4_ON
I_Coff     := DGI.KCU_Kr4_OF
Q_ON     	=> DGO.Kr4_ON
Q_OFF     	=> DGO.Kr4_OF);

//Кран № 5
//2x2
Proc_Kr5( AMtype := AM_2Q2FB, AM := AM.Kr5, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr5_ON
I_OFF      := DGI.Kr5_OF
I_Con      := DGI.KCU_Kr5_ON
I_Coff     := DGI.KCU_Kr5_OF
Q_ON     	=> DGO.Kr5_ON
Q_OFF     	=> DGO.Kr5_OF);

//Кран № 6
//2x2
Proc_Kr6( AMtype := AM_2Q2FB, AM := AM.Kr6, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr6_ON
I_OFF      := DGI.Kr6_OF
I_Con      := DGI.KCU_Kr6_ON
I_Coff     := DGI.KCU_Kr6_OF
Q_ON     	=> DGO.Kr6_ON
Q_OFF     	=> DGO.Kr6_OF);

//Кран № 9
//2x2
Proc_Kr9( AMtype := AM_2Q2FB, AM := AM.Kr9, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr9_ON
I_OFF      := DGI.Kr9_OF
I_Con      := DGI.KCU_Kr9_ON
I_Coff     := DGI.KCU_Kr9_OF
Q_ON     	=> DGO.Kr9_ON
Q_OFF     	=> DGO.Kr9_OF);

//Кран № 12
//2x2
Proc_Kr12( AMtype := AM_2Q2FB, AM := AM.Kr12, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.Kr12_ON
I_OFF      := DGI.Kr12_OF
I_Con      := DGI.KCU_Kr12_ON
I_Coff     := DGI.KCU_Kr12_OF
Q_ON     	=> DGO.Kr12_ON
Q_OFF     	=> DGO.Kr12_OF);

//ПМНС Н 
//1x2
Proc_PMNS_ON( AMtype := AM_1Q2FB, AM := AM.PMNS_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.PMNS_ON
I_OFF      := DGI.PMNS_OF
I_Con      := TRUE
Q_ON     	=> DGO.PMNS_ON);

//МНУ (1 секция)
//1x2
Proc_MNU_1_ON( AMtype := AM_1Q2FB, AM := AM.MNU_1_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.MNU_1_ON
I_OFF      := DGI.MNU_1_OF
I_Con      := DGI.KCU_MNU_1_ON
Q_ON     	=> DGO.MNU_1_ON);

//МНУ (2 секция)
//1x2
Proc_MNU_2_ON( AMtype := AM_1Q2FB, AM := AM.MNU_2_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.MNU_2_ON
I_OFF      := DGI.MNU_2_OF
I_Con      := DGI.KCU_MNU_2_ON
Q_ON     	=> DGO.MNU_2_ON);

//МННД
//1x2
Proc_MNND_ON( AMtype := AM_1Q2FB, AM := AM.MNND_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.MNND_ON
I_OFF      := DGI.MNND_OF
I_Con      := DGI.KCU_MNND_ON
Q_ON     	=> DGO.MNND_ON);

//МНОД
//1x2
Proc_MNOD_ON( AMtype := AM_1Q2FB, AM := AM.MNOD_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.MNOD_ON
I_OFF      := DGI.MNOD_OF
I_Con      := DGI.KCU_MNOD_ON
Q_ON     	=> DGO.MNOD_ON);

//МНОБ Д
//1x2
Proc_MNOB_ON( AMtype := AM_1Q2FB, AM := AM.MNOB_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.MNOB_ON
I_OFF      := DGI.MNOB_OF
I_Con      := DGI.KCU_MNOB_D_ON
Q_ON     	=> DGO.MNOB_ON);

//ВОД 1
//1x1
Proc_VOD_1_ON( AMtype := AM_1Q1FB, AM := AM.VOD_1_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VOD_1_ON
I_Con      := DGI.KCU_VOD_1_ON
Q_ON     	=> DGO.VOD_1_ON);

//ВОД 2
//1x1
Proc_VOD_2_ON( AMtype := AM_1Q1FB, AM := AM.VOD_2_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VOD_2_ON
I_Con      := DGI.KCU_VOD_2_ON
Q_ON     	=> DGO.VOD_2_ON);

//ВМОН1
//1x1
Proc_VMON_1_ON( AMtype := AM_1Q1FB, AM := AM.VMON_1_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VMON_1_ON
I_Con      := TRUE
Q_ON     	=> DGO.VMON_1_ON);

//ВМОД2
//1x1
Proc_VMOD_2_ON( AMtype := AM_1Q1FB, AM := AM.VMOD_2_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VMOD_2_ON
I_Con      := TRUE
Q_ON     	=> DGO.VMOD_2_ON);

//ВМОД3
//1x1
Proc_VMOD_3_ON( AMtype := AM_1Q1FB, AM := AM.VMOD_3_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VMOD_3_ON
I_Con      := TRUE
Q_ON     	=> DGO.VMOD_3_ON);

//ВМОН4
//1x1
Proc_VMON_4_ON( AMtype := AM_1Q1FB, AM := AM.VMON_4_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VMON_4_ON
I_Con      := TRUE
Q_ON     	=> DGO.VMON_4_ON);

//ВМОД5
//1x1
Proc_VMOD_5_ON( AMtype := AM_1Q1FB, AM := AM.VMOD_5_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VMOD_5_ON
I_Con      := TRUE
Q_ON     	=> DGO.VMOD_5_ON);

//ВМОД6
//1x1
Proc_VMOD_6_ON( AMtype := AM_1Q1FB, AM := AM.VMOD_6_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.VMOD_6_ON
I_Con      := TRUE
Q_ON     	=> DGO.VMOD_6_ON);

//ТЭН МБД
//1x1
Proc_TEN_MBD_ON( AMtype := AM_1Q1FB, AM := AM.TEN_MBD_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN_MBD_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN_MBD_ON);

//ТЭН1 в МБН
//1x1
Proc_TEN1_MBN_ON( AMtype := AM_1Q1FB, AM := AM.TEN1_MBN_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN1_MBN_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN1_MBN_ON);

//ТЭН2 в МБН
//1x1
Proc_TEN2_MBN_ON( AMtype := AM_1Q1FB, AM := AM.TEN2_MBN_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN2_MBN_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN2_MBN_ON);

//ТЭН3 в МБН
//1x1
Proc_TEN3_MBN_ON( AMtype := AM_1Q1FB, AM := AM.TEN3_MBN_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN3_MBN_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN3_MBN_ON);

//ТЭН4 в МБН
//1x1
Proc_TEN4_MBN_ON( AMtype := AM_1Q1FB, AM := AM.TEN4_MBN_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN4_MBN_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN4_MBN_ON);

//ТЭН1 трубопроводов Н
//1x1
Proc_TEN1_N_ON( AMtype := AM_1Q1FB, AM := AM.TEN1_N_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN1_N_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN1_N_ON);

//ТЭН2 трубопроводов Н
//1x1
Proc_TEN2_N_ON( AMtype := AM_1Q1FB, AM := AM.TEN2_N_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN2_N_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN2_N_ON);

//ТЭН3 трубопроводов Н
//1x1
Proc_TEN3_N_ON( AMtype := AM_1Q1FB, AM := AM.TEN3_N_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN3_N_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN3_N_ON);

//ТЭН4 трубопроводов Н
//1x1
Proc_TEN4_N_ON( AMtype := AM_1Q1FB, AM := AM.TEN4_N_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.TEN4_N_ON
I_Con      := TRUE
Q_ON     	=> DGO.TEN4_N_ON);

//Звуковуя сигнализация
//1x0
Proc_Alarm_sound_ON( AMtype := AM_1Q0FB, AM := AM.Alarm_sound_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Alarm_sound_ON
I_Con      := TRUE
Q_ON     	=> DGO.Alarm_sound_ON);

//Освещение
//1x0
Proc_Light_ON( AMtype := AM_1Q0FB, AM := AM.Light_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Light_ON
I_Con      := TRUE
Q_ON     	=> DGO.Light_ON);

//Клапан СК
//1x0
Proc_SK_ON( AMtype := AM_1Q2FB, AM := AM.SK_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := DGI.SK_ON
I_OFF      := DGI.SK_OF
I_Con      := TRUE
Q_ON     	=> DGO.SK_ON);

//КПГ открыть (отключить)
//1x0
Proc_KPG_ON( AMtype := AM_1Q0FB, AM := AM.KPG_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.KPG_ON
I_Con      := TRUE
Q_ON     	=> DGO.KPG_ON);

//Питание на КНО
//1x0
Proc_U_KNO_ON( AMtype := AM_1Q0FB, AM := AM.U_KNO_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.U_KNO_ON
I_Con      := TRUE
Q_ON     	=> DGO.U_KNO_ON);

//Питание на КНО (удержание12 В)
//1x0
Proc_U_KNO_udrj12_ON( AMtype := AM_1Q0FB, AM := AM.U_KNO_udrj12_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.U_KNO_udrj12_ON
I_Con      := TRUE
Q_ON     	=> DGO.U_KNO_udrj12_ON);

//Питание на КАО
//1x0
Proc_U_KAO_ON( AMtype := AM_1Q0FB, AM := AM.U_KAO_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.U_KAO_ON
I_Con      := TRUE
Q_ON     	=> DGO.U_KAO_ON);

//БП плазменных воспламенителей СПВ
//1x0
Proc_BP_SPV_ON( AMtype := AM_1Q0FB, AM := AM.BP_SPV_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.BP_SPV_ON
I_Con      := TRUE
Q_ON     	=> DGO.BP_SPV_ON);

//КПР1
//1x0
Proc_KPR1_ON( AMtype := AM_1Q0FB, AM := AM.KPR1_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.KPR1_ON
I_Con      := TRUE
Q_ON     	=> DGO.KPR1_ON);

//КПР2 
//1x0
Proc_KPR2_ON( AMtype := AM_1Q0FB, AM := AM.KPR2_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.KPR2_ON
I_Con      := TRUE
Q_ON     	=> DGO.KPR2_ON);

//ОРТ
//1x0
Proc_ORT_ON( AMtype := AM_1Q0FB, AM := AM.ORT_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.ORT_ON
I_Con      := TRUE
Q_ON     	=> DGO.ORT_ON);

//Контроль механизмов с БС
//1x0
Proc_Check_mex_perm_ON( AMtype := AM_1Q0FB, AM := AM.Check_mex_perm_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Check_mex_perm_ON
I_Con      := TRUE
Q_ON     	=> DGO.Check_mex_perm_ON);

//Реле управления стартерами
//1x0
Proc_Starter_upr_ON( AMtype := AM_1Q0FB, AM := AM.Starter_upr_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Starter_upr_ON
I_Con      := TRUE
Q_ON     	=> DGO.Starter_upr_ON);

//Реле переключения скоростей 
//1x0
Proc_Speed_ON( AMtype := AM_1Q0FB, AM := AM.Speed_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Speed_ON
I_Con      := TRUE
Q_ON     	=> DGO.Speed_ON);

//Контроль сигнализаторов стружки 
//1x0
Proc_Chips_chek_alarm_ON( AMtype := AM_1Q0FB, AM := AM.Chips_chek_alarm_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Chips_chek_alarm_ON
I_Con      := TRUE
Q_ON     	=> DGO.Chips_chek_alarm_ON);


//Исправность ПЛК
//1x0
Proc_PLC_wor_ON( AMtype := AM_1Q0FB, AM := AM.PLC_wor_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.PLC_wor_ON
I_Con      := TRUE
Q_ON     	=> DGO.PLC_wor_ON);

//Светозвуковая сигнализация ПС
//1x0
Proc_Ind_PS_ON( AMtype := AM_1Q0FB, AM := AM.Ind_PS_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Ind_PS_ON
I_Con      := TRUE
Q_ON     	=> DGO.Ind_PS_ON);

//Светозвуковая сигнализация АС 
//1x0
Proc_Ind_AS_ON( AMtype := AM_1Q0FB, AM := AM.Ind_AS_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
//I_ON       := DGI.Ind_AS_ON
I_Con      := TRUE
Q_ON     	=> DGO.Ind_AS_ON);

//ТРК
//1x2
Proc_TRK_ON( AMtype := AM_Reg, AM := AM.TRK_ON, onImit := LG.IMIT_ON,   cycle := del_T, unlock := LG.deblock
I_ON       := (Calc_FR.posDG.out > 97.0)
I_OFF      := (Calc_FR.posDG.out < 3.0)
I_Con      := TRUE
//Q_ON     	=> DGO.TRK_ON
);

END_IF;

]]></ST>
            </FunctionBlock>
            <Function UUID="CDB1C5414742C80F28569F8CF32C9C53" Name="redundancy_AM" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="B531A0324ABB306E5C1576BD833F3A03" Name="AM1" Type="support_AM" TypeUUID="C106944B4821777BDF4444BFAF940D8C" Usage="inout" />
                    <Variable UUID="09AFC26C460D2FF0E3D169B3BFA1A1F0" Name="AM2" Type="support_AM" TypeUUID="C106944B4821777BDF4444BFAF940D8C" Usage="inout" />
                    <Variable UUID="3426DB20431F2C56EBAB66BE5955FDC1" Name="AM_ON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="22BBE9F648B1712B498BACB06067A7B6" Name="AM_Switch" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="C8FA9FE9480B74921F85FD8783B63DBC" Name="AM_both_ON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="4043FFEC48C3964053EDB7AD3749348C" Name="not_of" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="2F2CC3EC49B0D7DB1F3FBCABCEBE6E09" Name="AM1_main" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="786D8213407D46DEFB52D9AF03C37080" Name="AM2_main" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                </Variables>
                <ST><![CDATA[AM1.algOn := AM_both_ON OR AM1_main AND AM_ON AND NOT AM_Switch OR AM2_main AND AM_ON AND AM_Switch OR AM1_main AND AM_ON AND not_of AND AM_Switch;
AM2.algOn := AM_both_ON OR AM2_main AND AM_ON AND NOT AM_Switch OR AM1_main AND AM_ON AND AM_Switch OR AM2_main AND AM_ON AND not_of AND AM_Switch;]]></ST>
            </Function>
        </Folder>
        <Folder Name="06_APR_Link" Comment="" Data="" UUID="6D4D67204021F33F7BD3D5A0013A9845">
            <Function UUID="A68FA6F04D76BF2B93695EAC5E74C1ED" Name="APR_link" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables />
                <ST><![CDATA[Calc_AI.Compres_Rate := OUT_REAL_AS[0]; // Степень сжатия
Calc_AI.Qpr:= OUT_REAL_AS[1]; //приведенный расход
Calc_AI.Qmg:= OUT_REAL_AS[2]; //расход
Calc_AI.Ozp:= OUT_LINE_AS[5]; //ограничение запас по помпажу
//Calc_AI.Set_APK:= OUT_REAL_AS[4];  //задание на ТПК
Calc_AI.Tzp:= OUT_REAL_AS[3]; //текущий запас по помпажу
Calc_AI.Ch:= OUT_REAL_AS[6]; //счетчик хлопков
flag_from_SR.SurgeN :=  OUT_BOOL_AS[1]; // Помпаж

//del_T,										//Время цикла, сек, тип Real
//APP_FST_SCN, 								//Флаг первого скана выполнения приложения, тип Bool
//HMI_APR.Pg_in_N.PV, 						//Значение Рг до Н, тип Real, МПа
//HMI_APR.Pg_out_N.PV, 						//Значение Рг за Н, тип Real, МПа
//HMI_APR.dP_konfN.PV, 						//Значение dP на конфузоре Н, тип Real, кПа
fl_to_APR.Tin:= AI_HMI.Tg_in_N.PV; 		//Значение Тг до Н, тип Real, град
fl_to_APR.Tout:= AI_HMI.Tg_out_N.PV; 		//Значение Тг за Н, тип Real, град
//HMI_APR.Pg_in_N.Condition.fault_common,		//Отказ канала Рг до Н, тип Bool
//HMI_APR.Pg_out_N.Condition.fault_common,		//Отказ канала Рг за Н, тип Bool
//HMI_APR.dP_konfN.Condition.fault_common,		//Отказ канала dP на конфузоре Н, тип Bool
fl_to_APR.Tin_fault:= AI_HMI.Tg_in_N.Condition.fault_common OR AI_HMI.Tg_in_N.Condition.repair;		//Отказ канала Тг до Н, тип Bool
fl_to_APR.Tout_fault:= AI_HMI.Tg_out_N.Condition.fault_common OR AI_HMI.Tg_out_N.Condition.repair ;		//Отказ канала Тг за Н, тип Bool
//IN_CONST,									//Массив настроечных параметров АПР, тип Real, 70 элементов
//IN_LINE,									//Массив конфигурации линий АПР, тип Real, 10 элементов
fl_to_APR.N_ST:= Calc_FR.Nst.out;		//Обороты СТ (из регулятора, значение, не support_AI), тип Real
fl_to_APR.N_ST_fault := Calc_FR.Nst.outBrk; 	//Флаг неисправности оборотов СТ (из обработчика аналоговых сигналов), тип Bool
//fl_to_APR.RU_Zadanie_APK := Calc_AI.Set_APK_RU;								//Ручное задание открытия АПК (из SCADA), тип Real
fl_to_APR.NST_IN_FLT := Calc_FR.Nst.outBrk; 								//Флаг неисправности оборотов СТ (из РТ), тип Bool
fl_to_APR.RejimWork := us.Work ;								//Флаг работы двигателя (включение расчета рабочей точки), тип Bool
//fl_to_APR.KranAPK_RA := LG.APRK_RA;			//Флаг авт/ручн режима управления АПК, тип Bool

//fl_to_APR.Fast_Open := (sm_fillingN.ACC[1] AND NOT sm_fillingN.ACC[6]) OR sm_Stop.ACC[1] OR sm_M_K.ACC[1] OR  Drum_KPK.ACC[6] OR (sm_startD.ACC[10] AND AI_HMI.N_TN.PV > 600.0);		//сумма всех причин аварийного открытия АПК (АО, НО и т.д.) - дискретная команда, тип Bool
//fl_to_APR.Fast_Open := (sm_fillingN.ACC[1] AND NOT sm_fillingN.ACC[6]) OR sm_Stop.ACC[1];
//fl_to_APR.ZAGRUZKA_APR := NOT (sm_K_M.ACC[2] OR us.M );								//1(TRUE) - разгрузка, 0(FALSE) - загрузка - из алгоритма переходов, тип Bool
//fl_to_APR.ZAGRUZKA_APR := ZAGR_APR; 
//fl_to_APR.AM_APK_OF := (sm_fillingN.ACC[6] OR us.Reserv OR fl_to_APR.AM_APK_OF) AND NOT (fl_to_APR.Fast_Open OR (us.Reserv AND LG.APRK_RA));								//сумма всех причин необходимого закрытия АПК  (на пуске, прокрутке, пуске без контура) - дискретная команда, тип Bool
//fl_to_APR.AM_APK_OF := (sm_fillingN.ACC[6] OR sm_startD.ACC[1] OR (Drum_KPK.ACC[5] AND NOT Drum_KPK.ACC[8])) AND NOT (Calc_AI.N_TN > 500.0);

//fl_to_APR.APK_ON := DGI.APK_ON;								//АПК открыт, тип Bool
//fl_to_APR.APK_OF := DGI.APK_OF;								//АПК закрыт, тип Bool
fl_to_APR.Rejim_Mag:= us.M;								//Режим работы ГПА "Магистраль", тип Bool
fl_to_APR.Rejim_KO := us.K;								//Режим работы ГПА "Кольцо", тип Bool
fl_to_APR.BTN_APR_RESET := BTN.APR_RESET ;								//Сброс регулятора, на один скан, тип Bool
fl_to_APR.BTN_HLOP_RESET:= BTN.APR_HLOP_RESET ;								//Принудительный сброс зафиксированных хлопков, тип Bool
//Выходные значения АПР
//PIN_ROC_MAX, 								//Рассчитанное значение максимальной скорости изменения параметра Рг до Н, тип Real
//POUT_ROC_MAX, 								//Рассчитанное значение максимальной скорости изменения параметра Рг за Н, тип Real
//DP_ROC_MAX,									//Рассчитанное значение максимальной скорости изменения параметра dPг на конфузоре Н, тип Real
//OUT_REAL_AS,								//Массив аналоговых выходных значений АПР, тип Real, 20 элементов
//OUT_BOOL_AS,								//Массив дискретных выходных значений АПР, тип Bool, 20 элементов
//OUT_LINE_AS,								//Массив значений линий АПР (для отображения на SCADA), тип Real, 10 элементов
//OUT_R0820,									//Массив отладочных значений АПР, тип Real, 10 элементов
//Имимтация в АПР
fl_to_APR.LG_ONIMIT := LG.IMIT_ON;									//Флаг режима имитации, тип Bool
fl_to_APR.DP_BASE_IMIT := HMI_APR.dP_conf_N.PV;								//Начальное значение канала перепада давления на конфузоре для имитации, тип Real



]]></ST>
            </Function>
            <Function UUID="65A71EBC44B20055D042D5A6BF533B41" Name="SurgeAlert" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="856440F24CC9EB534C27809054112283" Name="dPconf" Comment="dP на конфузоре Н" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="4D1B219D4A78C96797E2B3B1EEB1B35F" Name="nCompr" Comment="Частота вращ. вала Н" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="1CFF5E204D363C440C066AA3E712EAE6" Name="maxDPconfDownSpeed" Comment="Макс. скорость падения dPconf" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="AF392EDB4F627187F2347A87F499FEC6" Name="maxNcomprUpSpeed" Comment="Макс. скорость изменения nCompr" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="CB9E72D9423FD57987D84985A210157D" Name="cycle" Comment="Цикл вызова, с" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="1BE363E74990E2CD99732AA7337ADA46" Name="init" Comment="Флаг инициализации" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="12D683DE4CB85C6D09D331B458F846B7" Name="permit" Comment="Разрешение" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="524E59194F2ABF4D0B9118AFBC603463" Name="dPconfPrev" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D669714541AF1A232BC9139D4276A7FF" Name="nComprPrev" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="84873C86428108710C98869E9860FE6E" Name="dPconfDiff" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3C26FCF847F5E7CFBF3A63AE432C2E6B" Name="nComprDiff" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                </Variables>
                <ST><![CDATA[   // В случае инициализации предыдущие значения равны текущим
  IF NOT init THEN
    dPconfPrev := dPconf;
    nComprPrev := nCompr; 
  END_IF;

  dPconfDiff := (dPconf - dPconfPrev)/cycle;
  nComprDiff := (nCompr - nComprPrev)/cycle;
  dPconfPrev := dPconf;
  nComprPrev := nCompr;
  
  SurgeAlert := (dPconfDiff < (0.0 - maxDPconfDownSpeed)) AND (nComprDiff > maxNcomprUpSpeed) AND permit;]]></ST>
            </Function>
        </Folder>
        <Folder Name="07_FR_Link" Comment="" Data="" UUID="15CCFA2C423AE35256186889A416AF6E">
            <FunctionBlock UUID="BA587BD342181E2EAFC5FF881A69F546" Name="FR_Link">
                <Variables>
                    <Variable UUID="6AC416A248A94DCCFA8509ADAF38E236" Name="turnOF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="015394514518456586D300BE34F8245B" Name="turnUP" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="19DD633B4AB427BAE5C42D8CA5759162" Name="turnDN" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="C9A87281474D58E4EC5CC5979ECAEDC5" Name="prevOgr" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="A60B8B114B4E91294F4E6A9E962D9481" Name="frontOgr" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                </Variables>
                <ST><![CDATA[// формирование входов регулЯтора
FRI.updateTun := BTN.updateTun; 												//Запись настроек регулЯтора
FRI.loadTun := BTN.loadTun;   													//Считывание настроек регулЯтора
FRI.deblock := LG.deblock;   													//Деблокировка
FRI.check := us.PZ;   															//Проверка защит
FRI.start := sm_startD.ACC[5];   														//Команда запуска двигателЯ 
FRI.stop := (us.AOss OR us.AObs OR sm_Stop.ACC[1]); 					//Команда останова
FRI.NO := us.NOss OR us.NObs;
FRI.warm := false; 																//Окончание запуска после прогрева
FRI.loLim := us.K_M OR us.M OR us.M_K; 										//Включить нижние ограничения
//Снижение режима до ХХ 6200
FRI.HH := FRS.R_work AND us.OGR AND DGI.Kr2_OF AND DGI.Kr6_ON;  //BTN.HH OR FRI.drm_Go_HH OR 

frontOgr := NOT us.OGR AND NOT prevOgr;
prevOgr := NOT 	us.OGR;	
FRI.MG := (FRS.R_work AND (frontOgr OR (sm_M_K.ACC[2] AND NOT us.OGR)) OR FRI.MG) AND NOT (FRS.contur = 2 AND FRS.Rp_MG OR us.Stop);  //Увеличение режима до НАРР  //Снижение на НАРР при К-М

turnOF := (FRI.MG OR FRI.HH OR BTN.turnOF) AND NOT (BTN.turnUP OR BTN.turnDN);
turnUP := BTN.turnUP AND NOT (BTN.turnOF OR turnOF OR FRI.MG OR FRI.HH);
turnDN := BTN.turnDN AND NOT (BTN.turnOF OR turnOF OR FRI.MG OR FRI.HH);
FRI.turnUP := FRS.R_work AND (turnUP (*OR CR_Nst_UP*) ) AND NOT turnOF; //Увеличить частоту вращениЯ
FRI.turnDN := FRS.R_work AND (turnDN (*OR CR_Nst_DN*) ) AND NOT turnOF; //Уменьшить частоту вращениЯ
FRI.DG_DU := us.Reserv ;  //ДУ дозатором
FRI.Pos_p15_VNA := DGI.Pos_p15_VNA; 						// ограничение набора мощности
FRI.Pos_m10_VNA := DGI.Pos_m10_VNA; 						// ограничение снижения мощности
FRI.SK_ON := DGI.SK_ON OR DGO.KPG_ON; 											//открытие СК или КПГ
FRI.regNst := LG_to_ARM.A_OD_ON;
FRI.regNvd := LG_to_ARM.A_ON_ON;
//Имитация
FRI.IMIT_ON := LG.IMIT_ON; //включение имитатора
FRI.IMIT_HP := (Drum_HP.ACC[3] AND NOT Drum_HP.ACC[5]) OR (sm_startD.ACC[1] AND NOT sm_startD.ACC[5]); //имитация хп
FRI.IMIT_Vibeg := us.Reserv OR Drum_HP.ACC[5] OR sm_Stop.ACC[1];
// Обработка аналоговов
// РасчетнаЯ Т воздуха на входе ГТУ (1 канал), [°C]
Calc_FR.Tv_inGTU.inBrk := AI_HMI.Tv_in_D.Condition.fault_common OR AI_HMI.Tv_in_D.Condition.repair; 		// формирование признака недостоверности сигнала
Calc_FR.Tv_inGTU.in := AI_HMI.Tv_in_D.PV; 																	// передача измеренного значениЯ на вход фильтра
// Расчетное Pтг перед мерной шайбой (1 канал), МПа
Calc_FR.Ptg_inConf.inBrk := AI_HMI.Ptg_zamer.Condition.fault_common OR AI_HMI.Ptg_zamer.Condition.repair;      // формирование признака недостоверности сигнала
Calc_FR.Ptg_inConf.in := AI_HMI.Ptg_zamer.PV; 														// передача измеренного значениЯ на вход фильтра
// Расчетное Pтг перед ДГ (1 канал), МПа
Calc_FR.Ptg_outDG.inBrk := AI_HMI.Ptg_in_BTA.Condition.fault_common OR AI_HMI.Ptg_in_BTA.Condition.fault_common; // формирование признака недостоверности сигнала
Calc_FR.Ptg_outDG.in := AI_HMI.Ptg_in_BTA.PV; // передача измеренного значениЯ на вход фильтра
//Температура топливного газа перед БТА
Calc_FR.Tg_inBTA := AI_HMI.Ttg_in_BTA.PV;
//ПБЗ
FRI.Pbz := us.PBZ;
//Микрофакельный режим
FRI.Mic := LG_to_ARM.Micro_Fakel;]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="08_Imitator" Comment="" Data="" UUID="F710EB094ABAAD689A5DF7ABE16179DE">
            <FunctionBlock UUID="DC1B475B4853798BBEEA9F96AF4BD173" Name="FB_IMIT">
                <Variables>
                    <Variable UUID="72ADB66848479A8C0883C590A2476222" Name="tmp_di" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="8F1B0F9E4A6FFC626547C2810B0FB318" Name="Proc_TMR_IMIT_ON" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="0B61C5124CF1A27EDE589285C938AC28" Name="TMO_IMIT_ON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="63977A52485DB5BD44B45E81D0FF0B9A" Name="TMR_IMIT_ON" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Usage="internal" />
                    <Variable UUID="19EC3DAF470B192B23EF448C3001CCED" Name="kx" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D162103F44987CBE7A16AA9431C85B16" Name="p_in_max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F9DAC3D8460B893BFF4CA9801DB001CC" Name="p_out_max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="903FCF174CC004583656A68B7ACB11AF" Name="n_st_max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="696C4B2A4A5976875A3ECF90B1A1414F" Name="p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="8C2643D5492356FCE11A888F4CC765D4" Name="tau" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A700BB4E459F1E2EB8F4FAA31F07B89F" Name="T_in_max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="C925C8054A5E5A2C6ABA7586258F32D5" Name="T" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F525C1B34BAD41E30885578AAB424753" Name="VGUT_TMR" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="5F7C58B54A4B4733C4B1FDB210E5F029" Name="TMO_VGUT_ON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="7C0F260F4DDFE880810671A3E112611B" Name="TMR_VGUT_ON" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Usage="internal" />
                </Variables>
                <ST><![CDATA[//========================NEW================================
Proc_TMR_IMIT_ON(LG.IMIT_ON, T#5s, TMO_IMIT_ON, TMR_IMIT_ON);
IF LG.IMIT_ON AND NOT TMO_IMIT_ON THEN

//=== Задание для выхода блока в ручном режиме =================================================================================================
AI_HMI.Tv_KGT.Manual_Target       := 0.01;//Температура под кожухом Д
//AI_HMI.Tg_in_KND_1.Manual_Target       := 0.01;//Температура 1 перед камерой сгорания (за КНД)
//AI_HMI.Tg_in_KND_2.Manual_Target       := 0.01;//Температура 2 перед камерой сгорания (за КНД)
//AI_HMI.Tg_out_TND_1.Manual_Target       := 0.01;//Температура 1 на выходе ТНД
//AI_HMI.Tg_out_TND_2.Manual_Target       := 0.01;//Температура 2 на выходе ТНД
//AI_HMI.Tg_out_TND_3.Manual_Target       := 0.01;//Температура 3 на выходе ТНД
//AI_HMI.Tg_out_TND_4.Manual_Target       := 0.01;//Температура 4 на выходе ТНД
//AI_HMI.Tg_out_TND_5.Manual_Target       := 0.01;//Температура 5 на выходе ТНД
//AI_HMI.Tg_out_TND_6.Manual_Target       := 0.01;//Температура 6 на выходе ТНД
//AI_HMI.Tg_out_TND_7.Manual_Target       := 0.01;//Температура 7 на выходе ТНД
//AI_HMI.Tg_out_TND_8.Manual_Target       := 0.01;//Температура 8 на выходе ТНД
//AI_HMI.Tg_out_TND_9.Manual_Target       := 0.01;//Температура 9 на выходе ТНД
//AI_HMI.Tg_out_TND_10.Manual_Target       := 0.01;//Температура 10 на выходе ТНД
//AI_HMI.Tg_out_TND_11.Manual_Target       := 0.01;//Температура 11 на выходе ТНД
//AI_HMI.Tg_out_TND_12.Manual_Target       := 0.01;//Температура 12 на выходе ТНД
//AI_HMI.Tg_out_TND_13.Manual_Target       := 0.01;//Температура 13 на выходе ТНД
//AI_HMI.Tg_out_TND_14.Manual_Target       := 0.01;//Температура 14 на выходе ТНД
//AI_HMI.Tg_out_TND_15.Manual_Target       := 0.01;//Температура 15 на выходе ТНД
//AI_HMI.Tg_out_TND_16.Manual_Target       := 0.01;//Температура 16 на выходе ТНД
//AI_HMI.Tg_in_TND_1.Manual_Target       := 0.01;//Температура 1 за ТНД (т.17)
//AI_HMI.Tg_in_TND_2.Manual_Target       := 0.01;//Температура 2 за ТНД (т.18)
AI_HMI.Tm_out_Per.Manual_Target       := 0.01;//Температура масла на сливе из переходника
AI_HMI.Tm_out_KVD.Manual_Target       := 0.01;//Температура масла на сливе из заднего корпуса КВД
AI_HMI.Tm_out_TND.Manual_Target       := 0.01;//Температура масла на сливе из опорного венца ТНД
AI_HMI.Tm_out_N.Manual_Target       := 0.01;//Температура масла на сливе из опорного венца ТН
AI_HMI.Tm_in_MBN.Manual_Target       := 16.0;//Температура масла в МБН
AI_HMI.Tm_in_MBD.Manual_Target       := 36.0;//Температура масла в МБД
AI_HMI.Tm_in_D.Manual_Target       := 0.01;//Температура масла на входе Д
AI_HMI.T_POD_1.Manual_Target       := 0.01;//Температура 1 подшипников промопоры
AI_HMI.T_POD_2.Manual_Target       := 0.01;//Температура 2 подшипников промопоры
AI_HMI.Tg_in_N.Manual_Target       := 0.01;//Температура газа на входе Н
AI_HMI.Tg_out_N.Manual_Target       := 0.01;//Температура газа на выходе Н
AI_HMI.T_PON.Manual_Target       := 0.01;//Температура переднего опорного подшипника Н
AI_HMI.Tp_N_opora.Manual_Target       := 0.01;//Температура опорно-упорного подшипника Н (опорная часть)
AI_HMI.Tp_N_work.Manual_Target       := 0.01;//Температура опорно-упорного подшипника Н (рабочая колодка)
AI_HMI.Tp_N_ust.Manual_Target       := 0.01;//Температура опорно-упорного подшипника Н (установочная колодка)
AI_HMI.Tms_N_AVO.Manual_Target       := 0.01;//Температура масла смазки нагнетателя после АВО
AI_HMI.T_atm.Manual_Target       := 0.01;//Температура атмосферного воздуха
AI_HMI.Tv_in_D.Manual_Target       := 0.01;//Температура воздуха на входе в двигатель
AI_HMI.T_H20_in_Ut.Manual_Target       := 0.01;//Температура воды на входе утилизатора
AI_HMI.T_H20_out_Ut.Manual_Target       := 0.01;//Температура воды на выходе утилизатора
AI_HMI.Ttg_in_BTA.Manual_Target       := 0.01;//Температура топливного газа на входе в БТА
AI_HMI.Razr_out_D.Manual_Target       := 0.01;//Разрежение воздуха на входе в двигатель
AI_HMI.Pm_D.Manual_Target       := 0.01;//Давление масла на входе в двигатель (после фильтра)
AI_HMI.Pm_N.Manual_Target       := 0.01;//Давление масла смазки Н
AI_HMI.dP_mg.Manual_Target       := 0.01;//Перепад давлений масло-газ
AI_HMI.Ptg_in_BTA.Manual_Target       := 0.01;//Давление топливного газа на входе БТА
AI_HMI.dPtg_in_filtr.Manual_Target       := 0.01;//Перепад давлений топливного газа на фильтре
HMI_APR.Pg_in_N.Manual_Target       := 0.01;//Давление газа на входе Н
AI_HMI.Ptg_zamer.Manual_Target       := 0.01;//Давление топливного газа на замерной нитке
AI_HMI.dPtg_in_diaf.Manual_Target       := 0.01;//Перепад давлений топливного газа на диафрагме
HMI_APR.Pg_out_N.Manual_Target       := 0.01;//Давление газа на выходе Н
HMI_APR.dP_conf_N.Manual_Target       := 30.01;//Перепад давлений на конфузоре
AI_HMI.P_atm.Manual_Target       := 0.01;//Давление атмосферного воздуха
AI_HMI.dPg_fors.Manual_Target       := 0.01;//Перепад давлений газа на форсунках
//AI_HMI.Pv_out_KVD.Manual_Target       := 0.01;//Давление воздуха за КВД
AI_HMI.dPm_in_filtr_N.Manual_Target       := 0.01;//Перепад давлений масла на фильтре Н (ТП-22)
AI_HMI.Lm_MBN.Manual_Target       := 0.01;//Уровень в МБН
AI_HMI.Vibr_OP_N.Manual_Target       := 0.01;//Вибросмещение ОП нагнетателя
AI_HMI.Vibr_OUP_N.Manual_Target       := 0.01;//Вибросмещение ОУП нагнетателя
AI_HMI.Vibr_KVD.Manual_Target       := 0.01;//Вибрация корпуса КВД
AI_HMI.Vibr_KND.Manual_Target       := 0.01;//Вибрация корпуса КНД
AI_HMI.Vibr_N.Manual_Target       := 0.01;//Вибрация корпуса ТН
//AI_HMI.Pos_TRK.Manual_Target       := 0.01;//Положение топливно-регулирующего клапана (ДУС)
AI_HMI.KCU_Upr_TRK.Manual_Target       := 0.01;//КЦУ. Управление топливно-регулирующим клапаном 
AI_HMI.U_osn_RKBU.Manual_Target       := 0.01;//Напряжение основного питания РК БУ
AI_HMI.U_res_RKBU.Manual_Target       := 0.01;//Напряжение резервного питания РК БУ
AI_HMI.T_PLC.Manual_Target       := 0.01;//Температура контроллера
//AI_HMI.N_KND_1.Manual_Target       := 0.01;//Частота вращения КНД канал 1
//AI_HMI.N_KVD_1.Manual_Target       := 0.01;//Частота вращения КВД канал 1
//AI_HMI.N_TN_1.Manual_Target       := 0.01;//Частота вращения ротора ТН канал 1
//AI_HMI.N_KND_2.Manual_Target       := 0.01;//Частота вращения КНД канал 2
//AI_HMI.N_KVD_2.Manual_Target       := 0.01;//Частота вращения КВД канал 2
//AI_HMI.N_TN_2.Manual_Target       := 0.01;//Частота вращения ротора ТН канал 2*)




//Убираем неисправность каналов
AI_HMI.Tv_KGT.Condition.fault_common := FALSE;//Температура под кожухом Д
//AI_HMI.Tg_in_KND_1.Condition.fault_common := FALSE;//Температура 1 перед камерой сгорания (за КНД)
//AI_HMI.Tg_in_KND_2.Condition.fault_common := FALSE;//Температура 2 перед камерой сгорания (за КНД)
//AI_HMI.Tg_out_TND_1.Condition.fault_common := FALSE;//Температура 1 на выходе ТНД
//AI_HMI.Tg_out_TND_2.Condition.fault_common := FALSE;//Температура 2 на выходе ТНД
//AI_HMI.Tg_out_TND_3.Condition.fault_common := FALSE;//Температура 3 на выходе ТНД
//AI_HMI.Tg_out_TND_4.Condition.fault_common := FALSE;//Температура 4 на выходе ТНД
//AI_HMI.Tg_out_TND_5.Condition.fault_common := FALSE;//Температура 5 на выходе ТНД
//AI_HMI.Tg_out_TND_6.Condition.fault_common := FALSE;//Температура 6 на выходе ТНД
//AI_HMI.Tg_out_TND_7.Condition.fault_common := FALSE;//Температура 7 на выходе ТНД
//AI_HMI.Tg_out_TND_8.Condition.fault_common := FALSE;//Температура 8 на выходе ТНД
//AI_HMI.Tg_out_TND_9.Condition.fault_common := FALSE;//Температура 9 на выходе ТНД
//AI_HMI.Tg_out_TND_10.Condition.fault_common := FALSE;//Температура 10 на выходе ТНД
//AI_HMI.Tg_out_TND_11.Condition.fault_common := FALSE;//Температура 11 на выходе ТНД
//AI_HMI.Tg_out_TND_12.Condition.fault_common := FALSE;//Температура 12 на выходе ТНД
//AI_HMI.Tg_out_TND_13.Condition.fault_common := FALSE;//Температура 13 на выходе ТНДPm_D
//AI_HMI.Tg_out_TND_14.Condition.fault_common := FALSE;//Температура 14 на выходе ТНД
//AI_HMI.Tg_out_TND_15.Condition.fault_common := FALSE;//Температура 15 на выходе ТНД
//AI_HMI.Tg_out_TND_16.Condition.fault_common := FALSE;//Температура 16 на выходе ТНД
//AI_HMI.Tg_in_TND_1.Condition.fault_common := FALSE;//Температура 1 за ТНД (т.17)
//AI_HMI.Tg_in_TND_2.Condition.fault_common := FALSE;//Температура 2 за ТНД (т.18)
AI_HMI.Tm_out_Per.Condition.fault_common := FALSE;//Температура масла на сливе из переходника
AI_HMI.Tm_out_KVD.Condition.fault_common := FALSE;//Температура масла на сливе из заднего корпуса КВД
AI_HMI.Tm_out_TND.Condition.fault_common := FALSE;//Температура масла на сливе из опорного венца ТНД
AI_HMI.Tm_out_N.Condition.fault_common := FALSE;//Температура масла на сливе из опорного венца ТН
AI_HMI.Tm_in_MBN.Condition.fault_common := FALSE;//Температура масла в МБН
AI_HMI.Tm_in_MBD.Condition.fault_common := FALSE;//Температура масла в МБД
AI_HMI.Tm_in_D.Condition.fault_common := FALSE;//Температура масла на входе Д
AI_HMI.T_POD_1.Condition.fault_common := FALSE;//Температура 1 подшипников промопоры
AI_HMI.T_POD_2.Condition.fault_common := FALSE;//Температура 2 подшипников промопоры
AI_HMI.Tg_in_N.Condition.fault_common := FALSE;//Температура газа на входе Н
AI_HMI.Tg_out_N.Condition.fault_common := FALSE;//Температура газа на выходе Н
AI_HMI.T_PON.Condition.fault_common := FALSE;//Температура переднего опорного подшипника Н
AI_HMI.Tp_N_opora.Condition.fault_common := FALSE;//Температура опорно-упорного подшипника Н (опорная часть)
AI_HMI.Tp_N_work.Condition.fault_common := FALSE;//Температура опорно-упорного подшипника Н (рабочая колодка)
AI_HMI.Tp_N_ust.Condition.fault_common := FALSE;//Температура опорно-упорного подшипника Н (установочная колодка)
AI_HMI.Tms_N_AVO.Condition.fault_common := FALSE;//Температура масла смазки нагнетателя после АВО
AI_HMI.T_atm.Condition.fault_common := FALSE;//Температура атмосферного воздуха
AI_HMI.Tv_in_D.Condition.fault_common := FALSE;//Температура воздуха на входе в двигатель
AI_HMI.T_H20_in_Ut.Condition.fault_common := FALSE;//Температура воды на входе утилизатора
AI_HMI.T_H20_out_Ut.Condition.fault_common := FALSE;//Температура воды на выходе утилизатора
AI_HMI.Ttg_in_BTA.Condition.fault_common := FALSE;//Температура топливного газа на входе в БТА
AI_HMI.Razr_out_D.Condition.fault_common := FALSE;//Разрежение воздуха на входе в двигатель
AI_HMI.Pm_D.Condition.fault_common := FALSE;//Давление масла на входе в двигатель (после фильтра)
AI_HMI.Pm_N.Condition.fault_common := FALSE;//Давление масла смазки Н
AI_HMI.dP_mg.Condition.fault_common := FALSE;//Перепад давлений масло-газ
AI_HMI.Ptg_in_BTA.Condition.fault_common := FALSE;//Давление топливного газа на входе БТА
AI_HMI.dPtg_in_filtr.Condition.fault_common := FALSE;//Перепад давлений топливного газа на фильтре
HMI_APR.Pg_in_N.Condition.fault_common := FALSE;//Давление газа на входе Н
AI_HMI.Ptg_zamer.Condition.fault_common := FALSE;//Давление топливного газа на замерной нитке
AI_HMI.dPtg_in_diaf.Condition.fault_common := FALSE;//Перепад давлений топливного газа на диафрагме
HMI_APR.Pg_out_N.Condition.fault_common := FALSE;//Давление газа на выходе Н
HMI_APR.dP_conf_N.Condition.fault_common := FALSE;//Перепад давлений на конфузоре
AI_HMI.P_atm.Condition.fault_common := FALSE;//Давление атмосферного воздуха
AI_HMI.dPg_fors.Condition.fault_common := FALSE;//Перепад давлений газа на форсунках
//AI_HMI.Pv_out_KVD.Condition.fault_common := FALSE;//Давление воздуха за КВД
AI_HMI.dPm_in_filtr_N.Condition.fault_common := FALSE;//Перепад давлений масла на фильтре Н (ТП-22)
AI_HMI.Lm_MBN.Condition.fault_common := FALSE;//Уровень в МБН
AI_HMI.Vibr_OP_N.Condition.fault_common := FALSE;//Вибросмещение ОП нагнетателя
AI_HMI.Vibr_OUP_N.Condition.fault_common := FALSE;//Вибросмещение ОУП нагнетателя
AI_HMI.Vibr_KVD.Condition.fault_common := FALSE;//Вибрация корпуса КВД
AI_HMI.Vibr_KND.Condition.fault_common := FALSE;//Вибрация корпуса КНД
AI_HMI.Vibr_N.Condition.fault_common := FALSE;//Вибрация корпуса ТН
//AI_HMI.Pos_TRK.Condition.fault_common := FALSE;//Положение топливно-регулирующего клапана (ДУС)
AI_HMI.KCU_Upr_TRK.Condition.fault_common := FALSE;//КЦУ. Управление топливно-регулирующим клапаном 
AI_HMI.U_osn_RKBU.Condition.fault_common := FALSE;//Напряжение основного питания РК БУ
AI_HMI.U_res_RKBU.Condition.fault_common := FALSE;//Напряжение резервного питания РК БУ
AI_HMI.T_PLC.Condition.fault_common := FALSE;//Температура контроллера
//AI_HMI.N_KND_1.Condition.fault_common := FALSE;//Частота вращения КНД канал 1
//AI_HMI.N_KVD_1.Condition.fault_common := FALSE;//Частота вращения КВД канал 1
//AI_HMI.N_TN_1.Condition.fault_common := FALSE;//Частота вращения ротора ТН канал 1
//AI_HMI.N_KND_2.Condition.fault_common := FALSE;//Частота вращения КНД канал 2
//AI_HMI.N_KVD_2.Condition.fault_common := FALSE;//Частота вращения КВД канал 2
//AI_HMI.N_TN_2.Condition.fault_common := FALSE;//Частота вращения ротора ТН канал 2

AI_HMI.Tv_KGT.Condition.down_scale := FALSE;//Температура под кожухом Д
//AI_HMI.Tg_in_KND_1.Condition.down_scale := FALSE;//Температура 1 перед камерой сгорания (за КНД)
//AI_HMI.Tg_in_KND_2.Condition.down_scale := FALSE;//Температура 2 перед камерой сгорания (за КНД)
//AI_HMI.Tg_out_TND_1.Condition.down_scale := FALSE;//Температура 1 на выходе ТНД
//AI_HMI.Tg_out_TND_2.Condition.down_scale := FALSE;//Температура 2 на выходе ТНД
//AI_HMI.Tg_out_TND_3.Condition.down_scale := FALSE;//Температура 3 на выходе ТНД
//AI_HMI.Tg_out_TND_4.Condition.down_scale := FALSE;//Температура 4 на выходе ТНД
//AI_HMI.Tg_out_TND_5.Condition.down_scale := FALSE;//Температура 5 на выходе ТНД
//AI_HMI.Tg_out_TND_6.Condition.down_scale := FALSE;//Температура 6 на выходе ТНД
//AI_HMI.Tg_out_TND_7.Condition.down_scale := FALSE;//Температура 7 на выходе ТНД
//AI_HMI.Tg_out_TND_8.Condition.down_scale := FALSE;//Температура 8 на выходе ТНД
//AI_HMI.Tg_out_TND_9.Condition.down_scale := FALSE;//Температура 9 на выходе ТНД
//AI_HMI.Tg_out_TND_10.Condition.down_scale := FALSE;//Температура 10 на выходе ТНД
//AI_HMI.Tg_out_TND_11.Condition.down_scale := FALSE;//Температура 11 на выходе ТНД
//AI_HMI.Tg_out_TND_12.Condition.down_scale := FALSE;//Температура 12 на выходе ТНД
//AI_HMI.Tg_out_TND_13.Condition.down_scale := FALSE;//Температура 13 на выходе ТНДPm_D
//AI_HMI.Tg_out_TND_14.Condition.down_scale := FALSE;//Температура 14 на выходе ТНД
//AI_HMI.Tg_out_TND_15.Condition.down_scale := FALSE;//Температура 15 на выходе ТНД
//AI_HMI.Tg_out_TND_16.Condition.down_scale := FALSE;//Температура 16 на выходе ТНД
//AI_HMI.Tg_in_TND_1.Condition.down_scale := FALSE;//Температура 1 за ТНД (т.17)
//AI_HMI.Tg_in_TND_2.Condition.down_scale := FALSE;//Температура 2 за ТНД (т.18)
AI_HMI.Tm_out_Per.Condition.down_scale := FALSE;//Температура масла на сливе из переходника
AI_HMI.Tm_out_KVD.Condition.down_scale := FALSE;//Температура масла на сливе из заднего корпуса КВД
AI_HMI.Tm_out_TND.Condition.down_scale := FALSE;//Температура масла на сливе из опорного венца ТНД
AI_HMI.Tm_out_N.Condition.down_scale := FALSE;//Температура масла на сливе из опорного венца ТН
AI_HMI.Tm_in_MBN.Condition.down_scale := FALSE;//Температура масла в МБН
AI_HMI.Tm_in_MBD.Condition.down_scale := FALSE;//Температура масла в МБД
AI_HMI.Tm_in_D.Condition.down_scale := FALSE;//Температура масла на входе Д
AI_HMI.T_POD_1.Condition.down_scale := FALSE;//Температура 1 подшипников промопоры
AI_HMI.T_POD_2.Condition.down_scale := FALSE;//Температура 2 подшипников промопоры
AI_HMI.Tg_in_N.Condition.down_scale := FALSE;//Температура газа на входе Н
AI_HMI.Tg_out_N.Condition.down_scale := FALSE;//Температура газа на выходе Н
AI_HMI.T_PON.Condition.down_scale := FALSE;//Температура переднего опорного подшипника Н
AI_HMI.Tp_N_opora.Condition.down_scale := FALSE;//Температура опорно-упорного подшипника Н (опорная часть)
AI_HMI.Tp_N_work.Condition.down_scale := FALSE;//Температура опорно-упорного подшипника Н (рабочая колодка)
AI_HMI.Tp_N_ust.Condition.down_scale := FALSE;//Температура опорно-упорного подшипника Н (установочная колодка)
AI_HMI.Tms_N_AVO.Condition.down_scale := FALSE;//Температура масла смазки нагнетателя после АВО
AI_HMI.T_atm.Condition.down_scale := FALSE;//Температура атмосферного воздуха
AI_HMI.Tv_in_D.Condition.down_scale := FALSE;//Температура воздуха на входе в двигатель
AI_HMI.T_H20_in_Ut.Condition.down_scale := FALSE;//Температура воды на входе утилизатора
AI_HMI.T_H20_out_Ut.Condition.down_scale := FALSE;//Температура воды на выходе утилизатора
AI_HMI.Ttg_in_BTA.Condition.down_scale := FALSE;//Температура топливного газа на входе в БТА
AI_HMI.Razr_out_D.Condition.down_scale := FALSE;//Разрежение воздуха на входе в двигатель
AI_HMI.Pm_D.Condition.down_scale := FALSE;//Давление масла на входе в двигатель (после фильтра)
AI_HMI.Pm_N.Condition.down_scale := FALSE;//Давление масла смазки Н
AI_HMI.dP_mg.Condition.down_scale := FALSE;//Перепад давлений масло-газ
AI_HMI.Ptg_in_BTA.Condition.down_scale := FALSE;//Давление топливного газа на входе БТА
AI_HMI.dPtg_in_filtr.Condition.down_scale := FALSE;//Перепад давлений топливного газа на фильтре
HMI_APR.Pg_in_N.Condition.down_scale := FALSE;//Давление газа на входе Н
AI_HMI.Ptg_zamer.Condition.down_scale := FALSE;//Давление топливного газа на замерной нитке
AI_HMI.dPtg_in_diaf.Condition.down_scale := FALSE;//Перепад давлений топливного газа на диафрагме
HMI_APR.Pg_out_N.Condition.down_scale := FALSE;//Давление газа на выходе Н
HMI_APR.dP_conf_N.Condition.down_scale := FALSE;//Перепад давлений на конфузоре
AI_HMI.P_atm.Condition.down_scale := FALSE;//Давление атмосферного воздуха
AI_HMI.dPg_fors.Condition.down_scale := FALSE;//Перепад давлений газа на форсунках
//AI_HMI.Pv_out_KVD.Condition.down_scale := FALSE;//Давление воздуха за КВД
AI_HMI.dPm_in_filtr_N.Condition.down_scale := FALSE;//Перепад давлений масла на фильтре Н (ТП-22)
AI_HMI.Lm_MBN.Condition.down_scale := FALSE;//Уровень в МБН
AI_HMI.Vibr_OP_N.Condition.down_scale := FALSE;//Вибросмещение ОП нагнетателя
AI_HMI.Vibr_OUP_N.Condition.down_scale := FALSE;//Вибросмещение ОУП нагнетателя
AI_HMI.Vibr_KVD.Condition.down_scale := FALSE;//Вибрация корпуса КВД
AI_HMI.Vibr_KND.Condition.down_scale := FALSE;//Вибрация корпуса КНД
AI_HMI.Vibr_N.Condition.down_scale := FALSE;//Вибрация корпуса ТН
//AI_HMI.Pos_TRK.Condition.down_scale := FALSE;//Положение топливно-регулирующего клапана (ДУС)
AI_HMI.KCU_Upr_TRK.Condition.down_scale := FALSE;//КЦУ. Управление топливно-регулирующим клапаном 
AI_HMI.U_osn_RKBU.Condition.down_scale := FALSE;//Напряжение основного питания РК БУ
AI_HMI.U_res_RKBU.Condition.down_scale := FALSE;//Напряжение резервного питания РК БУ
AI_HMI.T_PLC.Condition.down_scale := FALSE;//Температура контроллера
//AI_HMI.N_KND_1.down_scale := FALSE;//Частота вращения КНД канал 1
//AI_HMI.N_KVD_1.down_scale := FALSE;//Частота вращения КВД канал 1
//AI_HMI.N_TN_1.down_scale := FALSE;//Частота вращения ротора ТН канал 1
//AI_HMI.N_KND_2.down_scale := FALSE;//Частота вращения КНД канал 2
//AI_HMI.N_KVD_2.down_scale := FALSE;//Частота вращения КВД канал 2
//AI_HMI.N_TN_2.down_scale := FALSE;//Частота вращения ротора ТН канал 2
//=== Включение имитации для аналоговых параметров =============================================================================================

AI_HMI.Tv_KGT.Condition.simulation_on := TRUE;//Температура под кожухом Д
//AI_HMI.Tg_in_KND_1.Condition.simulation_on := TRUE;//Температура 1 перед камерой сгорания (за КНД)
//AI_HMI.Tg_in_KND_2.Condition.simulation_on := TRUE;//Температура 2 перед камерой сгорания (за КНД)
//AI_HMI.Tg_out_TND_1.Condition.simulation_on := TRUE;//Температура 1 на выходе ТНД
//AI_HMI.Tg_out_TND_2.Condition.simulation_on := TRUE;//Температура 2 на выходе ТНД
//AI_HMI.Tg_out_TND_3.Condition.simulation_on := TRUE;//Температура 3 на выходе ТНД
//AI_HMI.Tg_out_TND_4.Condition.simulation_on := TRUE;//Температура 4 на выходе ТНД
//AI_HMI.Tg_out_TND_5.Condition.simulation_on := TRUE;//Температура 5 на выходе ТНД
//AI_HMI.Tg_out_TND_6.Condition.simulation_on := TRUE;//Температура 6 на выходе ТНД
//AI_HMI.Tg_out_TND_7.Condition.simulation_on := TRUE;//Температура 7 на выходе ТНД
//AI_HMI.Tg_out_TND_8.Condition.simulation_on := TRUE;//Температура 8 на выходе ТНД
//AI_HMI.Tg_out_TND_9.Condition.simulation_on := TRUE;//Температура 9 на выходе ТНД
//AI_HMI.Tg_out_TND_10.Condition.simulation_on := TRUE;//Температура 10 на выходе ТНД
//AI_HMI.Tg_out_TND_11.Condition.simulation_on := TRUE;//Температура 11 на выходе ТНД
//AI_HMI.Tg_out_TND_12.Condition.simulation_on := TRUE;//Температура 12 на выходе ТНД
//AI_HMI.Tg_out_TND_13.Condition.simulation_on := TRUE;//Температура 13 на выходе ТНДPm_D
//AI_HMI.Tg_out_TND_14.Condition.simulation_on := TRUE;//Температура 14 на выходе ТНД
//AI_HMI.Tg_out_TND_15.Condition.simulation_on := TRUE;//Температура 15 на выходе ТНД
//AI_HMI.Tg_out_TND_16.Condition.simulation_on := TRUE;//Температура 16 на выходе ТНД
//AI_HMI.Tg_in_TND_1.Condition.simulation_on := TRUE;//Температура 1 за ТНД (т.17)
//AI_HMI.Tg_in_TND_2.Condition.simulation_on := TRUE;//Температура 2 за ТНД (т.18)
AI_HMI.Tm_out_Per.Condition.simulation_on := TRUE;//Температура масла на сливе из переходника
AI_HMI.Tm_out_KVD.Condition.simulation_on := TRUE;//Температура масла на сливе из заднего корпуса КВД
AI_HMI.Tm_out_TND.Condition.simulation_on := TRUE;//Температура масла на сливе из опорного венца ТНД
AI_HMI.Tm_out_N.Condition.simulation_on := TRUE;//Температура масла на сливе из опорного венца ТН
AI_HMI.Tm_in_MBN.Condition.simulation_on := TRUE;//Температура масла в МБН
AI_HMI.Tm_in_MBD.Condition.simulation_on := TRUE;//Температура масла в МБД
AI_HMI.Tm_in_D.Condition.simulation_on := TRUE;//Температура масла на входе Д
AI_HMI.T_POD_1.Condition.simulation_on := TRUE;//Температура 1 подшипников промопоры
AI_HMI.T_POD_2.Condition.simulation_on := TRUE;//Температура 2 подшипников промопоры
AI_HMI.Tg_in_N.Condition.simulation_on := TRUE;//Температура газа на входе Н
AI_HMI.Tg_out_N.Condition.simulation_on := TRUE;//Температура газа на выходе Н
AI_HMI.T_PON.Condition.simulation_on := TRUE;//Температура переднего опорного подшипника Н
AI_HMI.Tp_N_opora.Condition.simulation_on := TRUE;//Температура опорно-упорного подшипника Н (опорная часть)
AI_HMI.Tp_N_work.Condition.simulation_on := TRUE;//Температура опорно-упорного подшипника Н (рабочая колодка)
AI_HMI.Tp_N_ust.Condition.simulation_on := TRUE;//Температура опорно-упорного подшипника Н (установочная колодка)
AI_HMI.Tms_N_AVO.Condition.simulation_on := TRUE;//Температура масла смазки нагнетателя после АВО
AI_HMI.T_atm.Condition.simulation_on := TRUE;//Температура атмосферного воздуха
AI_HMI.Tv_in_D.Condition.simulation_on := TRUE;//Температура воздуха на входе в двигатель
AI_HMI.T_H20_in_Ut.Condition.simulation_on := TRUE;//Температура воды на входе утилизатора
AI_HMI.T_H20_out_Ut.Condition.simulation_on := TRUE;//Температура воды на выходе утилизатора
AI_HMI.Ttg_in_BTA.Condition.simulation_on := TRUE;//Температура топливного газа на входе в БТА
AI_HMI.Razr_out_D.Condition.simulation_on := TRUE;//Разрежение воздуха на входе в двигатель
AI_HMI.Pm_D.Condition.simulation_on := TRUE;//Давление масла на входе в двигатель (после фильтра)
AI_HMI.Pm_N.Condition.simulation_on := TRUE;//Давление масла смазки Н
AI_HMI.dP_mg.Condition.simulation_on := TRUE;//Перепад давлений масло-газ
AI_HMI.Ptg_in_BTA.Condition.simulation_on := TRUE;//Давление топливного газа на входе БТА
AI_HMI.dPtg_in_filtr.Condition.simulation_on := TRUE;//Перепад давлений топливного газа на фильтре
HMI_APR.Pg_in_N.Condition.simulation_on := TRUE;//Давление газа на входе Н
AI_HMI.Ptg_zamer.Condition.simulation_on := TRUE;//Давление топливного газа на замерной нитке
AI_HMI.dPtg_in_diaf.Condition.simulation_on := TRUE;//Перепад давлений топливного газа на диафрагме
HMI_APR.Pg_out_N.Condition.simulation_on := TRUE;//Давление газа на выходе Н
HMI_APR.dP_conf_N.Condition.simulation_on := TRUE;//Перепад давлений на конфузоре
AI_HMI.P_atm.Condition.simulation_on := TRUE;//Давление атмосферного воздуха
AI_HMI.dPg_fors.Condition.simulation_on := TRUE;//Перепад давлений газа на форсунках
//AI_HMI.Pv_out_KVD.Condition.simulation_on := TRUE;//Давление воздуха за КВД
AI_HMI.dPm_in_filtr_N.Condition.simulation_on := TRUE;//Перепад давлений масла на фильтре Н (ТП-22)
AI_HMI.Lm_MBN.Condition.simulation_on := TRUE;//Уровень в МБН
AI_HMI.Vibr_OP_N.Condition.simulation_on := TRUE;//Вибросмещение ОП нагнетателя
AI_HMI.Vibr_OUP_N.Condition.simulation_on := TRUE;//Вибросмещение ОУП нагнетателя
AI_HMI.Vibr_KVD.Condition.simulation_on := TRUE;//Вибрация корпуса КВД
AI_HMI.Vibr_KND.Condition.simulation_on := TRUE;//Вибрация корпуса КНД
AI_HMI.Vibr_N.Condition.simulation_on := TRUE;//Вибрация корпуса ТН
//AI_HMI.Pos_TRK.Condition.simulation_on := TRUE;//Положение топливно-регулирующего клапана (ДУС)
AI_HMI.KCU_Upr_TRK.Condition.simulation_on := TRUE;//КЦУ. Управление топливно-регулирующим клапаном 
AI_HMI.U_osn_RKBU.Condition.simulation_on := TRUE;//Напряжение основного питания РК БУ
AI_HMI.U_res_RKBU.Condition.simulation_on := TRUE;//Напряжение резервного питания РК БУ
AI_HMI.T_PLC.Condition.simulation_on := TRUE;//Температура контроллера
//AI_HMI.N_KND_1.Condition.simulation_on := TRUE;//Частота вращения КНД канал 1
//AI_HMI.N_KVD_1.Condition.simulation_on := TRUE;//Частота вращения КВД канал 1
//AI_HMI.N_TN_1.Condition.simulation_on := TRUE;//Частота вращения ротора ТН канал 1
//AI_HMI.N_KND_2.Condition.simulation_on := TRUE;//Частота вращения КНД канал 2
//AI_HMI.N_KVD_2.Condition.simulation_on := TRUE;//Частота вращения КВД канал 2
//AI_HMI.N_TN_2.Condition.simulation_on := TRUE;//Частота вращения ротора ТН канал 2

//=== Холодный резерв ==========================================================================================================================
DGI.Kr1_OF:= FALSE;
DGI.Kr2_OF:= FALSE;
DGI.Kr4_OF:= FALSE;
DGI.Kr6_OF:= FALSE;
DGI.Kr12_OF:= FALSE;
DGI.Kr9_ON:= FALSE;
DGI.SK_OF:= FALSE;
LG.Alarm_msg:= FALSE;
DGI.Gas_N:= FALSE;
//Calc_AI.N_KND:= FALSE;
DGI.Kr5_ON:= FALSE;
DGI.Kr5_OF:= FALSE;

//=== Горячий резерв ==========================================================================================================================
DGI.U380_KK:= TRUE;
DGI.PMNS_ON:= FALSE;
DGI.U_MNU_1:= TRUE;
DGI.U_MNU_2:= TRUE;
DGI.U_PMNS := TRUE;
DGI.Check_U_DC220:= FALSE;
DGI.Check_U_AC220:= FALSE;
DGI.Chec_Ukr_110:= FALSE;
DGI.Lm_MBN_down:= FALSE;
DGI.Lm_MBD_down:= FALSE;
//AITm_in_MBN:= FALSE;
//AITg_out_N:= FALSE;
DGI.Door_SAU_open:= FALSE;
//LG.Conect_PRU_fault:= FALSE;
//AITm_in_MBD:= FALSE;
//AITm_in_MBD:= FALSE;
DGI.Fire:= FALSE;
//LG.Fire_no_work:= FALSE;
LG.U_SAU_fault:= FALSE;
LG.AI_fault:= FALSE;
LG.IM_fault:= FALSE;
LG.Def_fault:= FALSE;
LG.DI_fault:= FALSE;

//=== Положение кранов =========================================================================================================================
DGI.Kr1_OF := TRUE;
DGI.Kr2_OF := TRUE;
DGI.Kr4_OF := TRUE;
DGI.Kr5_ON := TRUE;
DGI.Kr6_OF := TRUE;
DGI.Kr9_ON := TRUE;
DGI.Kr12_OF := TRUE;
DGI.SK_OF := TRUE;

//=== Питание ==================================================================================================================================
DGI.Check_U_AC220 := TRUE;//Контроль основного питания РК БУ ~220 В
DGI.Check_U_DC220 := TRUE;//Контроль резервного питания РК БУ =220 В
DGI.Check_UZIP := TRUE;//Контроль исправности разрядников
DGI.QF_ON := TRUE;//Автоматы питания включены
DGI.Check_U_DC220_BEO_osn := TRUE;//Контроль основного питания БЭАО ~220 В
DGI.Check_U_DC220_BEO_rez := TRUE;//Контроль резервного питания БЭАО =220 В
DGI.Check_U_AI_Tp := TRUE;//Контроль питания терминальных панелей AI
DGI.Check_U_DI_Tp := TRUE;//Контроль питания терминальных панелей DI
DGI.Check_U_D0_Tp := TRUE;//Контроль питания терминальных панелей DO
DGI.Check_U_DC24_PLC_osn := TRUE;//Исправность основного ИП =24В ПЛК
DGI.Check_U_DC24_PLC_rez := TRUE;//Исправность резервного ИП =24В ПЛК
DGI.Check_U_DC24_VU_osn := TRUE;//Исправность основного ИП =24В внутренних устройств
DGI.Check_U_DC24_VU_rez := TRUE;//Исправность резервного ИП =24В внутренних устройств
DGI.Check_U_DC24_AI_osn := TRUE;//Исправность основного ИП =24В аналоговых входов
DGI.Check_U_DC24_AI_rez := TRUE;//Исправность резервного ИП =24В аналоговых входов
DGI.Check_U_DC24_DI_osn := TRUE;//Исправность основного ИП =24В DI, (внеш.)
DGI.Check_U_DC24_DI_rez := TRUE;//Исправность резервного ИП =24В DI, (внеш.)
DGI.Check_U_DC24_VU_1_osn := TRUE;//Исправность основного ИП =24В внешних устройств
DGI.Check_U_DC24_VU_1_rez := TRUE;//Исправность резервного ИП =24В внешних устройств
DGI.Check_U_DC24_BEO_osn := TRUE;//Исправность основного ИП =24В БЭО, РПКУ
DGI.Check_U_DC24_BEO_rez := TRUE;//Исправность резервного ИП =24В БЭО , РПКУ
DGI.But_BEO_ON := FALSE;//Кнопка «ЭАО» нажата
DGI.KCD_But_BEO_ON := TRUE;//КЦД. Кнопка «ЭАО» нажата
DGI.But_AO_ON := FALSE;//Кнопка «АО ГПА» нажата
DGI.KCD_But_AO_ON := TRUE;//КЦД. Кнопка «АО ГПА» нажата
DGI.But_NO_ON := FALSE;//Кнопка «НО ГПА» нажата
DGI.BEO_ready := TRUE;//Готовность БЭО
DGI.But_Kvit_ON := TRUE;//Кнопка «Квитирование» нажата
DGI.BEO_work := FALSE;//БЭО работает
DGI.Check_U_osn_BUSHD220 := TRUE;//Контроль основного питания БУШД ~220 В
DGI.Check_U_osn_BUSHD24 := TRUE;//Контроль резервного питания БУШД =24 В
DGI.Chec_Ukr_110 := TRUE;//Контроль питания кранов =110 В
DGI.Check_U_PRU24 := TRUE;//Контроль питания ПРУ =24 В
DGI.Check_Uvibr24 := TRUE;//Контроль питания датчиков уровня и вибрации =24 В

//--------------------------------------------
END_IF;

//=== Исправность диагностики ==================================================================================================================
Diag_KM04.A1_1:= WORD#0; 
Diag_KM04.A1_2:= WORD#0;
Diag_KM04.A1_3:= WORD#0;
Diag_KM04.A1_4:= WORD#0;
Diag_KM04.A1_5:= WORD#0;
Diag_KM04.A1_6:= WORD#0;
Diag_KM04.A1_7:= WORD#0;
Diag_KM04.A1_8:= WORD#0;
Diag_KM04.A1_9:= WORD#0;
Diag_KM04.A1_10:= WORD#0;



IF LG.IMIT_ON (*AND LG.Force_DI *)THEN 
DGI.KCD_Kr1_ON := TRUE;
DGI.KCD_Kr1_OF := TRUE;
DGI.KCD_Kr2_ON := TRUE;
DGI.KCD_Kr2_OF := TRUE;
DGI.KCD_Kr4_ON := TRUE;
DGI.KCD_Kr4_OF := TRUE;
DGI.KCD_Kr5_ON := TRUE;
DGI.KCD_Kr5_OF := TRUE;
DGI.KCD_Kr6_ON := TRUE;
DGI.KCD_Kr6_OF := TRUE;
DGI.KCD_Kr9_ON := TRUE;
DGI.KCD_Kr9_OF := TRUE;
DGI.KCD_Kr12_ON := TRUE;
DGI.KCD_Kr12_OF := TRUE;
DGI.KCD_dPmg := TRUE;
DGI.KCD_Sdvig_N_ahead := TRUE;
DGI.KCD_Sdvig_N_back := TRUE;
DGI.KCD_Pomp_N := TRUE;
DGI.KCD_Pm_in_D_alarm_low := TRUE;
DGI.KCD_Pm_in_D_003 := TRUE;
DGI.KCD_Pm_MNOD_003 := TRUE;
DGI.KCD_Lm_MBD_alarm := TRUE;
DGI.KCD_ORT_alarm := TRUE;
DGI.KCD_Gas_N := TRUE;
DGI.KCD_Fire := TRUE;
DGI.KCD_AO_btn := TRUE;
DGI.KCD_AO_SAU := TRUE;
DGI.KCD_But_BEO_ON := TRUE;
DGI.KCD_But_AO_ON := TRUE;

DGI.KCU_Kr1_ON := TRUE;
DGI.KCU_Kr1_OF := TRUE;
DGI.KCU_Kr1_oil := TRUE;
DGI.KCU_Kr2_ON := TRUE;
DGI.KCU_Kr2_OF := TRUE;
DGI.KCU_Kr2_oil := TRUE;
DGI.KCU_Kr4_ON := TRUE;
DGI.KCU_Kr4_OF := TRUE;
DGI.KCU_Kr5_ON := TRUE;
DGI.KCU_Kr5_OF := TRUE;
DGI.KCU_Kr6_ON := TRUE;
DGI.KCU_Kr6_OF := TRUE;
DGI.KCU_Kr9_ON := TRUE;
DGI.KCU_Kr9_OF := TRUE;
DGI.KCU_Kr12_ON := TRUE;
DGI.KCU_Kr12_OF := TRUE;
DGI.KCU_PMNS_OM := TRUE;
DGI.KCU_MNU_1_ON := TRUE;
DGI.KCU_MNU_2_ON := TRUE;
DGI.KCU_MNND_ON := TRUE;
DGI.KCU_MNOD_ON := TRUE;
DGI.KCU_MNOB_D_ON := TRUE;
DGI.KCU_VOD_1_ON := TRUE;
DGI.KCU_VOD_2_ON := TRUE;


END_IF;

// Кнопка "Форсировать DO"
IF LG.IMIT_ON AND LG.Force_DO THEN 
END_IF;
//------------------------------------------------------------------
IF LG.IMIT_ON AND TMO_IMIT_ON THEN
//=== Имитация работы механизмов ===============================================================================================================
DGI.Kr1_ON := AM.Kr1.iOn;//Кран № 1 открыт
DGI.Kr1_OF := AM.Kr1.iOff;//Кран № 1 закрыт
DGI.Kr2_ON := AM.Kr2.iOn;//Кран № 2 открыт
DGI.Kr2_OF := AM.Kr2.iOff;//Кран № 2 закрыт
DGI.Kr4_ON := AM.Kr4.iOn;//Кран № 4 открыт
DGI.Kr4_OF := AM.Kr4.iOff;//Кран № 4 закрыт
DGI.Kr5_ON := AM.Kr5.iOn;//Кран № 5 открыт
DGI.Kr5_OF := AM.Kr5.iOff;//Кран № 5 закрыт
DGI.Kr6_ON := AM.Kr6.iOn;//Кран № 6 открыт
DGI.Kr6_OF := AM.Kr6.iOff;//Кран № 6 закрыт
DGI.Kr9_ON := AM.Kr9.iOn;//Кран № 9 открыт
DGI.Kr9_OF := AM.Kr9.iOff;//Кран № 9 закрыт
DGI.Kr12_ON := AM.Kr12.iOn;//Кран № 12 открыт
DGI.Kr12_OF := AM.Kr12.iOff;//Кран № 12 закрыт
DGI.PMNS_ON := AM.PMNS_ON.iOn;//ПМНС Н
DGI.PMNS_OF := NOT DGI.PMNS_ON;
DGI.MNU_1_ON := AM.MNU_1_ON.iOn;//МНУ (1 секция)
DGI.MNU_1_OF := NOT DGI.MNU_1_ON;
DGI.MNU_2_ON := AM.MNU_2_ON.iOn;//МНУ (2 секция)
DGI.MNU_2_OF := NOT DGI.MNU_2_ON;
DGI.MNND_ON := AM.MNND_ON.iOn;//МННД
DGI.MNND_OF := NOT DGI.MNND_ON;
DGI.MNOD_ON := AM.MNOD_ON.iOn;//МНОД
DGI.MNOD_OF := NOT DGI.MNOD_ON;
DGI.MNOB_ON := AM.MNOB_ON.iOn;//МНОБ Д
DGI.MNOB_OF := NOT DGI.MNOB_ON;
DGI.VOD_1_ON := AM.VOD_1_ON.iOn;//ВОД 1
DGI.VOD_2_ON := AM.VOD_2_ON.iOn;//ВОД 2
DGI.VMON_1_ON := AM.VMON_1_ON.iOn;//ВМОН1
DGI.VMOD_2_ON := AM.VMOD_2_ON.iOn;//ВМОД2
DGI.VMOD_3_ON := AM.VMOD_3_ON.iOn;//ВМОД3
DGI.VMON_4_ON := AM.VMON_4_ON.iOn;//ВМОН4
DGI.VMOD_5_ON := AM.VMOD_5_ON.iOn;//ВМОД5
DGI.VMOD_6_ON := AM.VMOD_6_ON.iOn;//ВМОД6
DGI.TEN_MBD_ON := AM.TEN_MBD_ON.iOn;//ТЭН МБД
DGI.TEN1_MBN_ON := AM.TEN1_MBN_ON.iOn;//ТЭН1 в МБН
DGI.TEN2_MBN_ON := AM.TEN2_MBN_ON.iOn;//ТЭН2 в МБН
DGI.TEN3_MBN_ON := AM.TEN3_MBN_ON.iOn;//ТЭН3 в МБН
DGI.TEN4_MBN_ON := AM.TEN4_MBN_ON.iOn;//ТЭН4 в МБН
DGI.TEN1_N_ON := AM.TEN1_N_ON.iOn;//ТЭН1 трубопроводов Н
DGI.TEN2_N_ON := AM.TEN2_N_ON.iOn;//ТЭН2 трубопроводов Н
DGI.TEN3_N_ON := AM.TEN3_N_ON.iOn;//ТЭН3 трубопроводов Н
DGI.TEN4_N_ON := AM.TEN4_N_ON.iOn;//ТЭН4 трубопроводов Н
DGO.Alarm_sound_ON := AM.Alarm_sound_ON.iOn;//Звуковуя сигнализация
DGO.Light_ON := AM.Light_ON.iOn;//Освещение
DGI.SK_ON := (AM.SK_ON.iOn OR DGI.SK_ON) AND NOT sm_Stop.ACC[1];//Питание на клапан СК
DGI.SK_OF := NOT DGI.SK_ON;//Питание на клапан СК
DGO.KPG_ON := AM.KPG_ON.iOn;//КПГ открыть (отключить)
DGO.U_KNO_ON := AM.U_KNO_ON.iOn;//Питание на КНО
DGO.U_KNO_udrj12_ON := AM.U_KNO_udrj12_ON.iOn;//Питание на КНО (удержание12 В)
DGO.U_KAO_ON := AM.U_KAO_ON.iOn;//Питание на КАО
DGO.BP_SPV_ON := AM.BP_SPV_ON.iOn;//БП плазменных воспламенителей СПВ
DGO.KPR1_ON := AM.KPR1_ON.iOn;//КПР1
DGO.KPR2_ON := AM.KPR2_ON.iOn;//КПР2 
DGO.ORT_ON := AM.ORT_ON.iOn;//ОРТ
DGO.Chips_chek_alarm_ON := AM.Chips_chek_alarm_ON.iOn;//Контроль механизмов с БС
DGO.Starter_upr_ON := AM.Starter_upr_ON.iOn; //Реле управления стартерами
DGO.Speed_ON := AM.Speed_ON.iOn;//Реле переключения скоростей 
DGO.Chips_chek_alarm_ON := AM.Chips_chek_alarm_ON.iOn;//Контроль сигнализаторов стружки 
DGO.PLC_wor_ON := AM.PLC_wor_ON.iOn;//Исправность ПЛК
DGO.Ind_PS_ON := AM.Ind_PS_ON.iOn; // Светозвуковая сигнализация ПС
DGO.Ind_AS_ON := AM.Ind_AS_ON.iOn; //Светозвуковая сигнализация АС 

//______________________________________________________________________________________________________________________________________________


//----Имитация механизмов-----------------------------------

IF (DGI.MNND_ON AND DGI.MNOD_ON) OR (Calc_AI.N_KND.PV > 2000.0)  THEN 
	AI_HMI.Pm_D.Manual_Target := AI_HMI.Pm_D.Manual_Target + (0.7 - AI_HMI.Pm_D.Manual_Target)/100.0;  
ELSE
AI_HMI.Pm_D.Manual_Target := 0.0; 
END_IF;

IF DGI.PMNS_ON OR (Calc_AI.N_TN.PV > 300.0) OR us.Stop  
	THEN AI_HMI.Pm_N.Manual_Target := AI_HMI.Pm_N.Manual_Target + (0.4 - AI_HMI.Pm_N.Manual_Target)/100.00; DGI.Pm_N_RD1 := TRUE;
ELSE
 	AI_HMI.Pm_N.Manual_Target := 0.0; DGI.Pm_N_RD1 := FALSE;
END_IF;

IF AI_HMI.Pm_D.PV < 0.1 then DGI.Pm_in_D_alarm_low := True; else DGI.Pm_in_D_alarm_low := False; END_IF;
IF AI_HMI.Pm_D.PV > 0.02 then DGI.Pm_in_D_002 := True;  DGI.Pm_MNOD_002 := TRUE; else DGI.Pm_in_D_002 := False; DGI.Pm_MNOD_002 := False; END_IF;
IF AI_HMI.Pm_D.PV < 0.2 then DGI.Pm_in_D_low002 := True; else DGI.Pm_in_D_low002 := False; END_IF;
IF AI_HMI.Pm_D.PV > 0.04 then DGI.Pm_MNOD_004 := True;  else DGI.Pm_MNOD_004 := False;  END_IF;


IF (DGI.MNU_1_ON OR DGI.MNU_2_ON) OR (Calc_AI.N_TN.PV > 300.0) OR us.Stop
	THEN AI_HMI.dP_mg.Manual_Target := AI_HMI.dP_mg.Manual_Target + (200.0 - AI_HMI.dP_mg.Manual_Target)/10.0; DGI.dPmg := FALSE; 
ELSE
	AI_HMI.dP_mg.Manual_Target := 0.0; 
DGI.dPmg := TRUE;
END_IF;

//ВНА
DGI.Pos_m10_VNA := Calc_FR.Pv_outOK.out  <= 1.0;
DGI.Pos_p15_VNA := Calc_FR.Pv_outOK.out  > 1.0;
//Давление за ОК
//ADD AI_HMI.Pv_out_KVD.Manual_Target := ToFrom_GT.Model_Pok;
IF Calc_FR.Nst.out > 1500.0 THEN
DGI.ORT_check := TRUE;
END_IF;

//Стартер
IF DGO.Starter_upr_ON Then
DGI.K1_KK1_1_ON := True;
DGI.K1_KK2_1_ON := True;
DGI.KU_KK1_ON := True; 
DGI.KU_KK2_ON := True;
DGI.KU_and_ON := True;
DGI.KU_or_ON := True;
else
DGI.K1_KK1_1_ON := False;
DGI.K1_KK2_1_ON := False;
DGI.KU_KK1_ON := False; 
DGI.KU_KK2_ON := False;
DGI.KU_and_ON := False;
DGI.KU_or_ON := False;
END_IF;



IF DGO.Speed_ON Then
DGI.K2_KK1_2_ON := TRUE;
DGI.K2_KK2_2_ON := TRUE;
else
DGI.K2_KK1_2_ON := False;
DGI.K2_KK2_2_ON := False;
END_IF;



//температура за ТНД
//ADD AI_HMI.Tg_out_TND_1.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_2.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_3.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_4.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_5.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_6.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_7.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_8.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_9.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_10.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_11.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_12.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_13.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_14.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_15.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_out_TND_16.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_in_TND_1.Manual_Target := ToFrom_GT.Model_Tst;
//ADD AI_HMI.Tg_in_TND_2.Manual_Target := ToFrom_GT.Model_Tst;
//ADD IF ToFrom_GT.Model_Tst > 180.0 then
//ADD IF ToFrom_GT.AP_Step <=3 AND ToFrom_GT.State = 2 then
//ADD AI_HMI.Tg_in_KND_1.Manual_Target := ToFrom_GT.Model_Tst - 80.0 ;
//ADD END_IF;
//ADD IF ToFrom_GT.AP_Step > 3 OR ToFrom_GT.State = 3 then
//ADD AI_HMI.Tg_in_KND_1.Manual_Target := ToFrom_GT.Model_Tst - 180.0 ;
//ADD END_IF;
//ADD else 
//ADD AI_HMI.Tg_in_KND_1.Manual_Target :=  10.0;
//ADD end_IF;
 
AI_HMI.Tg_in_KND_2.Manual_Target := AI_HMI.Tg_in_KND_1.Manual_Target;
//Давление ТГ
IF DGI.Kr12_ON Then
DGI.Pg_in_BTA_16 := TRUE;
AI_HMI.Ptg_in_BTA.Manual_Target := AI_HMI.Ptg_in_BTA.Manual_Target + ( 3.0 - AI_HMI.Ptg_in_BTA.Manual_Target ) / 10.0;
ELSE
AI_HMI.Ptg_in_BTA.Manual_Target := 0.0;
DGI.Pg_in_BTA_16 := False;
END_IF;



//Давление газа в Н
p_in_max  :=    5.2;
T_in_max := 60.0;
p_out_max :=    6.0;    
n_st_max  := 5700.0;

  kx := (p_out_max - p_in_max) / n_st_max;
  IF (DGI.Kr4_ON OR DGI.Kr1_ON OR DGI.Kr2_ON) THEN p:=p_in_max; T:=T_in_max; ELSIF DGI.Kr5_ON THEN p:= 0.0; 
  END_IF;
  IF (DGI.Kr4_ON) THEN tau := 80.0; ELSIF (DGI.Kr1_ON OR DGI.Kr2_ON) THEN tau := 10.0; ELSIF DGI.Kr5_ON THEN tau := 50.0; ELSE tau := 100.0;
  END_IF;
  IF tau < 100.0 THEN 
    HMI_APR.Pg_in_N.Manual_Target := HMI_APR.Pg_in_N.Manual_Target + (p - HMI_APR.Pg_in_N.Manual_Target) / tau;
    HMI_APR.Pg_out_N.Manual_Target := HMI_APR.Pg_in_N.Manual_Target + Calc_AI.N_TN.PV * kx * HMI_APR.Pg_in_N.Manual_Target/p_in_max*1.5;
    END_IF;
Calc_AI.Compres_Rate := 1.05;
IF HMI_APR.Pg_out_N.Manual_Target > 5.0 then
AI_HMI.Tg_out_N.Manual_Target := AI_HMI.Tg_out_N.Manual_Target + (40.0 - AI_HMI.Tg_out_N.Manual_Target)/Calc_AI.Compres_Rate;
DGI.dPg_in_Kr1 := True;
else
AI_HMI.Tg_out_N.Manual_Target := 20.0;
DGI.dPg_in_Kr1 := False;
END_IF;

//--------------//----------------
END_IF;

IF BTN.IMIT_OF THEN
AI_HMI.Tv_KGT.Condition.simulation_on := FALSE;//Температура под кожухом Д
//AI_HMI.Tg_in_KND_1.Condition.simulation_on := FALSE;//Температура 1 перед камерой сгорания (за КНД)
//AI_HMI.Tg_in_KND_2.Condition.simulation_on := FALSE;//Температура 2 перед камерой сгорания (за КНД)
//AI_HMI.Tg_out_TND_1.Condition.simulation_on := FALSE;//Температура 1 на выходе ТНД
//AI_HMI.Tg_out_TND_2.Condition.simulation_on := FALSE;//Температура 2 на выходе ТНД
//AI_HMI.Tg_out_TND_3.Condition.simulation_on := FALSE;//Температура 3 на выходе ТНД
//AI_HMI.Tg_out_TND_4.Condition.simulation_on := FALSE;//Температура 4 на выходе ТНД
//AI_HMI.Tg_out_TND_5.Condition.simulation_on := FALSE;//Температура 5 на выходе ТНД
//AI_HMI.Tg_out_TND_6.Condition.simulation_on := FALSE;//Температура 6 на выходе ТНД
//AI_HMI.Tg_out_TND_7.Condition.simulation_on := FALSE;//Температура 7 на выходе ТНД
//AI_HMI.Tg_out_TND_8.Condition.simulation_on := FALSE;//Температура 8 на выходе ТНД
//AI_HMI.Tg_out_TND_9.Condition.simulation_on := FALSE;//Температура 9 на выходе ТНД
//AI_HMI.Tg_out_TND_10.Condition.simulation_on := FALSE;//Температура 10 на выходе ТНД
//AI_HMI.Tg_out_TND_11.Condition.simulation_on := FALSE;//Температура 11 на выходе ТНД
//AI_HMI.Tg_out_TND_12.Condition.simulation_on := FALSE;//Температура 12 на выходе ТНД
//AI_HMI.Tg_out_TND_13.Condition.simulation_on := FALSE;//Температура 13 на выходе ТНДPm_D
//AI_HMI.Tg_out_TND_14.Condition.simulation_on := FALSE;//Температура 14 на выходе ТНД
//AI_HMI.Tg_out_TND_15.Condition.simulation_on := FALSE;//Температура 15 на выходе ТНД
//AI_HMI.Tg_out_TND_16.Condition.simulation_on := FALSE;//Температура 16 на выходе ТНД
//AI_HMI.Tg_in_TND_1.Condition.simulation_on := FALSE;//Температура 1 за ТНД (т.17)
//AI_HMI.Tg_in_TND_2.Condition.simulation_on := FALSE;//Температура 2 за ТНД (т.18)
AI_HMI.Tm_out_Per.Condition.simulation_on := FALSE;//Температура масла на сливе из переходника
AI_HMI.Tm_out_KVD.Condition.simulation_on := FALSE;//Температура масла на сливе из заднего корпуса КВД
AI_HMI.Tm_out_TND.Condition.simulation_on := FALSE;//Температура масла на сливе из опорного венца ТНД
AI_HMI.Tm_out_N.Condition.simulation_on := FALSE;//Температура масла на сливе из опорного венца ТН
AI_HMI.Tm_in_MBN.Condition.simulation_on := FALSE;//Температура масла в МБН
AI_HMI.Tm_in_MBD.Condition.simulation_on := FALSE;//Температура масла в МБД
AI_HMI.Tm_in_D.Condition.simulation_on := FALSE;//Температура масла на входе Д
AI_HMI.T_POD_1.Condition.simulation_on := FALSE;//Температура 1 подшипников промопоры
AI_HMI.T_POD_2.Condition.simulation_on := FALSE;//Температура 2 подшипников промопоры
AI_HMI.Tg_in_N.Condition.simulation_on := FALSE;//Температура газа на входе Н
AI_HMI.Tg_out_N.Condition.simulation_on := FALSE;//Температура газа на выходе Н
AI_HMI.T_PON.Condition.simulation_on := FALSE;//Температура переднего опорного подшипника Н
AI_HMI.Tp_N_opora.Condition.simulation_on := FALSE;//Температура опорно-упорного подшипника Н (опорная часть)
AI_HMI.Tp_N_work.Condition.simulation_on := FALSE;//Температура опорно-упорного подшипника Н (рабочая колодка)
AI_HMI.Tp_N_ust.Condition.simulation_on := FALSE;//Температура опорно-упорного подшипника Н (установочная колодка)
AI_HMI.Tms_N_AVO.Condition.simulation_on := FALSE;//Температура масла смазки нагнетателя после АВО
AI_HMI.T_atm.Condition.simulation_on := FALSE;//Температура атмосферного воздуха
AI_HMI.Tv_in_D.Condition.simulation_on := FALSE;//Температура воздуха на входе в двигатель
AI_HMI.T_H20_in_Ut.Condition.simulation_on := FALSE;//Температура воды на входе утилизатора
AI_HMI.T_H20_out_Ut.Condition.simulation_on := FALSE;//Температура воды на выходе утилизатора
AI_HMI.Ttg_in_BTA.Condition.simulation_on := FALSE;//Температура топливного газа на входе в БТА
AI_HMI.Razr_out_D.Condition.simulation_on := FALSE;//Разрежение воздуха на входе в двигатель
AI_HMI.Pm_D.Condition.simulation_on := FALSE;//Давление масла на входе в двигатель (после фильтра)
AI_HMI.Pm_N.Condition.simulation_on := FALSE;//Давление масла смазки Н
AI_HMI.dP_mg.Condition.simulation_on := FALSE;//Перепад давлений масло-газ
AI_HMI.Ptg_in_BTA.Condition.simulation_on := FALSE;//Давление топливного газа на входе БТА
AI_HMI.dPtg_in_filtr.Condition.simulation_on := FALSE;//Перепад давлений топливного газа на фильтре
HMI_APR.Pg_in_N.Condition.simulation_on := FALSE;//Давление газа на входе Н
AI_HMI.Ptg_zamer.Condition.simulation_on := FALSE;//Давление топливного газа на замерной нитке
AI_HMI.dPtg_in_diaf.Condition.simulation_on := FALSE;//Перепад давлений топливного газа на диафрагме
HMI_APR.Pg_out_N.Condition.simulation_on := FALSE;//Давление газа на выходе Н
HMI_APR.dP_conf_N.Condition.simulation_on := FALSE;//Перепад давлений на конфузоре
AI_HMI.P_atm.Condition.simulation_on := FALSE;//Давление атмосферного воздуха
AI_HMI.dPg_fors.Condition.simulation_on := FALSE;//Перепад давлений газа на форсунках
//AI_HMI.Pv_out_KVD.Condition.simulation_on := FALSE;//Давление воздуха за КВД
AI_HMI.dPm_in_filtr_N.Condition.simulation_on := FALSE;//Перепад давлений масла на фильтре Н (ТП-22)
AI_HMI.Lm_MBN.Condition.simulation_on := FALSE;//Уровень в МБН
AI_HMI.Vibr_OP_N.Condition.simulation_on := FALSE;//Вибросмещение ОП нагнетателя
AI_HMI.Vibr_OUP_N.Condition.simulation_on := FALSE;//Вибросмещение ОУП нагнетателя
AI_HMI.Vibr_KVD.Condition.simulation_on := FALSE;//Вибрация корпуса КВД
AI_HMI.Vibr_KND.Condition.simulation_on := FALSE;//Вибрация корпуса КНД
AI_HMI.Vibr_N.Condition.simulation_on := FALSE;//Вибрация корпуса ТН
//AI_HMI.Pos_TRK.Condition.simulation_on := FALSE;//Положение топливно-регулирующего клапана (ДУС)
AI_HMI.KCU_Upr_TRK.Condition.simulation_on := FALSE;//КЦУ. Управление топливно-регулирующим клапаном 
AI_HMI.U_osn_RKBU.Condition.simulation_on := FALSE;//Напряжение основного питания РК БУ
AI_HMI.U_res_RKBU.Condition.simulation_on := FALSE;//Напряжение резервного питания РК БУ
AI_HMI.T_PLC.Condition.simulation_on := FALSE;//Температура контроллера
//AI_HMI.N_KND_1.Condition.simulation_on := FALSE;//Частота вращения КНД канал 1
//AI_HMI.N_KVD_1.Condition.simulation_on := FALSE;//Частота вращения КВД канал 1
//AI_HMI.N_TN_1.Condition.simulation_on := FALSE;//Частота вращения ротора ТН канал 1
//AI_HMI.N_KND_2.Condition.simulation_on := FALSE;//Частота вращения КНД канал 2
//AI_HMI.N_KVD_2.Condition.simulation_on := FALSE;//Частота вращения КВД канал 2
//AI_HMI.N_TN_2.Condition.simulation_on := FALSE;//Частота вращения ротора ТН канал 2

END_IF;


]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="09_PRU" Comment="" Data="" UUID="12DFCB0D4CEE9552296A45A3E9C948C1">
            <FunctionBlock UUID="61AB208F4C9998B42EEB7B9131DABEB8" Name="FB_PRU">
                <Variables>
                    <Variable UUID="716C2DB34859D1F1357A89952F4EBE06" Name="TMR_PRU_NObs" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="7248EC7A42B21121EC132FA631240CBC" Name="TMR_PRU_NOss" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="7DC7B0F6491FE3575E403C82EF274455" Name="TMR_PRU_AObs" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="895CA5044971B1084091B2B6DF7E7828" Name="TMR_PRU_AOss" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="CF36E9444555B2AE4DAFC8BB98A15610" Name="TMR_PRU_deblock" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="366B1DA445DEF66BB2DD57A31FC7C939" Name="din01" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="16" Array="TRUE" Usage="internal" />
                    <Variable UUID="69A6A5824C48464F1EB3DB9FAA31ACB2" Name="din02" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="16" Array="TRUE" Usage="internal" />
                </Variables>
                <ST><![CDATA[// Обработка аналогов
PRU.AI[0] := Calc_AI.N_KND.PV; 		//расчетная частота вращения КНД
PRU.AI[1] := Calc_AI.N_KVD.PV; 		//расчетная частота вращения КВД
PRU.AI[2] := Calc_AI.N_TN.PV; 		//расчетная частота вращения ТН
PRU.AI[3] := AI_HMI.Tv_in_D.PV; 	//Температура воздуха на входе в двигатель
PRU.AI[4] := AI_HMI.Razr_out_D.PV; 	//Разрежение воздуха на входе в двигатель
PRU.AI[5] := AI_HMI.Pv_out_KVD.PV; 	//Давление воздуха за КВД
PRU.AI[6] := Calc_AI.Tg_in_KND.PV; 	//расчетная Температура перед камерой сгорания (за КНД)
PRU.AI[7] := Calc_AI.dT_KC.PV; 		//Расчетный Перепад температуры в КС
PRU.AI[8] := AI_HMI.dPg_fors.PV; 	//Перепад давлений газа на форсунках
PRU.AI[9] := Calc_AI.Tg_in_TND.PV; 	//расчетная температура за ТНД на запуске
PRU.AI[10] := Calc_AI.Tg_out_TND.PV;//расчетная Температура на выходе ТНД
PRU.AI[11] := HMI_APR.Pg_in_N.PV; 	//Давление газа на входе Н
PRU.AI[12] := HMI_APR.Pg_out_N.PV; 	//Давление газа на выходе Н
PRU.AI[13] := HMI_APR.dP_conf_N.PV; 	//Перепад давлений на конфузоре
PRU.AI[14] := AI_HMI.Tg_in_N.PV; 	//Температура газа на входе Н
PRU.AI[15] := AI_HMI.Tg_out_N.PV; 	//Температура газа на выходе Н
PRU.AI[16] := AI_HMI.Pm_D.PV; 		//Давление масла на входе в двигатель (после фильтра)
PRU.AI[17] := AI_HMI.dP_mg.PV; 		//Перепад давлений масло-газ
PRU.AI[18] := AI_HMI.Pm_N.PV; 		//Давление масла смазки Н
PRU.AI[19] := AI_HMI.Ptg_in_BTA.PV; //Давление топливного газа на входе БТА
PRU.AI[20] := AI_HMI.Ttg_in_BTA.PV; //Температура топливного газа на входе в БТА
PRU.AI[21] := AI_HMI.Pos_TRK.PV; 	//Положение топливно-регулирующего клапана (ДУС)
PRU.AI[22] := AI_HMI.Vibr_OP_N.PV; 	//Вибросмещение ОП нагнетателя
PRU.AI[23] := AI_HMI.Vibr_OUP_N.PV; //Вибросмещение ОУП нагнетателя
PRU.AI[24] := AI_HMI.Vibr_KVD.PV; 	//Вибрация корпуса КВД
PRU.AI[25] := AI_HMI.Vibr_KND.PV; 	//Вибрация корпуса КНД
PRU.AI[26] := AI_HMI.Vibr_N.PV; 	//Вибрация корпуса ТН
//PRU.AI[27] := AI_HMI.; 			//резерв
//PRU.AI[28] := AI_HMI.; 			//резерв
//PRU.AI[29] := AI_HMI.; 			//резерв

// Обработка дискретов
PRU.WRD[0] := PUCK_WORD(din01);
PRU.WRD[1] := PUCK_WORD(din02);
//Первый WORD
din01[0]:= DGI.K1_KK1_1_ON; 		//К1 1ск. (РК1) в КК1 включен
din01[1]:= DGI.K2_KK1_2_ON; 		//К2 2ск. (РК2) в КК1 включен
din01[2]:= DGI.KU_KK1_ON; 			//КУ в КК1 включен
din01[3]:= DGI.K1_KK2_1_ON; 		//К1 1ск. (РК1) в КК2 включен
din01[4]:= DGI.K2_KK2_2_ON; 		//К2 2ск. (РК2) в КК2 включен
din01[5]:= DGI.KU_KK2_ON; 			//КУ в КК2 включен
din01[6]:= DGI.U380_KK; 			//Наличие напряжения ~380 В в КК
din01[7]:= DGO.Starter_upr_ON; 		//Реле управления стартерами включить
din01[8]:= DGO.Speed_ON;  			//Реле переключения скоростей включить
din01[9]:= DGI.Pos_m10_VNA; 		//ВНА в положении -10
din01[10]:= DGI.Pos_p15_VNA;  		//ВНА в положении +15
din01[11]:= DGI.Pg_in_BTA_16;  		//Давление газа на входе в БТА больше 1.6 МПа
din01[12]:= DGI.dPg_in_Kr1;  		//Перепад давлений газа на кране N1
din01[13]:= DGO.Kr1_oil; 			//Кран № 1 смазка 
din01[14]:= DGO.Kr2_oil; 			//Кран № 2 смазка
din01[15]:= LG.is_flame; 			//Горение
//Второй WORD
din02[0]:=  DGI.Sdvig_N_ahead; 		//Осевой сдвиг ротора нагнетателя вперед (к турбине)
din02[1]:=  DGI.Sdvig_N_back;		//Осевой сдвиг ротора нагнетателя назад (от турбины)
din02[2]:= DGI.Fire;  				//Пожар в МБД, МБН, МФ (порошок)
din02[3]:= DGI.pgrP_brk;  			//Сист.порош.пожаротуш.неисправ.
din02[4]:= DGI.Kr5_ON; 				//свеча
din02[5]:= DGI.Kr9_ON; 				//свеча
din02[6]:= DGI.Gas_N; 				//Загазованность галереи Н больше 1 %
//din02[7]:= ; 						//резерв
//din02[8]:= ;						//резерв
//din02[9]:= ;						//резерв
//din02[10]:= ;						//резерв
//din02[11]:= ; 					//резерв
//din02[12]:= ;						//резерв
//Pdin02[13]:= ; 					//резерв
//din02[14]:= ;						//резерв
//din02[15]:= ;						//резерв

// Обработка кнопок
LG.PRU_NObs := PRU.BTN[0];   //НОбс ПРУ
TMR_PRU_NObs(PRU.BTN[0], T#1s, PRU.BTN_TMO[0], PRU.BTN_TMR[0]);
IF PRU.BTN_TMO[0] THEN 
PRU.BTN[0] := False;
END_IF; 

LG.PRU_NOss := PRU.BTN[1];  //НОсс ПРУ
TMR_PRU_NOss(PRU.BTN[1], T#1s, PRU.BTN_TMO[1], PRU.BTN_TMR[1]);
IF PRU.BTN_TMO[1] THEN 
PRU.BTN[1] := False;
END_IF; 

LG.PRU_AObs := PRU.BTN[2]; //АОбс ПРУ
TMR_PRU_AObs(PRU.BTN[2], T#1s, PRU.BTN_TMO[2], PRU.BTN_TMR[2]);
IF PRU.BTN_TMO[2] THEN 
PRU.BTN[2] := False;
END_IF; 

LG.PRU_AOss := PRU.BTN[3]; //АОсс ПРУ
TMR_PRU_AOss(PRU.BTN[3], T#1s, PRU.BTN_TMO[3], PRU.BTN_TMR[3]);
IF PRU.BTN_TMO[3] THEN 
PRU.BTN[3] := False;
END_IF;

LG.PRU_deblock := PRU.BTN[4];//Деблокировка ПРУ
TMR_PRU_deblock(PRU.BTN[4], T#1s, PRU.BTN_TMO[4], PRU.BTN_TMR[4]);
IF PRU.BTN_TMO[4] THEN 
PRU.BTN[4] := False;
END_IF;

// Обработка ИМ
FC_IM_PRU(PRU.State[0], DGI.Kr1_ON, DGI.Kr1_OF);			//Состояние Кр1
FC_IM_PRU(PRU.State[1], DGI.Kr2_ON, DGI.Kr2_OF);			//Состояние Кр2
FC_IM_PRU(PRU.State[2], DGI.Kr4_ON, DGI.Kr4_OF);			//Состояние Кр4
FC_IM_PRU(PRU.State[3], DGI.Kr5_ON, DGI.Kr5_OF);			//Состояние Кр5
FC_IM_PRU(PRU.State[4], DGI.Kr6_ON, DGI.Kr6_OF);			//Состояние Кр6
FC_IM_PRU(PRU.State[5], DGI.Kr9_ON, DGI.Kr9_OF);			//Состояние Кр9
FC_IM_PRU(PRU.State[6], DGI.Kr12_ON, DGI.Kr12_OF);			//Состояние Кр12
FC_IM_PRU(PRU.State[7], DGI.MNOD_ON, NOT DGI.MNOD_ON);		//Состояние МНОД
FC_IM_PRU(PRU.State[8], DGI.MNND_ON, NOT DGI.MNND_ON);		//Состояние МННД
FC_IM_PRU(PRU.State[9], DGI.MNOB_ON, NOT DGI.MNOB_ON);		//Состояние МНОБ Д
FC_IM_PRU(PRU.State[10], DGI.PMNS_ON, NOT DGI.PMNS_ON);		//Состояние ПМНС Н
FC_IM_PRU(PRU.State[11], DGI.MNU_1_ON, NOT DGI.MNU_1_ON);		//Состояние МНУ (1 секция)
FC_IM_PRU(PRU.State[12], DGI.MNU_2_ON, NOT DGI.MNU_2_ON); 		//СостояниеМНУ (2 секция)
FC_IM_PRU(PRU.State[13], (AI_HMI.Pos_TRK.PV > 95.0), (AI_HMI.Pos_TRK.PV < 5.0)); 	//Состояние ТРК
FC_IM_PRU(PRU.State[14],  DGO.SK_ON, NOT DGO.SK_ON);		//Состояние СК 
FC_IM_PRU(PRU.State[15],  DGO.U_KAO_ON, NOT DGO.U_KAO_ON);	//Состояние КАО 
FC_IM_PRU(PRU.State[16],  DGO.U_KNO_ON, NOT DGO.U_KNO_ON);	//Состояние КНО 
FC_IM_PRU(PRU.State[17],  DGO.KPG_ON, NOT DGO.KPG_ON);		//Состояние КПГ 
FC_IM_PRU(PRU.State[18],  DGO.KPR1_ON, NOT DGO.KPR1_ON);	//Состояние КПР1 
FC_IM_PRU(PRU.State[19],  DGO.KPR2_ON, NOT DGO.KPR2_ON);	//Состояние КПР2 
FC_IM_PRU(PRU.State[20],  DGI.VOD_1_ON, NOT DGI.VOD_1_ON);	//Состояние ВОД1 
FC_IM_PRU(PRU.State[21],  DGI.VOD_2_ON, NOT DGI.VOD_2_ON);	//Состояние ВОД2 
//FC_IM_PRU(PRU.State[22],  , );	//Резерв 
//FC_IM_PRU(PRU.State[23],  , );	//Резерв 
//FC_IM_PRU(PRU.State[24],  , );	//Резерв 



// Обработка режимов текст
IF us.AOss THEN PRU.Reg[0] := 0; END_IF;
IF us.AObs THEN PRU.Reg[0] := 1; END_IF;
IF us.NOss THEN PRU.Reg[0] := 2; END_IF;
IF us.NObs THEN PRU.Reg[0] := 3; END_IF;
IF us.Repair THEN PRU.Reg[0] := 4; END_IF;
IF us.HR THEN PRU.Reg[0] := 5; END_IF;
IF us.GR THEN PRU.Reg[0] := 5; END_IF;
IF us.PZ THEN PRU.Reg[0] := 6; END_IF;
IF us.PZM THEN PRU.Reg[0] := 6; END_IF;
IF us.HP THEN PRU.Reg[0] := 7; END_IF;
IF us.KPK THEN PRU.Reg[0] := 8; END_IF;
IF us.APK THEN PRU.Reg[0] := 9; END_IF;
IF us.APM THEN PRU.Reg[0] := 10; END_IF;
IF us.K THEN PRU.Reg[0] := 11; END_IF;
IF us.M THEN PRU.Reg[0] := 12; END_IF;
IF us.K_M THEN PRU.Reg[0] := 13; END_IF;
IF us.M_K THEN PRU.Reg[0] := 14; END_IF;
IF us.PBZ THEN PRU.Reg[0] := 15; END_IF;
IF us.OGR THEN PRU.Reg[0] := 11; END_IF;


//цвет 
IF us.Repair OR us.HR OR us.GR THEN PRU.Reg[1] := 0; END_IF; 
IF us.AOss OR us.AObs THEN PRU.Reg[1] := 1; END_IF; 
IF us.NOss OR us.NObs OR us.PZ OR us.PZM OR us.HP OR us.KPK OR us.APK OR us.APM OR us.K OR us.M OR us.K_M OR us.M_K OR us.OGR OR us.PBZ OR us.TP THEN PRU.Reg[1] := 2; END_IF; 



]]></ST>
            </FunctionBlock>
            <Function UUID="826E58D14C37EE05217267A40371D22A" Name="FC_IM_PRU" ResultTypeUUID="47B58C4E4726C8B230965EBE77F1169E">
                <Variables>
                    <Variable UUID="C766A0C3493CF22B2D2517911F2985A1" Name="State_IM" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="output" />
                    <Variable UUID="3AEE4E7F412FF958AD4C5985D10B7085" Name="SigON" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="3A38F16F4FBFA6E1BCEF49BE21EC3001" Name="SigOF" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                </Variables>
                <ST><![CDATA[State_IM := 0;
IF SigON AND SigOF THEN State_IM := 0; END_IF;
IF NOT SigON AND SigOF THEN State_IM := 1; END_IF;
IF SigON AND NOT SigOF THEN State_IM := 2; END_IF;
IF NOT SigON AND NOT SigOF THEN State_IM := 3; END_IF;]]></ST>
            </Function>
            <Function UUID="B6635CB14D394F8C948FB097D879AA1F" Name="PUCK_WORD" ResultTypeUUID="05CD1AAB4891B30C004C2799CA460884">
                <Variables>
                    <Variable UUID="AC8E213048E1D3B48DA9F2AB335AB31E" Name="D_W" Type="DWORD" TypeUUID="53CAB7E947643F098D755BB9A02688FA" Usage="internal" />
                    <Variable UUID="4881B2924635A0F76ABB99B22E387ED6" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="24B5A5C14D2E8D669133BAA8128E70B8" Name="Val" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="16" Array="TRUE" Usage="input" />
                </Variables>
                <ST><![CDATA[For i:=0 to 15 do
D_W:= PUTBIT(D_W, i, Val[i] );

END_For;

PUCK_WORD:=DWORD_TO_WORD(D_W);]]></ST>
            </Function>
        </Folder>
        <Folder Name="10_KC" Comment="" Data="" UUID="F2B0FF2E46DCAD4914EAF4B227E8BB96">
            <FunctionBlock UUID="26600F52433D8E42261516BD8F838EBE" Name="FB_KC" Comment="Связь с  ЛИС КЦ4510">
                <Variables>
                    <Variable UUID="ABDC6DF14451A1A877BE5EA1AA76C277" Name="T_max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="6" Array="TRUE" Usage="internal" />
                    <Variable UUID="96ABBA8D45BE012678D1A4B0B647D00F" Name="max" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="15C4810A47967F38F2B32CABFF001A4B" Name="T_repair" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="6" Array="TRUE" Usage="internal" />
                    <Variable UUID="316665AE4D3D2D8F4D4C15837FF3B3F5" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                </Variables>
                <ST><![CDATA[// Обработка дискретов
fl_KC.DI[0]:= DGI.Kr6_ON; 		//ГПА2:Кр.6 открыт
fl_KC.DI[1]:= DGI.Kr6_OF; 		//ГПА2:Кр.6 закрыт
fl_KC.DI[2]:= DGI.Kr1_ON; 			//ГПА2:Кр.1 открыт
fl_KC.DI[3]:= DGI.Kr1_OF; 		//ГПА2:Кр.1 закрыт
fl_KC.DI[4]:= DGI.Kr2_ON; 		//ГПА2:Кр.2 открыт
fl_KC.DI[5]:= DGI.Kr2_OF; 			//ГПА2:Кр.2 закрыт
fl_KC.DI[6]:= us.AOss OR us.AObs; 			//ГПА2:АО ГПА
fl_KC.DI[7]:= DGI.Pomp_N; 		//ГПА2:Помпаж нагнетателя
fl_KC.DI[8]:= DGI.KCU_Kr1_ON OR DGI.KCU_Kr1_OF OR DGI.KCU_Kr2_ON OR DGI.KCU_Kr2_OF OR DGI.KCU_Kr4_ON OR DGI.KCU_Kr4_OF OR DGI.KCU_Kr5_ON OR DGI.KCU_Kr5_OF OR DGI.KCU_Kr6_ON OR DGI.KCU_Kr6_OF;  			//ГПА2:Обрыв цепи солен.кр
fl_KC.DI[9]:= us.M; 		//ГПА2:Агрегат работает(р.М)
fl_KC.DI[10]:= us.Repair;  		//ГПА2:Агрегат в ремонте
fl_KC.DI[11]:= us.GR OR us.HR;  		//ГПА2:Агрегат в резерве
//fl_KC.DI[12]:= ;  		//Резерв
//fl_KC.DI[13]:= ; 			//Резерв
//fl_KC.DI[14]:= ; 			//Резерв
//fl_KC.DI[15]:= ; 			//Резерв

// Обработка аналогов
fl_KC.AI[0] := Calc_AI.N_TN.PV; 		//ГПА2:Обороты ротора нагнетателя
fl_KC.AI[1] := Calc_AI.N_KVD.PV; 		//ГПА2:Обороты ТВД
fl_KC.AI[2] := Calc_AI.N_KND.PV; 		//ГПА2:Обороты ТНД
fl_KC.AI[3] :=  max     ; 	//ГПА2:Тмах подшипников
//fl_KC.AI[4] := ; 	//ГПА2:КПД
//fl_KC.AI[5] := ; 	//ГПА2:Политропический КПД
//fl_KC.AI[6] := ; 	//ГПА2:Запас по помпажу
//fl_KC.AI[7] := ; 		//ГПА2:Эффективная мощность
fl_KC.AI[8] := Calc_AI.Tg_out_TND.PV; 	//ГПА2:Т продуктов сгорания
fl_KC.AI[9] := HMI_APR.dP_conf_N.PV; 	//ГПА2:dP на вх.конфузоре нагнетателя
fl_KC.AI[10] := HMI_APR.Pg_in_N.PV;//ГПА2:Ргаза на вх.нагнетателя
fl_KC.AI[11] := HMI_APR.Pg_out_N.PV; 	//ГПА2:Ргаза на вых.нагнетателя
fl_KC.AI[12] := AI_HMI.Tg_in_N.PV; 	//ГПА2:Тгаза на вх.нагнетателя
fl_KC.AI[13] := AI_HMI.Tg_out_N.PV; 	//ГПА2:Тгаза на вых.нагнетателя
//fl_KC.AI[14] := ; 	//День месяца ГПА2
//fl_KC.AI[15] := ; 	//Месяц года ГПА2
//fl_KC.AI[16] := ; 		//Год ГПА2
//fl_KC.AI[17] := ; 		//Час ГПА2
//fl_KC.AI[18] := ; 		//Минуты ГПА2
//fl_KC.AI[19] := ; //Секунды ГПА2
//fl_KC.AI[20] := ; //Миллисекунды ГПА2

//расчет максимальной температуры подшипников
T_max[0] := AI_HMI.T_POD_1.PV;
T_max[1] := AI_HMI.T_POD_2.PV;
T_max[2] := AI_HMI.T_PON.PV;
T_max[3] := AI_HMI.Tp_N_opora.PV;
T_max[4] := AI_HMI.Tp_N_work.PV;
T_max[5] := AI_HMI.Tp_N_ust.PV;

T_repair[0] := AI_HMI.T_POD_1.Condition.fault_common OR AI_HMI.T_POD_1.Condition.repair ;
T_repair[1] := AI_HMI.T_POD_2.Condition.fault_common OR AI_HMI.T_POD_2.Condition.repair ;
T_repair[2] := AI_HMI.T_PON.Condition.fault_common OR AI_HMI.T_PON.Condition.repair ;
T_repair[3] := AI_HMI.Tp_N_opora.Condition.fault_common OR AI_HMI.Tp_N_opora.Condition.repair ;
T_repair[4] := AI_HMI.Tp_N_work.Condition.fault_common OR AI_HMI.Tp_N_work.Condition.repair ;
T_repair[5] := AI_HMI.Tp_N_ust.Condition.fault_common OR AI_HMI.Tp_N_ust.Condition.repair ;


max := -50.0;
For i:=0 to 5 do
if T_max[i] < max AND NOT T_repair[i] then max:=  T_max[i]; end_if; 
end_for;
]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="11_Statistica" Comment="" Data="" UUID="275E9F7F4003596D762153BF72EFA988">
            <FunctionBlock UUID="86AB60FA4B051FB0EBF98782DAD47C3C" Name="Statistica">
                <Variables>
                    <Variable UUID="C537CE0E49B60778AAAFD5ACE40A0F90" Name="TMR00" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="6BFD3B4542DB82948E476280EE1B733F" Name="TMR01" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="C172C9164ACDAEE69CF5A5ACFB6CA0F5" Name="TMR_ET" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="2" Array="TRUE" Usage="internal" />
                    <Variable UUID="AED4F4DA462A373F7C1BC08133454340" Name="TMRTIME" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Size="4" Array="TRUE" Usage="internal" />
                    <Variable UUID="3E312FBA47417338D99F90914B133A0A" Name="Cond1" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="BD2F47224BDD4E4652B5C7A46D6D88A7" Name="Cond2" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="F880B98543AC6ADA3C90FCB07ACE0B5B" Name="R_TRIG00" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="E864C47645DE5C52C5CF1E85056CF41C" Name="R_TRIG01" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="703E43C24BA4198599669584DAB6D945" Name="R_TRIG02" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="7FE9B85E43032E12AB8988AAC8E938B0" Name="R_TRIG03" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="FE1367FE42DEFA3233BC42A73811F5F7" Name="R_TRIG_EDGE" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="4" Array="TRUE" Usage="internal" />
                    <Variable UUID="82D8BE3344EF5C667A7C52941FD673B0" Name="WAS_BURN" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="151D663747B5133F63CBDB92C7C688E1" Name="R_TRIG04" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="48133AA14D34F1370E0DF1ABA5D5FEAA" Name="T_SEC" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="E66CE7B941F6CA6ECE9632825D5CAEE7" Name="K_cu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="27CF50844B9CF0176818E1848BA4F8DD" Name="Dcu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3E6067BF4C98B386B0D9BFB451A03D5D" Name="K_t" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F5E4B99648CA58084A2E988CA5143613" Name="D" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EB95A7D948C3B8C46402BAAFA9A90F5D" Name="Beta" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="60CFA837454691A2EF9BE8A36A89582C" Name="prom3" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="98D384A44CFA543D07B1F984A71029BF" Name="prom4" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9C23D09F47D4995FC23BA8B355FCF2CE" Name="E" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6F9CD5CD416180701FAB63A5B4499CA5" Name="a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="BB7460FB45600BAC125327A5173AA4C9" Name="r_k" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7592EF7C4D5F6E95BB3EB5940311BBF6" Name="K_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6CE5C91B4F01C579393675AFA41226BC" Name="TT" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7810332C4E6D8E84276B31B827F19BE7" Name="P" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="41F3464E431EEA4F4409F7A1D52181D1" Name="P_MPa" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3039580248DD6E23525D37AF9AE5624B" Name="Z_c" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0B486182495F14B61B5FFAA872745BF0" Name="P_pk" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D3DB702A4164009A6B52BB96E5404EE1" Name="T_pk" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="633556CB47335BF8217F1B9CD1FB275F" Name="Z" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="77A8897C40C2ABC68D43DA809E478394" Name="P_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="925BBFCA4F35FDBD900FB89D46AB0C1F" Name="T_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="13DB814E4DD75E1AB47D03B133066910" Name="dT_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0679B9DF4EFA9BA25CBF5799F27C0931" Name="Tu_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DE8B879044558838C3CC2A86C7607337" Name="Tu_0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3CBAA4A24C6B43806E2989A59CAF287D" Name="B_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="63FC48944BCB1CDE40B768B677D061BA" Name="B_0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3D4DE70444E62D0DD4CF9A8A43D2E9D8" Name="B_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="BA21FC34474C0CF939D0B2A59A148013" Name="K" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="015C58FF4F36A1F7A27D47A8E67A52E7" Name="Ro" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E7175AA84529123AA969098B1CFBAADA" Name="F" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3DFDB3694268073E9627588182F29EB8" Name="P_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="719833FE40B6D29212D6FCAC3A10610A" Name="T_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E21C833D4C15B8A6076338959133710C" Name="denominator" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E4C96FBB4A24362D87109295951C0369" Name="C_mu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="257E07404B8643F2CAC5C2BC16860A05" Name="Mu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D74D7828446646181E6BD6BD21EF886B" Name="Mu_t" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="277202A34D3476097A9435A944D958C6" Name="K_ad" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AC6FFE0B4C01948E816586B43C5EAC1B" Name="ee" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F68E9C4A49EF663B5153CAA63944D6E7" Name="c2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9E6DFE574D22DB4FC23CFA876A92632C" Name="c1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="17494EAE42D7F8C332C90392DBFDD09D" Name="idint" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="67F9B3EC4142C82DE57B3E9A3AB74BD1" Name="L_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="91001AEA4C6CDCBE4B1B21A527D6F508" Name="L_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2CB2597149C77F31146D7FA62540BD51" Name="M_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="10633AB24B00A5915314B39729CB2026" Name="Re" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DAB95BBE4CA1402799AF4A8198F8EE44" Name="A_0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="12" Array="TRUE" Usage="internal" />
                    <Variable UUID="2087D1A545DE57C782CE65AB17BF2706" Name="A_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="12" Array="TRUE" Usage="internal" />
                    <Variable UUID="B4C1F2F84197DB171C32B19C5D937049" Name="A_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="12" Array="TRUE" Usage="internal" />
                    <Variable UUID="5B53A4844D062AD795CE8098E4048982" Name="R_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7298E7744F5681A7E41027BD87FB24C8" Name="A0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="8211F99940771DDDBD203DA33A635226" Name="A1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="605600EF42481CA787480580ACB898E4" Name="A2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="BB0256AC4DFFA2E344F390BACAAA6F8A" Name="M_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EAEA0A0547D2AC1BE90DF39DD4843C72" Name="aa" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A008A44741177891AF7DD0BC14D64820" Name="c" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0B82FD3C459C6891208A0BBBE2C37FBE" Name="j" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="36D565594DCB53642E08C3B1E2EBDF81" Name="prom2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="415D15B841F04C8134C8AE8020C75D40" Name="prom1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2C47643D4F14F6B554FC588543BFB4B1" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="0C3C25884AD2C7640A62B98D4ACD86EB" Name="prom20" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E23700384F934FB373F9B684DA1C6D6D" Name="prom5" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CB8C8A4C43A4EC5571264581C1B63830" Name="prom21" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="3EFAD55640B1573B72B6AEB1A83E4135" Name="R_amax" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5FE32A28436A341ABCF6BEA0D578D745" Name="prom6" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5B7EBF4B466D17DCBDA6069F039687A5" Name="R_amin" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="38A763D343A56FB26EDF68976D8C88A9" Name="A_sh" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7E10208641B00D8AD1D589A1107926BD" Name="k_D" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B9CAB7D24AA36EE66DD9B8A73B3A6561" Name="k_R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="95DD78434E12AF92E41650AB6628988F" Name="prom7" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="34B672F348C6260AEDB320B50CAC22F5" Name="prom8" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E5F02C18441B965DBB68639D64258BD0" Name="exp1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="1B90AEDD43420158963092B212953EA0" Name="prom9" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="85CC6692468A26D6130004AECF1CC696" Name="exp2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5BEF9BB549CE50F6D95815AEB472CFF5" Name="prom10" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="FD2F521E4EEAA342E456349583A6228C" Name="Lam1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B39C2DA642A1754DB88F0583BC48C438" Name="prom11" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B563691D41C34917E02E118AA487C077" Name="prom12" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3EB06FA747EEDA71A256918A425DEAB4" Name="prom13" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9584E26149A71CCD9184B98CEA9A8A72" Name="prom14" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="1164A1F141B61FF46B60F6BD5F28303E" Name="Lam2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EE26712E4B0237F12AC19E8A739037BD" Name="prom16" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DCDEC9CE456B93B63564D5833E393AF1" Name="prom15" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="1BBF7E104A8961E26F5CB98FC50D1E2F" Name="K_sh" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="73E702C3415FBB6941F5E49BAEBE9D3F" Name="exp3" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6AAD5C644EEAA94D90E1DDA40D0D815A" Name="prom22" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DCE855ED4639B9E83C39F0A2E4147FAA" Name="prom17" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="040EBB6D4BF3F2B119A54FA9B069427E" Name="prom23" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="479D97D24B906CF6A5645EAD118363FC" Name="prom19" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="07993A9741BA3990930D8187747D0270" Name="prom18" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AA00EFAD4DB3EA96D64190A14BFDBD5B" Name="prom24" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="FC89BAB54D25C33081F94BBEC039FAD4" Name="variable9" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6F3F3E75474B7D60BE13738B9BF350C3" Name="variable10" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F160492D47D28ED69882D8BECB925F89" Name="Q_SEC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3089D19842D3ACDF5A52FD97BC95E542" Name="Q_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="61D0D4E14C0FE26EA8A55294A4B590ED" Name="Q_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9C2E5EF64D5ECF417E442EB6CF02B114" Name="COUNTER_SEC" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="6FAFC34045A09E805DCF2193347E2C2C" Name="COUNTER_MIN" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="5592F00B4EB18EE76CDB9E92D14A3950" Name="COUNTER_HOUR" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="1D55F13342E4F8C85949579ABAA80B32" Name="Q_LAST_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="094351B2425458D9BC825290DD64A51C" Name="Q_LAST_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6A218F7448011606FAD9BDAD91FE7A79" Name="COUNTER_DAY" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="46BD58D14D1C5D194B19DE8078734C28" Name="Q_LAST_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="41C61CDF483E7B0081644DA5247E999D" Name="Q_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5BA276884074FFF62AB3BBA4B4332791" Name="P1n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AECC9C544210AB9B0F42A388CDE42A3C" Name="P2n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DDE6927A488C8D67AD5CD39654ABA93E" Name="T1n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5C339AA24BD935CEFAA08A89ED65E976" Name="T2n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B9F41BD34C17C210804473A42A4DE449" Name="M" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="C2CA5A3644EC70E0C6742E86B3DC7035" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="F8F237EA414303733EAF1F8811C159F3" Name="M_g" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DE389DAB41098338403A96B19CB0E544" Name="R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="4D852BFE415941757FAB6F822144EBB3" Name="d" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DE5C84114FE0ED957B882D9C01938B4F" Name="Z1n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3C9D0F544122E9EAE9B3F68C2890A061" Name="Z2n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2CCB9B77442F3284002E2BBA9286A3DC" Name="Zsr" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="55B782C94983E26DF05BEC8AD077FBED" Name="pn" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="019C91624605003EE2E572951E0B731F" Name="Vn" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="00D5B83743610AD843626A850DB2A59F" Name="var2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="551CFFC04DFC236719E079AD3ACA1718" Name="var1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="262B73FC4ABC9073FEB77EB53DBBD4A2" Name="Tsr" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CE82503F440634359DC28B9F4ADB95DB" Name="Gtehg" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B2DDCE76494DCAFD0E84CBAFCE3F951C" Name="var3" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2D09DC35421C8C622B7CD8AF748C1464" Name="var4" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="10881CE54509E9E86C920683AC005097" Name="var5" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="FE56D66C49959F24E4A8E09B84BB0140" Name="var6" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5E719AC6464EDB13A872AEBDBB88A5CE" Name="m1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="746C611A4388FD9B3FF422B22725E312" Name="kkk" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7928ABB3435DF43111563C988866D076" Name="Ns" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CB381EAB4ED06038345CC7B33A382BDA" Name="KPD_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A23F901C470C439FD112CF81C64D36BD" Name="N" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6616C15D445CAEC98CC216B489C4F08E" Name="Qn" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="167898F64C74C7FD6A4E10A50192230C" Name="Qm" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="628F635B4027B3C11AC3F3A4757F7708" Name="Gtg" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0E6CDBBD4DE74603D59756906E6FCEA7" Name="KPD" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A12B033F4B9776E9D6FB9A9E156B1996" Name="Q1_SEC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="8A6A2C974C09B16645561C9C03F8F2B8" Name="Q1_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="701693214B01F306DDE45F8044507E70" Name="Q1_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0FE75E5E4AFF3FDC874A72AA7E18D165" Name="Q1_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7F13AD554088070AF73A3F8B879BF85D" Name="Q1_LAST_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EBADEDAE4EBD32A373C40FB3FCC37841" Name="Q1_LAST_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DDAC4F644EE36B97F9B34EAFDEEAC341" Name="Q1_LAST_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0488C6324DBB6FEE1F3D01979B2A82D3" Name="R_TRIG_H" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="A3D1FF0C4750FD4026386DA1EDDEFEAA" Name="R_TRIG_D" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="537A3A2A49F1CE70F671FAA4174D5E3F" Name="hhh" Type="UINT" TypeUUID="C50B45D04CDCD1FA8859FAB8CB6FC7EE" Usage="internal" />
                    <Variable UUID="432451C4414873B1F9133ABD82FED2A2" Name="ddd" Type="UINT" TypeUUID="C50B45D04CDCD1FA8859FAB8CB6FC7EE" Usage="internal" />
                    <Variable UUID="C16F197F459DA6DA757510A8E3FE2C51" Name="new_day" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="6C37ED2B44B30C6B2F249CB91BA9ACBD" Name="new_mon" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="3B2D5F644078C632F2F46ABB1EA5790A" Name="decDT" Type="DECODE_DT" TypeUUID="D3D67DE0408A94FD2E0DC8B84E9E582A" Usage="internal" />
                    <Variable UUID="EBF7437A46D78A8C202924A0AC904EAD" Name="VYB_TK_OK" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="C1AB9ADB41738D9CBCD183B368792EB2" Name="VYB_ST_OK" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                </Variables>
                <ST><![CDATA[/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Счетчики
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//T_SEC - передний фронт в начале каждой секунды
TMR00(NOT TMR_ET[0],T#1000ms,TMR_ET[0],TMRTIME[0]);
R_TRIG04(TMR_ET[0],T_SEC);

//Тип REAL
//0.Суммарная наработка ГПА за все время
if LG.GPA_Work AND T_SEC then 
	STATISTICA[0] := STATISTICA[0] + 1.0 / 3600.0;
end_if;
//1.Суммарная наработка ГТД за все время
if LG.GPA_Work AND T_SEC then 
	STATISTICA[1] := STATISTICA[1] + 1.0 / 3600.0;
end_if;
//2.Суммарная наработка САУ за все время
if LG.GPA_Work AND T_SEC then 
	STATISTICA[2] := STATISTICA[2] + 1.0 / 3600.0;
end_if;

//3.Наработка ГПА после ремонта
if LG.GPA_Work AND T_SEC then 
	STATISTICA[3] := STATISTICA[3] + 1.0 / 3600.0;
end_if;
//4.Наработка ГТД после ремонта
if LG.GPA_Work AND T_SEC then 
	STATISTICA[4] := STATISTICA[4] + 1.0 / 3600.0;
end_if;

//5.Время работы ГПА с момента последнего запуска
if LG.GPA_Work AND T_SEC then 
	STATISTICA[5] := STATISTICA[5] + 1.0 / 3600.0;
end_if;
if us.APK then 
	STATISTICA[5] := 0.0;
end_if;

//6.Время выбега ротора ГГ/СТ
    STATISTICA[6] := Calc_FR.timeNnd;
	STATISTICA[7] := Calc_FR.timeNvd;
	STATISTICA[8] := Calc_FR.timeNst;

//7.ПМНС
if DGO.PMNS_ON AND T_SEC then 
	STATISTICA[9] := STATISTICA[9] + 1.0 / 3600.0;;
end_if;

//8.МНУ1
if DGO.MNU_1_ON AND T_SEC then 
	STATISTICA[10] := STATISTICA[10] + 1.0 / 3600.0;;
end_if;

//9.МНУ2
if DGO.MNU_2_ON AND T_SEC then 
	STATISTICA[11] := STATISTICA[11] + 1.0 / 3600.0;;
end_if;

//10.МННД
if DGO.MNND_ON AND T_SEC then 
	STATISTICA[12] := STATISTICA[12] + 1.0 / 3600.0;;
end_if;

//11.МНОД
if DGO.MNOD_ON AND T_SEC then 
	STATISTICA[13] := STATISTICA[13] + 1.0 / 3600.0;;
end_if;

//12.МНОБД
if DGO.MNOB_ON AND T_SEC then 
	STATISTICA[14] := STATISTICA[14] + 1.0 / 3600.0;;
end_if;

//13.ВОД1
if DGO.VOD_1_ON AND T_SEC then 
	STATISTICA[15] := STATISTICA[15] + 1.0 / 3600.0;;
end_if;

//14.ВОД2
if DGO.VOD_2_ON AND T_SEC then 
	STATISTICA[16] := STATISTICA[16] + 1.0 / 3600.0;;
end_if; 
//15.ВМОН1
if DGO.VMON_1_ON AND T_SEC then 
	STATISTICA[17] := STATISTICA[17] + 1.0 / 3600.0;;
end_if;
//16.ВМОН4
if DGO.VMON_4_ON AND T_SEC then 
	STATISTICA[18] := STATISTICA[18] + 1.0 / 3600.0;;
end_if;
//17.ВМОД2
if DGO.VMOD_2_ON AND T_SEC then 
	STATISTICA[19] := STATISTICA[19] + 1.0 / 3600.0;;
end_if;
//18.ВМОД3
if DGO.VMOD_3_ON AND T_SEC then 
	STATISTICA[20] := STATISTICA[20] + 1.0 / 3600.0;;
end_if;
//19.ВМОД5
if DGO.VMOD_5_ON AND T_SEC then 
	STATISTICA[21] := STATISTICA[21] + 1.0 / 3600.0;;
end_if;
//20.ВМОД6
if DGO.VMOD_6_ON AND T_SEC then 
	STATISTICA[22] := STATISTICA[22] + 1.0 / 3600.0;;
end_if;

//21.Счетчик ХП
R_TRIG00(us.HP, R_TRIG_EDGE[0]);
if R_TRIG_EDGE[0] then STATISTICA[23] := STATISTICA[23] + 1.0;end_if;
//17.Счетчик ГЗ
R_TRIG01(sm_startD.ACC[5] , R_TRIG_EDGE[1]);
if R_TRIG_EDGE[1] then STATISTICA[24] := STATISTICA[24] + 1.0;end_if;
//18.Счетчик НО
R_TRIG02(us.NObs OR us.NOss, R_TRIG_EDGE[2]);
if R_TRIG_EDGE[2] then STATISTICA[25] := STATISTICA[25] + 1.0;
	WAS_BURN := BOOL#0;
end_if;
//19.Счетчик АО
if sm_startD.ACC[5] then WAS_BURN := BOOL#1; end_if;
R_TRIG03((us.AObs OR us.AOss) AND WAS_BURN, R_TRIG_EDGE[3]);
if R_TRIG_EDGE[3] then STATISTICA[26] := STATISTICA[26] + 1.0;
	WAS_BURN := BOOL#0;
end_if;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//РАСХОД ТГ
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if APP_FST_SCN then
//Плотность газа при стандартных условиях, кг/м3
//if P_Rius < 0.4 and P_Rius > 1.0 then
//	RTG_IN01.Ro_s := 0.67;
//else
//	RTG_IN01.Ro_s := P_Rius;
//end_if;
RTG_IN.Ro_s := 0.6935;
//Молярная доза азота, %
//RTG_IN.X_a := RP_GTU_const1.Mxj[10]; '0.0075;
RTG_IN.X_a := 0.69;
//Молярная доза углекистлоты, %
//RTG_IN.X_u := RP_GTU_const1.Mxj[09]; '0.00005;
RTG_IN.X_u := 0.04;
//Диаметр отверстия СУ при стандартных условиях, м
RTG_IN.Dcu_20 :=  0.05;
//Диаметр трубы при стандартных условиях, м
RTG_IN.D_20 :=  0.0783;
//Эквивалентная шероховатость ИТ, м
RTG_IN.R_sh := 0.00022;
//Температурный кэффициент линейного расширения материала СУ
RTG_IN.Alfa_cu := 0.0000097353;
//Температурный кэффициент линейного расширения материала ИТ
RTG_IN.Alfa_t := 0.00011;
//Начальный радиус входной кромки диафрагмы, м
RTG_IN.r_n := 0.00005;
//Текущее время эксплуатации диафрагмы, год
RTG_IN.Tau_t := 26.0;
//Контрактное время
RTG_IN.ContractTime := 100;
end_if;


//Текущие данные для расчета
RTG_IN.tt 	:= AI_HMI.Ttg_in_BTA.PV;
RTG_IN.P_iz := AI_HMI.Ptg_zamer.PV * 1000000.0;//Мпа в Па
RTG_IN.P_at := 101325.0;//Кпа в ПаREAL#101325.0;//
RTG_IN.dP 	:= AI_HMI.dPtg_in_diaf.PV * 1000.0;
RTG_IN.dP_F := AI_HMI.dPtg_in_diaf.Condition.fault_common;
//Сброс ошибок
RTG_OUT.Error := 0;
RTG_OUT.Fault := BOOL#0;

// Исходные данные 

//1 Диаметр отверстия диафрагмы при температуре 20 °С, м. 
// IN.Dcu_20
// ограничение по диаметру отверстия СУ
IF RTG_IN.Dcu_20<0.0125 then
	 RTG_IN.Dcu_20:=0.0125;
	 RTG_OUT.Error  := 2;//Неверное значение диаметра диафрагмы (СУ)
elsif RTG_IN.Dcu_20>0.09 THEN
	 RTG_IN.Dcu_20:=0.09;
	 RTG_OUT.Error  := 2;//Неверное значение диаметра диафрагмы (СУ)
END_IF; 


//2 Внутренний диаметр ИТ при температуре 20 °С, м. 
// IN.D_20
//Ограничение по диаметру Измерительного трубопровода
IF RTG_IN.D_20<0.05 then
   RTG_IN.D_20:=0.05;
   RTG_OUT.Error  := 3;//Неверное значение диаметра измерительного трубопровода
elsif  RTG_IN.D_20>1.0 THEN
   RTG_IN.D_20:=1.0;
   RTG_OUT.Error  := 3;//Неверное значение диаметра измерительного трубопровода
END_IF; 

//3 Среднее арифметическое отклонение профиля шероховатости ИТ 
// IN.R_sh
// ограничение по R_sh
IF (RTG_IN.R_sh < 0.0) OR (RTG_IN.R_sh > 0.01) THEN
	RTG_IN.R_sh := 0.0003;
	RTG_OUT.Error  := 4;//Не верное значение среднее арифметическое отклонение профиля шероховатости ИТ
END_IF; 

//4 Материал, из которого изготовлена диафрагма. Температурный коэффициент линейного расширения материала СУ
// IN.Alfa_cu 
//ограничение по коэф. теплового расширения металла СУ (диафрагмы) 
IF (RTG_IN.Alfa_cu < 0.0) OR (RTG_IN.Alfa_cu>0.0005) THEN
  RTG_IN.Alfa_cu:=0.0000184;
  RTG_OUT.Error  := 5;//Не верное значение коэф. теплового расширения металла СУ (диафрагмы)
END_IF; 

//5 Материал, из которого изготовлен ИТ.Температурный коэффициент линейного расширения материала ИТ
//  IN.Alfa_t

//ограничение по коэф. теплового расширения металла ИТ (измерительного трубопровода)
IF (RTG_IN.Alfa_t < 0.0) OR (RTG_IN.Alfa_t>0.0005) THEN
	RTG_IN.Alfa_t:=0.0000184;
	RTG_OUT.Error  := 6; //Не верное значение коэф. теплового расширения металла ИТ (измерительного трубопровода)
END_IF; 

//6 Начальный радиус входной кромки диафрагмы, м
// IN.r_n

// ограничение по r_n
IF (RTG_IN.r_n < 0.0) OR (RTG_IN.r_n>0.01) THEN
	RTG_IN.r_n:=0.00004;
	RTG_OUT.Error  := 7;//Не верное значение начального радиуса входной кромки диафрагмы
END_IF; 

//7 Текущее время   эксплуатации диафрагмы с момента определения значения начального радиуса входной кромки диафрагмы, год
// IN.Tau_t

IF (RTG_IN.Tau_t < 0.0) OR (RTG_IN.Tau_t > 1.0) THEN 
	RTG_IN.Tau_t := 0.0;
	RTG_OUT.Error  := 8;//Не верное значение тек времени эксл диафрагмы с момента определения значения начальн. радиуса входной кромки
END_IF;

//8 Содержание углекислого газа в природном газе
// IN.X_u
// ограничение по Xu
IF (RTG_IN.X_u < 0.0) OR (RTG_IN.X_u>0.16) THEN 
	RTG_IN.X_u:=0.0147;
	//raschet.Error.X[8] :=1;//Не верное значение содержания углекислого газа в природном газе
END_IF;

//9 Содержание азота в природном газе
// IN.X_a
// ограничение по Xa
IF ( RTG_IN.X_a < 0.0) OR ( RTG_IN.X_a>0.16) THEN
	 RTG_IN.X_a:=0.0088;
	  RTG_OUT.Error  := 9;// Не верное значение содержания азота в природном газе
END_IF;


//10 Плотность природного газа при стандартных условиях, кг/м^3 
// IN.Ro_s
// ограничение по плотностю газа
IF ( RTG_IN.Ro_s<0.6) OR ( RTG_IN.Ro_s>0.8) THEN
	 RTG_IN.Ro_s:=0.735;
	  RTG_OUT.Error  := 10;//Не верное значение плотности природного газа при стандартных условиях
END_IF;

//11 Относительная влажность природного газа, %

//12 Перепад давления на диафрагме, Па
// IN.dP
	IF RTG_IN.dP_F THEN 
  //raschet.Error.X[11] :=  1;
	END_IF;

//13 Избыточное давление, Па
// IN.P_iz
if  RTG_IN.P_iz < 0.0 then
	 RTG_IN.P_iz := 0.0;

end_if;
//14 Атмосферное давление, Па
// IN.P_at

if  RTG_IN.P_at > 140000.0 then
	 RTG_IN.P_at := 140000.0;
elsif  RTG_IN.P_at < 70000.0 then
	 RTG_IN.P_at := 70000.0;
end_if;
//15 Температура природного газа, °С
// IN.t

//Контрактное время
if  RTG_IN.ContractTime < 0 then
	 RTG_IN.ContractTime := 0;
elsif  RTG_IN.ContractTime> 23 then
	 RTG_IN.ContractTime := 23;
end_if;


//Проверка условий возможности вычисления расхода
if  RTG_IN.P_iz <150000.0 or  RTG_IN.P_iz > 5000000.0 
	or  RTG_IN.tt < -20.0 or  RTG_IN.tt > 80.0 
	or  RTG_IN.dP < 20.0 or  RTG_IN.dP > 100000.0 or RTG_IN.dP_F  then
    RTG_OUT.Fault := BOOL#1;
end_if;


if NOT RTG_OUT.Fault then
	//ГОСТ 8.586-2005
	//GAV
	//1 Коэффициент, учитывающий изменение диаметра отверстия диафрагмы, вызванное отклонением температуры природного газа от 20 °С
	//ГОСТ 8.586.1 формула (5.6)
	K_cu := 1.0 + RTG_IN.Alfa_cu * ( RTG_IN.tt - 20.0);

	//2 Диаметр отверстия диафрагмы при рабочей температуре, м
	//ГОСТ 8.586.1 формула (5.4)
	Dcu :=   RTG_IN.Dcu_20 * K_cu;
	//3 Коэффициент, учитывающий изменение диаметра ИТ, вызванное отклонением температуры природного газа от 20 °С
	//ГОСТ 8.586.1 формула (5.7)
	K_t := 1.0 +  RTG_IN.Alfa_t * (RTG_IN.tt - 20.0);
	//4 Внутренний диаметр ИТ при рабочей температуре природного газа, м
	//ГОСТ 8.586.1 [формула (5.5)]
	D :=    RTG_IN.D_20 * K_t;
	// 5 Относительный диаметр отверстия диафрагмы Beta
	//ГОСТ 8.586.1 [формула (3.1)]

	//Огрнничение по отношению диаметров СУ и ИТ
	//ограничения по Beta
	Beta := Dcu/D;
	if Beta < 0.1 then
		Beta := 0.1;
		RTG_OUT.Error  := 11;//Не допустимое отношение диаметра диафрагмы (СУ) к диаметру ИТ
	elsif Beta>0.75 then  
	  	Beta :=0.75;
		RTG_OUT.Error  := 11;//Не допустимое отношение диаметра диафрагмы (СУ) к диаметру ИТ
	end_if;

	//6 Коэффициент скорости входа
	//     8.586.1 [        (3.6)] E:=1 / SQRT(1-(Beta**4));
	prom3 := 1.0-(Beta**4.0);
	prom4 := SQRT(prom3);
	E:=1.0 /prom4 ;
	//7 Поправочный коэффициент, учитывающий притупление входной кромки диафрагмы K_p
	//ГОСТ 8.586.2 [формула (5.13)]
	a:=0.000195;//  - параметр, учитывающий тип измеряемой среды, который принимают равным 0,00019 для жидкости 0,000195  для газа и 0,0002  для пара;
	r_k:= a - (a -  RTG_IN.r_n) * 2.718282**(- RTG_IN.Tau_t / 3.0);//радиус входной кромки диафрагмы
	if r_k < 0.0004 * D then
		K_p := 1.0;
	else
		K_p:= 0.9826 +(r_k / Dcu + 0.0007773)**0.6;
	end_if;

	//8 Абсолютное давление природного газа перед диафрагмой, Па
	//ГОСТ 8.586.5 [формула (6.2)]
	//
	P :=  RTG_IN.P_at +  RTG_IN.P_iz;
	P_MPa := P/1000000.0 ;//Для расчетов по ГОСТ 30319


	//9 Термодинамическая температура природного газа, K
	//ГОСТ 8.586.5 [формула (6.3)]
	//
	//ограничение по Т газа
	IF RTG_IN.tt < -50.0 then
		 RTG_IN.tt := -50.0;
		 RTG_OUT.Error  := 12;
	elsif  RTG_IN.tt > 150.0 then
		 RTG_IN.tt := 150.0;
		 RTG_OUT.Error  := 12;
	end_if;

	TT :=  RTG_IN.tt + 273.15;


	//10 Фактор сжимаемости природного газа при стандартных условиях
	//и известных плотности природного газа при стандартных условиях и содержании в нем азота и диоксида углерода, т.е. по формуле
	//ГОСТ 30319.1 [формула (24)] 
	// ВНИМАНИЕ в ГОСТ 30319 в расчетах давление измеряется в МПа
	//Z_c
	Z_c := 1.0 - (0.0741 *  RTG_IN.Ro_s - 0.006 - 0.063 *  RTG_IN.X_a - 0.0575 *  RTG_IN.X_u)**2.0;
	//11 Фактор сжимаемости природного газа при рабочих условиях
	//ГОСТ 30319.2 [формула (6)]
	//Z
	P_pk:= 2.9585 * (1.608 - 0.05994 *  RTG_IN.Ro_s +  RTG_IN.X_u - 0.392 *  RTG_IN.X_a);//МПа
	T_pk:= 88.25*(0.9915+1.759* RTG_IN.Ro_s -  RTG_IN.X_u - 1.681*RTG_IN.X_a);

	if P_pk <= 0.0 or T_pk <= 0.0 then
		  RTG_OUT.Error  := 13;//Ошибка в расчете фактора сжимаемости при рабочих условиях
		Z:= Z_c;//Приравниваем фактор сжимемости  при рабочих условиях к значению при нормальных условиях
	else

		P_a:= 0.6714 * (P_MPa / P_pk) + 0.0147;//МПа
		T_a:= 0.71892*(TT/T_pk)+0.0007;
		dT_a:= T_a - 1.09;
		//************************
		//Ограничение по dT_a
		if dT_a > 0.3 then
			dT_a :=0.3;
		elsif dT_a<-0.25 then
			dT_a := -0.25;
		end_if;
		//***********************

		IF (P_a >= 0.0 & P_a <= 2.0 & dT_a >= 0.0 & dT_a <= 0.3) THEN 
			F:=(75.0 * (10.0**(-5)) * (P_a**2.3)) / (2.718282**(20.0 * dT_a)) + 11.0 * (10.0**-4) * (dT_a**0.5)* (P_a * (2.17 - P_a + 1.4 * (dT_a**0.5))**2.0);
		END_IF;
		IF (P_a >= 0.0 & P_a < 1.3 & dT_a >= -0.25 & dT_a < 0.0) THEN 
			F:=(75.0 * (10.0**-5) * (P_a**2.3) * (2.0 - 2.718282**(20.0 * dT_a)) + 1.317 * P_a * (1.69 - (P_a**2))*(dT_a**4));
		END_IF;
		IF (P_a >= 1.3 & P_a < 2.0 & dT_a >= -0.25 & dT_a < 0.0) THEN 
			F:=(75.0 * (10.0**-5) * (P_a**2.3) * (2.0 - 2.718282**(20.0 * dT_a)) + 0.455 * P_a * (1.3 - P_a) * (1.69 * (2.0**1.25) -(P_a**2)) * (dT_a * (0.03249 + 18.028 * (dT_a** 2)) + (dT_a**2) * (2.0167 + (dT_a**2) * (42.844 + 200.0 * (dT_a**2))))); 
		END_IF;

		Tu_1:=(T_a**5) / ((T_a**2) * (6.60756 * T_a - 4.42646) + 3.22706);
		Tu_0:=(((T_a**2) * (1.77218 - 0.8879 * T_a) + 0.305131) * Tu_1) /(T_a**4);

		B_1:=(2.0 * Tu_1 / 3.0) -(Tu_0**2);
		B_0:=Tu_0 * (Tu_1 -(Tu_0**2)) + 0.1 * Tu_1 * P_a * (F - 1.0);
		B_2:=(B_0+((B_0**2)+(B_1**3))**0.5)**0.333333;


		Z:=(((1.0 + (0.00132) /(T_a**3.25))**2 / (B_1 / B_2 - B_2 + Tu_0)) * (P_a / 10.0));
	end_if;

	//12 Коэффициент сжимаемости природного газа
	//ГОСТ 30319.1 [формула (7)]
	//K
	K:= Z/Z_c;
	//13 Плотность природного газа, кг/м 
	//ГОСТ 30319.1 [формула (6)] Па•с
	//Плотность в рабочих условиях (Стандартные условия t =293.15 град К и Р = 0.101325 МПа)

	Ro:= RTG_IN.Ro_s * P_MPa * 293.15/ (0.101325 * TT * K);


	//14 Динамическая вязкость природного газа
	//ГОСТ 30319.1 [формулы (44) и (45)]
	//Псевдокритические давления (МПа) и температура ГОСТ 30319.2 формулы 17 и 18 
	//P_pk:= 2.9585 * (1.608 - 0.05994 *  IN.Ro_s +  IN.X_u - 0.392 *  IN.X_a);
	//T_pk:= 88.25*(0.9915+1.759* IN.Ro_s-  IN.X_u-1.681*  IN.X_a);

		
	if  RTG_OUT.Error = 13 then
		  RTG_OUT.Error  := 13; //Ошибка в расчете динамической вязкость природного газа
	else
		//Привденные давление и температура
		P_p:=P_MPa/P_pk;
		T_p:=TT/T_pk;
		//динамической вязкости природного газа и многих его компонентов, зависящую от температуры, при давлениях до 0,5 МПа , мкПа?с
		denominator := (RTG_IN.Ro_s**0.5)+2.08-1.5*( RTG_IN.X_a+ RTG_IN.X_u);
		if denominator > 0.0 then
			Mu_t:=3.24*((TT**0.5)+1.37-9.09*(RTG_IN.Ro_s**0.125))/denominator;
//			if S:V then //Переполнение 
//				  raschet.Error.14 :=1; //Ошибка в расчете динамической вязкость природного газа
//			else
				//Вязкость при повышенных давлениях (до 12 МПа) для природного газа вычисляют по формуле
				denominator := 30.0*(T_p-1.0);
				if denominator <> 0.0 then
					C_mu:=1.0+((P_p**2)/ denominator);
					Mu:=Mu_t*C_mu * 0.000001;//Пересчет в Па*с
				else
					  RTG_OUT.Error  := 14; //Ошибка в расчете динамической вязкость природного газа
	//			end_if;
			end_if;
		else
			  RTG_OUT.Error  := 15; //Ошибка в расчете динамической вязкость природного газа
		end_if;
	end_if;

	if  RTG_OUT.Error =15 then
		Mu:= 0.0000111315;// Fallback при ошибке в расчетах динамической вязкости
	end_if;
	//15 Показатель адиабаты природного газа
	//ГОСТ 30319.1 [формула (28)]
	K_ad:=1.556 * (1.0 + 0.074 *  RTG_IN.X_a) - 3.9 * (10.0**-4) * TT * (1.0 - 0.68 *  RTG_IN.X_a) - 0.208 *  RTG_IN.Ro_s +((P_MPa / TT)**1.43) * (384.0 * (1.0 -  RTG_IN.X_a) *((P_MPa / TT)**0.8) + 26.4 * RTG_IN.X_a);

//	if S:V then
//		  raschet.Error.15 :=1; //Ошибка в расчете показатели адиабаты природного газ
//		K_ad:= 1.3;//
//	end_if;//

	//16 Коэффициент расширения131072
	//ГОСТ 8.586.2 [формула (5.7)]
	if  RTG_IN.dP/P > 0.025 and K_ad = 0.0 then
		  RTG_OUT.Error  := 16; //Ошибка в расчете Коэффициент расширения
		ee:= 1.0; //Fallback для коэффициента расширения
	else
		ee:= 1.0 - (0.351 + 0.256 *(Beta**4) + 0.93 *(Beta**8)) * (    1.0 - (1.0 -  RTG_IN.dP / P)**(1.0 / K_ad)   );
	end_if;



	//Расчет расхода природного газа,
	 c2:= 1.0;
	 c1:= 0.0;
	idint :=0.0;

	L_1:=0.0; // углового способа отбора  давлений
	L_2:=0.0;

	IF D <0.07112 THEN 
		M_2:=0.011*(0.75-Beta)*(2.8-D/0.0254);
	END_IF;
	IF D>=0.07112 THEN
		 M_2:=0.0;
	END_IF;

	///1 Начальное значение числа Рейнольдса
	Re := 1000000.0;
	// Массивы коээфициентов, используемые при расчете поправочного коэффициента, учитывающего шероховатость внутренней поверхности ИТ
	A_0[0]:=8.87; A_0[1]:=-3.7114; A_0[2]:=0.41841; A_0[3]:=0.0; A_0[4]:=27.23; A_0[5]:=-11.458; 
	A_0[6]:=1.6117; A_0[7]:=-0.07567; A_0[8]:=16.5416; A_0[9]:=-6.60709; A_0[10]:=0.88147; A_0[11]:=-0.039226;
	A_1[0]:=6.7307; A_1[1]:=-5.5844; A_1[2]:=0.732485; A_1[3]:=0.0; A_1[4]:=-25.928; A_1[5]:=12.426; 
	A_1[6]:=-2.09397; A_1[7]:=0.106143; A_1[8]:=322.594; A_1[9]:=-132.2; A_1[10]:=17.795; A_1[11]:=-0.799765;
	A_2[0]:=-10.244; A_2[1]:=5.7094; A_2[2]:=0.76477; A_2[3]:=0.0; A_2[4]:=1.7622; A_2[5]:=-3.8765; A_2[6]:=1.05567;
	A_2[7]:=-0.076764; A_2[8]:=-92.029; A_2[9]:=37.935; A_2[10]:=-5.1885; A_2[11]:=0.23583;

	R_a:= RTG_IN.R_sh/3.141592;
	
	prom2 := (( c2 -  c1) /  c2);
	
	prom1 := ABS(prom2);
	
	WHILE  prom1 > 0.00001 and idint <10.0 DO //Ограничение по точности и кол-ву итераций
		idint := idint +1.0;
		//Flow OK:=0; 

	// Расчет Коэффициент истечения
	//ГОСТ 8.586.2 [формула (5.6)]
		A0:=0.0;
		A1:=0.0;
		A2:=0.0;
		 c1:=  c2;
		M_1:= 2.0 * L_2 / (1.0 - Beta);
		aa:= (19000.0 * Beta / Re)**0.8;
	//2 Коэффициент истечения
	//ГОСТ 8.586.2 [формула (5.6)]
		c:=0.5961 + 0.026 *(Beta**2) - 0.216 *(Beta**8)+0.000521*(((10.0**6) * Beta / Re)**0.7)+ 	(0.0188+0.0063*aa)*(Beta**3.5) * (((10.0**6)/Re)**0.3)+(0.043+0.08*2.718282**(-10.0 * L_1) - 0.123 * 2.718282**(-7.0*L_1)) * (1.0 -0.11*aa)*(Beta**4)/(1.0 -(Beta**4))-0.031 * (M_1 - 0.8 *(M_1**1.1)) *(Beta**1.3) + M_2;
	// 3 Поправочный коэффициент, учитывающий шероховатость внутренней поверхности ИТ
	//ГОСТ 8.586.2 [формула (5.11)]
		//Поправочный коэф. на шероховатость ИТ ф.5.11 ГОСТ 8.586.2-2005

	// Определяем Ra_max
		j:=0;
		IF (Re > 10.0**4 & Re <= 10.0**5) THEN 
			j:= 0;
		END_IF;
		IF (Re > 10.0**5 & Re <= 3.0*10.0**6) THEN
			j:= 4;
		END_IF;
		IF (Re > 3.0*10.0**6 & Re <= 10.0**8) THEN
			j:= 8;
		END_IF;

		for  i:= 0 to 3 do
		prom20 := LOG(Re);
		prom5 := prom20**i;
		prom21 := i+j;
			A0:=A0 + A_0[prom21] *(prom5);
			A1:=A1 + A_1[prom21] *(prom5);
			A2:=A2 + A_2[prom21] *(prom5);
		end_for;

		IF (Re <= 10.0**4) THEN 
			R_amax:= 0.718866 * (Beta**-3.887) + 0.364;
		END_IF;
		IF (Re > 10.0**4 & Beta < 0.65) THEN 
			R_amax:=A0 *(Beta**A1) + A2;
		END_IF;
		IF (Re > 10.0**4 & Beta >= 0.65) THEN 
			R_amax:=A0 *(0.65**A1) + A2;
		END_IF;


		IF (R_amax >= 15.0) THEN
		 	R_amax:=(15.0*10.0**-4) * D;
		else
			R_amax := R_amax * D * 0.0001;

		END_IF;

	// Определяем Ra_min

		prom6 := LOG(Re);
		IF (Beta < 0.65) THEN 
			R_amin:=7.1592 - 12.387 * Beta - (2.0118 - 3.469 * Beta) * prom6 + (0.1382 - 0.23762 * Beta) * (prom6**2);
		END_IF;
		IF (Beta >= 0.65) THEN 
			R_amin:=-0.892353 + 0.24308 * prom6 - 0.0162562 * (prom6**2);
		END_IF;
		IF (R_amin <= 0.0 OR Re < 3.0*10.0**6) THEN
			R_amin:= 0.0;
		END_IF;

	//	R_amin

		A_sh:= 3.141592 *R_a;               
		k_D:= (0.26954 * 3.141592 * R_a) / D; 
		k_R:= 5.035 / Re;      
		
		prom7 := k_D + 3.3333 * k_R;	
		prom8 := LOG(prom7);
		exp1 := k_R * prom8;

		if exp1 > k_D then
			  ///raschet.Error.X[17]:=1;//Oшибка в расчете поправочного коэффициента, учитывающий шероховатость внутренней поверхности ИТ
		else
			prom9 := k_D - exp1;
			prom10 := LOG(prom9);
			exp2 := (2.0 * A_sh / D) - (37.36 * prom10 / Re);
			if exp2 < 0.0 then
				  ///raschet.Error:=1;//Oшибка в расчете поправочного коэффициента, учитывающий шероховатость внутренней поверхности ИТ
				Lam1:= 0.0001;
			else
				prom11 :=LOG(exp2);
				Lam1:= (    1.74 - 2.0 * prom11     )**-2;
   	   
				IF (R_a > R_amax) THEN
					A_sh:= 3.141592*R_amax;
					k_D:= 0.26954 *3.141592* R_amax/D;
				END_IF;
				IF (R_a < R_amin) THEN 
					A_sh:=3.141592*R_amin;
					k_D:= 0.26954 * 3.141592 * R_amin/D;
				END_IF;

			end_if;
			
			prom12 := (k_D + 3.3333 * k_R);
			prom13 :=LOG(prom12);
			exp1 := k_R * prom13;
			if exp1 > k_D then
					RTG_OUT.Error  := 17;
				  //raschet.Error.X[17]:=1;//Oшибка в расчете поправочного коэффициента, учитывающий шероховатость внутренней поверхности ИТ
			else
				prom14 :=(k_D - exp1);
				prom15 := LOG(prom14);
				exp2 := (2.0 * A_sh / D) - (37.36 * prom15/ Re);
				if exp2 < 0.0 then
					  RTG_OUT.Error  := 17;//Oшибка в расчете поправочного коэффициента, учитывающий шероховатость внутренней поверхности ИТ
					Lam2:= 0.0001;
				else
					prom16 := LOG(exp2);
					Lam2:= (    1.74 - 2.0 * prom16     )**-2;
				end_if;
			end_if;
	
		end_if;
	// находдим Кш наконец-то!!!

		if RTG_OUT.Error = 17 then
			K_sh := 1.0;
		else
			K_sh:=1.0 + 5.22 * (Beta**3.5) * (Lam1 - Lam2);
		end_if;

	//4 Объемный расход природного газа, приведенный к стандартным условиям,  куб м /с
	//ГОСТ 8.586.5 [формула (5.8)]
		exp3 := 0.25 *3.141592 *(Dcu**2) * c * E * K_sh * K_p * ee ;
		prom22 := 2.0 *  RTG_IN.dP * (( P * 293.15) / ( RTG_IN.Ro_s * 101325.0 *TT* K));
		prom17 := SQRT(prom22);
		 c2:= exp3 * prom17;

	//5 Уточненное значение числа Рейнольдса
	//ГОСТ 8.586.5 [формула (5.11)]
		Re:=(4.0 *  c2 *  RTG_IN.Ro_s) / (3.141592* D * Mu); 

	end_while;

	  RTG_OUT.q_c :=  c2;
	  prom23 := 2.0 *  RTG_IN.dP *  RTG_IN.Ro_s * P * 293.15 / (101325.0 * TT * K);
	  prom18 := SQRT(prom23);
	  RTG_OUT.q_m := exp3 * prom18;
	  prom24:=  2.0 *  RTG_IN.dP * 101325.0 * TT * K / ( RTG_IN.Ro_s * 293.15 *P );
	  prom19 := SQRT(prom24);
	  RTG_OUT.q_v := exp3 * prom19;
else
	  RTG_OUT.q_c := 0.0;
	  RTG_OUT.q_m := 0.0;
	  RTG_OUT.q_v := 0.0;
end_if;




// Накопление часового,суточного расхода
if T_SEC then 
 Q_SEC := RTG_OUT.q_v;       // м^3/сек
 COUNTER_SEC := COUNTER_SEC + 1 ;
 Q_HOUR  := Q_HOUR + Q_SEC ;            // накопленный часовой расход
 Q_DAY   := Q_DAY + Q_SEC ;              // накопленный суточный расход
 Q_MONTH := Q_MONTH + Q_SEC ;          // накопленный месячный расход
end_if;

if COUNTER_SEC = 60 then  
 	COUNTER_MIN := COUNTER_MIN + 1 ;
 	COUNTER_SEC := 0 ;
end_if;

if COUNTER_MIN = 60 then
 	COUNTER_HOUR := COUNTER_HOUR +1 ;
 	COUNTER_MIN := 0 ;
 	Q_LAST_HOUR := Q_HOUR ;            // накопленный часовой расход за прошедший час
    Q_HOUR := 0.0 ;
end_if;
(*
if COUNTER_HOUR = 23 then
 COUNTER_HOUR := 0 ; 
 Q_LAST_DAY := Q_DAY ;                 // накопленный часовой расход за прошедшие сутки
 Q_DAY := 0.0 ;
end_if;

if COUNTER_DAY = 30 then
 COUNTER_DAY := 0 ; 
 Q_LAST_MONTH := Q_MONTH ;                 // накопленный часовой расход за прошедший месяц
 Q_MONTH := 0.0 ;
end_if;
*)


//Выделяем начало смены, например в 10 час утра, и начало первого числа каждого месяца
//Делаем это 1 раз в секунду
//decDT(NOW());
if T_SEC then 
	decDT(IN:=NOW(), HOURS=>hhh, DAY=>ddd);
	R_TRIG_H(hhh = UINT#10, new_day);
	R_TRIG_D(ddd = UINT#1,  new_mon);
end_if;


if new_day then
 Q_LAST_DAY := Q_DAY ;                 // накопленный часовой расход за прошедшие сутки
 Q_DAY := 0.0 ;
end_if;

if new_mon then
 Q_LAST_MONTH := Q_MONTH ;             // накопленный часовой расход за прошедший месяц
 Q_MONTH := 0.0 ;
end_if;

new_day := FALSE;
new_mon := FALSE;



RTG_SUM[0] := RTG_OUT.q_v *1000.0;
RTG_SUM[1] := RTG_OUT.q_m * 1000.0 /60.0;
RTG_SUM[2] := RTG_OUT.q_c * 1000.0/60.0;
RTG_SUM[3] := Q_HOUR;
RTG_SUM[4] := Q_LAST_HOUR;
RTG_SUM[5] := Q_DAY ;
RTG_SUM[6] := Q_LAST_DAY;
RTG_SUM[7] := Q_MONTH ;
RTG_SUM[8] := Q_LAST_MONTH;


]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="310654DC4DDFDEFFA3C02D9497EB83C2" Name="Statistica1">
                <Variables>
                    <Variable UUID="C537CE0E49B60778AAAFD5ACE40A0F90" Name="TMR00" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="6BFD3B4542DB82948E476280EE1B733F" Name="TMR01" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                    <Variable UUID="C172C9164ACDAEE69CF5A5ACFB6CA0F5" Name="TMR_ET" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="2" Array="TRUE" Usage="internal" />
                    <Variable UUID="AED4F4DA462A373F7C1BC08133454340" Name="TMRTIME" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Size="4" Array="TRUE" Usage="internal" />
                    <Variable UUID="3E312FBA47417338D99F90914B133A0A" Name="Cond1" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="BD2F47224BDD4E4652B5C7A46D6D88A7" Name="Cond2" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="F880B98543AC6ADA3C90FCB07ACE0B5B" Name="R_TRIG00" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="E864C47645DE5C52C5CF1E85056CF41C" Name="R_TRIG01" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="703E43C24BA4198599669584DAB6D945" Name="R_TRIG02" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="7FE9B85E43032E12AB8988AAC8E938B0" Name="R_TRIG03" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="FE1367FE42DEFA3233BC42A73811F5F7" Name="R_TRIG_EDGE" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Size="4" Array="TRUE" Usage="internal" />
                    <Variable UUID="82D8BE3344EF5C667A7C52941FD673B0" Name="WAS_BURN" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="151D663747B5133F63CBDB92C7C688E1" Name="R_TRIG04" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="48133AA14D34F1370E0DF1ABA5D5FEAA" Name="T_SEC" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="E66CE7B941F6CA6ECE9632825D5CAEE7" Name="K_cu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="27CF50844B9CF0176818E1848BA4F8DD" Name="Dcu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3E6067BF4C98B386B0D9BFB451A03D5D" Name="K_t" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F5E4B99648CA58084A2E988CA5143613" Name="D" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EB95A7D948C3B8C46402BAAFA9A90F5D" Name="Beta" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="60CFA837454691A2EF9BE8A36A89582C" Name="prom3" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="98D384A44CFA543D07B1F984A71029BF" Name="prom4" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9C23D09F47D4995FC23BA8B355FCF2CE" Name="E" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6F9CD5CD416180701FAB63A5B4499CA5" Name="a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="BB7460FB45600BAC125327A5173AA4C9" Name="r_k" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7592EF7C4D5F6E95BB3EB5940311BBF6" Name="K_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6CE5C91B4F01C579393675AFA41226BC" Name="TT" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7810332C4E6D8E84276B31B827F19BE7" Name="P" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="41F3464E431EEA4F4409F7A1D52181D1" Name="P_MPa" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3039580248DD6E23525D37AF9AE5624B" Name="Z_c" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0B486182495F14B61B5FFAA872745BF0" Name="P_pk" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D3DB702A4164009A6B52BB96E5404EE1" Name="T_pk" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="633556CB47335BF8217F1B9CD1FB275F" Name="Z" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="77A8897C40C2ABC68D43DA809E478394" Name="P_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="925BBFCA4F35FDBD900FB89D46AB0C1F" Name="T_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="13DB814E4DD75E1AB47D03B133066910" Name="dT_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0679B9DF4EFA9BA25CBF5799F27C0931" Name="Tu_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DE8B879044558838C3CC2A86C7607337" Name="Tu_0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3CBAA4A24C6B43806E2989A59CAF287D" Name="B_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="63FC48944BCB1CDE40B768B677D061BA" Name="B_0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3D4DE70444E62D0DD4CF9A8A43D2E9D8" Name="B_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="BA21FC34474C0CF939D0B2A59A148013" Name="K" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="015C58FF4F36A1F7A27D47A8E67A52E7" Name="Ro" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E7175AA84529123AA969098B1CFBAADA" Name="F" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3DFDB3694268073E9627588182F29EB8" Name="P_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="719833FE40B6D29212D6FCAC3A10610A" Name="T_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E21C833D4C15B8A6076338959133710C" Name="denominator" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E4C96FBB4A24362D87109295951C0369" Name="C_mu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="257E07404B8643F2CAC5C2BC16860A05" Name="Mu" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="D74D7828446646181E6BD6BD21EF886B" Name="Mu_t" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="277202A34D3476097A9435A944D958C6" Name="K_ad" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AC6FFE0B4C01948E816586B43C5EAC1B" Name="ee" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F68E9C4A49EF663B5153CAA63944D6E7" Name="c2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9E6DFE574D22DB4FC23CFA876A92632C" Name="c1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="17494EAE42D7F8C332C90392DBFDD09D" Name="idint" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="67F9B3EC4142C82DE57B3E9A3AB74BD1" Name="L_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="91001AEA4C6CDCBE4B1B21A527D6F508" Name="L_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2CB2597149C77F31146D7FA62540BD51" Name="M_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="10633AB24B00A5915314B39729CB2026" Name="Re" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DAB95BBE4CA1402799AF4A8198F8EE44" Name="A_0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="12" Array="TRUE" Usage="internal" />
                    <Variable UUID="2087D1A545DE57C782CE65AB17BF2706" Name="A_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="12" Array="TRUE" Usage="internal" />
                    <Variable UUID="B4C1F2F84197DB171C32B19C5D937049" Name="A_2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Size="12" Array="TRUE" Usage="internal" />
                    <Variable UUID="5B53A4844D062AD795CE8098E4048982" Name="R_a" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7298E7744F5681A7E41027BD87FB24C8" Name="A0" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="8211F99940771DDDBD203DA33A635226" Name="A1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="605600EF42481CA787480580ACB898E4" Name="A2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="BB0256AC4DFFA2E344F390BACAAA6F8A" Name="M_1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EAEA0A0547D2AC1BE90DF39DD4843C72" Name="aa" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A008A44741177891AF7DD0BC14D64820" Name="c" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0B82FD3C459C6891208A0BBBE2C37FBE" Name="j" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="36D565594DCB53642E08C3B1E2EBDF81" Name="prom2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="415D15B841F04C8134C8AE8020C75D40" Name="prom1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2C47643D4F14F6B554FC588543BFB4B1" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="0C3C25884AD2C7640A62B98D4ACD86EB" Name="prom20" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E23700384F934FB373F9B684DA1C6D6D" Name="prom5" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CB8C8A4C43A4EC5571264581C1B63830" Name="prom21" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="3EFAD55640B1573B72B6AEB1A83E4135" Name="R_amax" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5FE32A28436A341ABCF6BEA0D578D745" Name="prom6" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5B7EBF4B466D17DCBDA6069F039687A5" Name="R_amin" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="38A763D343A56FB26EDF68976D8C88A9" Name="A_sh" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7E10208641B00D8AD1D589A1107926BD" Name="k_D" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B9CAB7D24AA36EE66DD9B8A73B3A6561" Name="k_R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="95DD78434E12AF92E41650AB6628988F" Name="prom7" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="34B672F348C6260AEDB320B50CAC22F5" Name="prom8" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="E5F02C18441B965DBB68639D64258BD0" Name="exp1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="1B90AEDD43420158963092B212953EA0" Name="prom9" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="85CC6692468A26D6130004AECF1CC696" Name="exp2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5BEF9BB549CE50F6D95815AEB472CFF5" Name="prom10" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="FD2F521E4EEAA342E456349583A6228C" Name="Lam1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B39C2DA642A1754DB88F0583BC48C438" Name="prom11" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B563691D41C34917E02E118AA487C077" Name="prom12" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3EB06FA747EEDA71A256918A425DEAB4" Name="prom13" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9584E26149A71CCD9184B98CEA9A8A72" Name="prom14" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="1164A1F141B61FF46B60F6BD5F28303E" Name="Lam2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EE26712E4B0237F12AC19E8A739037BD" Name="prom16" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DCDEC9CE456B93B63564D5833E393AF1" Name="prom15" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="1BBF7E104A8961E26F5CB98FC50D1E2F" Name="K_sh" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="73E702C3415FBB6941F5E49BAEBE9D3F" Name="exp3" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6AAD5C644EEAA94D90E1DDA40D0D815A" Name="prom22" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DCE855ED4639B9E83C39F0A2E4147FAA" Name="prom17" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="040EBB6D4BF3F2B119A54FA9B069427E" Name="prom23" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="479D97D24B906CF6A5645EAD118363FC" Name="prom19" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="07993A9741BA3990930D8187747D0270" Name="prom18" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AA00EFAD4DB3EA96D64190A14BFDBD5B" Name="prom24" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="FC89BAB54D25C33081F94BBEC039FAD4" Name="variable9" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6F3F3E75474B7D60BE13738B9BF350C3" Name="variable10" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="F160492D47D28ED69882D8BECB925F89" Name="Q_SEC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3089D19842D3ACDF5A52FD97BC95E542" Name="Q_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="61D0D4E14C0FE26EA8A55294A4B590ED" Name="Q_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="9C2E5EF64D5ECF417E442EB6CF02B114" Name="COUNTER_SEC" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="6FAFC34045A09E805DCF2193347E2C2C" Name="COUNTER_MIN" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="5592F00B4EB18EE76CDB9E92D14A3950" Name="COUNTER_HOUR" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="1D55F13342E4F8C85949579ABAA80B32" Name="Q_LAST_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="094351B2425458D9BC825290DD64A51C" Name="Q_LAST_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6A218F7448011606FAD9BDAD91FE7A79" Name="COUNTER_DAY" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="46BD58D14D1C5D194B19DE8078734C28" Name="Q_LAST_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="41C61CDF483E7B0081644DA5247E999D" Name="Q_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5BA276884074FFF62AB3BBA4B4332791" Name="P1n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="AECC9C544210AB9B0F42A388CDE42A3C" Name="P2n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DDE6927A488C8D67AD5CD39654ABA93E" Name="T1n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5C339AA24BD935CEFAA08A89ED65E976" Name="T2n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B9F41BD34C17C210804473A42A4DE449" Name="M" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="C2CA5A3644EC70E0C6742E86B3DC7035" Name="i" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                    <Variable UUID="F8F237EA414303733EAF1F8811C159F3" Name="M_g" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DE389DAB41098338403A96B19CB0E544" Name="R" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="4D852BFE415941757FAB6F822144EBB3" Name="d" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DE5C84114FE0ED957B882D9C01938B4F" Name="Z1n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="3C9D0F544122E9EAE9B3F68C2890A061" Name="Z2n" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2CCB9B77442F3284002E2BBA9286A3DC" Name="Zsr" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="55B782C94983E26DF05BEC8AD077FBED" Name="pn" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="019C91624605003EE2E572951E0B731F" Name="Vn" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="00D5B83743610AD843626A850DB2A59F" Name="var2" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="551CFFC04DFC236719E079AD3ACA1718" Name="var1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="262B73FC4ABC9073FEB77EB53DBBD4A2" Name="Tsr" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CE82503F440634359DC28B9F4ADB95DB" Name="Gtehg" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="B2DDCE76494DCAFD0E84CBAFCE3F951C" Name="var3" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="2D09DC35421C8C622B7CD8AF748C1464" Name="var4" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="10881CE54509E9E86C920683AC005097" Name="var5" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="FE56D66C49959F24E4A8E09B84BB0140" Name="var6" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="5E719AC6464EDB13A872AEBDBB88A5CE" Name="m1" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="746C611A4388FD9B3FF422B22725E312" Name="kkk" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7928ABB3435DF43111563C988866D076" Name="Ns" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="CB381EAB4ED06038345CC7B33A382BDA" Name="KPD_p" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A23F901C470C439FD112CF81C64D36BD" Name="N" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="6616C15D445CAEC98CC216B489C4F08E" Name="Qn" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="167898F64C74C7FD6A4E10A50192230C" Name="Qm" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="628F635B4027B3C11AC3F3A4757F7708" Name="Gtg" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0E6CDBBD4DE74603D59756906E6FCEA7" Name="KPD" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="A12B033F4B9776E9D6FB9A9E156B1996" Name="Q1_SEC" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="8A6A2C974C09B16645561C9C03F8F2B8" Name="Q1_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="701693214B01F306DDE45F8044507E70" Name="Q1_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="0FE75E5E4AFF3FDC874A72AA7E18D165" Name="Q1_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="7F13AD554088070AF73A3F8B879BF85D" Name="Q1_LAST_HOUR" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="EBADEDAE4EBD32A373C40FB3FCC37841" Name="Q1_LAST_DAY" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="DDAC4F644EE36B97F9B34EAFDEEAC341" Name="Q1_LAST_MONTH" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                    <Variable UUID="36B36A374C7591206874E0B4B2658150" Name="R_TRIG_H" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="9043AAE74871BB0EADD5E699DDA2FD07" Name="R_TRIG_D" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                    <Variable UUID="D956EC144C678BBB1515C78AD97FB4E4" Name="hhh" Type="UINT" TypeUUID="C50B45D04CDCD1FA8859FAB8CB6FC7EE" Usage="internal" />
                    <Variable UUID="28C76EFF4CED92A6991D5699C6952DDD" Name="ddd" Type="UINT" TypeUUID="C50B45D04CDCD1FA8859FAB8CB6FC7EE" Usage="internal" />
                    <Variable UUID="A664F3B84C6EAB7D124C8389701505C5" Name="new_day" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="FA51FD594B9495442AB627B46837D0B7" Name="new_mon" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                    <Variable UUID="DF1AE7AB4562F09AEF8FCDAD5A9361D5" Name="decDT" Type="DECODE_DT" TypeUUID="D3D67DE0408A94FD2E0DC8B84E9E582A" Usage="internal" />
                </Variables>
                <ST><![CDATA[/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//РАСЧЕТ РАСХОДА ТЕХНОЛОГИЧЕСКОГО ГАЗА
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if APP_FST_SCN then
	//'Молярная масса
	RP_GTU_const1.Mj[00]	:= 	16.043	;	//'Метан
	RP_GTU_const1.Mj[01]	:= 	30.0700	;	//'Этан
	RP_GTU_const1.Mj[02]	:= 	44.0970	;	//'Пропан
	RP_GTU_const1.Mj[03]	:= 	58.1230	;	//'Изобутан
	RP_GTU_const1.Mj[04]	:= 	58.1230	;	//'н-Бутан
	RP_GTU_const1.Mj[05]	:= 	72.1500	;	//'Неопентан
	RP_GTU_const1.Mj[06]	:= 	72.1500	;	//'Изопентан
	RP_GTU_const1.Mj[07]	:= 	72.1500	;	//'н-Пентан
	RP_GTU_const1.Mj[08]	:= 	86.1770	;	//'Гексаны
	RP_GTU_const1.Mj[09]	:= 	44.0100	;	//'Диоксид углерода
	RP_GTU_const1.Mj[10]	:= 	28.0135	;	//'Азот
	RP_GTU_const1.Mj[11]	:= 	31.9980	;	//'Кислород

//'Молярная доля
RP_GTU_const1.Mxj[00]	:=	96.73	;	//'Метан
RP_GTU_const1.Mxj[01]	:=	1.71	;	//'Этан
RP_GTU_const1.Mxj[02]	:=	0.55	;	//'Пропан
RP_GTU_const1.Mxj[03]	:=	0.09	;	//'Изобутан
RP_GTU_const1.Mxj[04]	:=	0.087	;	//'н-Бутан
RP_GTU_const1.Mxj[05]	:=	0.0017	;	//'Неопентан
RP_GTU_const1.Mxj[06]	:=	0.0172	;	//'Изопентан
RP_GTU_const1.Mxj[07]	:=	0.0121	;	//'н-Пентан
RP_GTU_const1.Mxj[08]	:=	0.01	;	//'Гексаны
RP_GTU_const1.Mxj[09]	:=	0.117	;	//'Диоксид углерода
RP_GTU_const1.Mxj[10]	:=	0.666	;	//'Азот
RP_GTU_const1.Mxj[11]	:=	0.0050	;	//'Кислород

//'Теплота сгорания
RP_GTU_const1.Qnj[00]	:=	33431.0	;	//'Метан
RP_GTU_const1.Qnj[01]	:=	59869.0	;	//'Этан
RP_GTU_const1.Qnj[02]	:=	86374.0	;	//'Пропан
RP_GTU_const1.Qnj[03]	:=	113378.0	;	//'Изобутан
RP_GTU_const1.Qnj[04]	:=	114098.0	;	//'н-Бутан
RP_GTU_const1.Qnj[05]	:=	143170.0	;	//'Неопентан
RP_GTU_const1.Qnj[06]	:=	143170.0	;	//'Изопентан
RP_GTU_const1.Qnj[07]	:=	143170.0	;	//'н-Пентан
RP_GTU_const1.Qnj[08]	:=	175832.0	;	//'Гексаны
RP_GTU_const1.Qnj[09]	:=	0.0	;	//'Диоксид углерода
RP_GTU_const1.Qnj[10]	:=	0.0	;	//'Азот
RP_GTU_const1.Qnj[11]	:=	0.0	;	//'Кислород

//'Коэффициент пересчета
RP_GTU_const1.k[00]	:=	0.9999	;	//'Метан
RP_GTU_const1.k[01]	:=	1.0061	;	//'Этан
RP_GTU_const1.k[02]	:=	1.0149	;	//'Пропан
RP_GTU_const1.k[03]	:=	1.0276	;	//'Изобутан
RP_GTU_const1.k[04]	:=	1.0301	;	//'н-Бутан
RP_GTU_const1.k[05]	:=	1.0411	;	//'Неопентан
RP_GTU_const1.k[06]	:=	1.0481	;	//'Изопентан
RP_GTU_const1.k[07]	:=	1.0515	;	//'н-Пентан
RP_GTU_const1.k[08]	:=	1.0846	;	//'Гексаны
RP_GTU_const1.k[09]	:=	1.0033	;	//'Диоксид углерода
RP_GTU_const1.k[10]	:=	0.9983	;	//'Азот
RP_GTU_const1.k[11]	:=	1.0000	;	//'Кислород

//Коэф. конфузора
RP_GTU_const1.Ak := 38.8;
end_if;

//T_SEC - передний фронт в начале каждой секунды
TMR00(NOT TMR_ET[0],T#1000ms,TMR_ET[0],TMRTIME[0]);
R_TRIG04(TMR_ET[0],T_SEC);

//Абсолютное давление газа на входе компрессора по формуле (3), МПа
P1n:= HMI_APR.Pg_in_N.PV/1000.0 + 0.101235;
if (P1n = 0.0) then P1n:= 0.0000001; end_if;

//Абсолютное давление газа на выходе компрессора по формуле (11), МПа
P2n:= HMI_APR.Pg_out_N.PV/1000.0 + 0.101235;
if (P2n = 0.0) then P2n:= 0.0000001; end_if;

//Температура газа на входе компрессора по формуле (4), К
T1n:= AI_HMI.Tg_in_N.PV + 273.15;
if (T1n = 0.0) then T1n:= 0.0000001; end_if;

//Температура газа на выходе компрессора по формуле (12), К
T2n:= AI_HMI.Tg_out_N.PV + 273.15;
if (T2n = 0.0) then T2n:= 0.0000001; end_if;

M:= 0.0;
//'Молярная масса газа по формуле (6), кг/кмоль
for i:= 0 to 11 do
	M:= M + (RP_GTU_const1.Mj[i] * RP_GTU_const1.Mxj[i] * RP_GTU_const1.k[i] / 100.0);
end_for;

if M = 0.0 then M:= 0.0000001; end_if;
M_g:= M;

//Газовая постоянная природного газа по формуле (5), Дж/кг*К
R:= 8314.51/M;

//Относительная плотность по воздуху по формуле (8)
d:= M/28.96;
if d = 0.0 then d:= 0.0000001; end_if;

//Коэффициент сжимаемости газана входе компрессора по формуле (7)
Z1n:= 1.0-((10.2 * P1n - 6.0)*(0.345 * 0.01 * d - 0.446 * 0.001) + 0.015) * (1.3 - 0.0144 * (T1n - 283.2));

//Коэффициент сжимаемости газана выходе компрессора по формуле (7)
Z2n:= 1.0-((10.2 * P2n - 6.0)*(0.245 * 0.01 * d - 0.446 * 0.001) + 0.015) * (1.3 - 0.0144 * (T2n - 283.2));

//'Средний коэффициент сжимаемости газа по формуле (9)
Zsr:= (Z1n + Z2n) / 2.0;

if (R * T1n * Z1n)<>0.0 then
	//'Плотность газа на входе в компрессор по формуле (2), кг/м3
	pn:= (P1n * 1000000.0)/(R * T1n * Z1n);
	if pn = 0.0 then pn:= 0.0000001; end_if;
else
	pn:= 0.0000001;
end_if;



//'*******************************************
//'Объемная производительность по формуле (1), м3/мин
var1:= (HMI_APR.dP_conf_N.PV * 101.97)/pn;

if var1 > 0.0 then
	var2 := SQRT(var1);
else
	var2:= 0.0000001;	
end_if;

Vn:= RP_GTU_const1.Ak * var2;
//'*******************************************

//Средняя температура газа по входу и выходу компрессора по формуле (15), К
Tsr:= (T1n + T2n) / 2.0;

//Массовый расход технологического газа по формуле (13), кг/с
Gtehg:= Vn * pn / 60.0;
//Температурный показатель политропы по формуле (16)
var3:= T2n / T1n;
if var3 <= 0.0 then var3:= 1.0;end_if;
var4 := LOG(var3);	
var5 := P2n / P1n;
if var5 <= 0.0 then var5:= 1.0;end_if;
var6 := LOG(var5);

if var6 = 0.0 then var6:= 0.0000001; end_if;
m1:= var4 / var6;
if m1 = 0.0 then m1:= 0.0000001; end_if;

//Коэффициент псевдоизоэнтропы по формуле (14) 
kkk:= 4.16 + 0.0041 * (Tsr - 283.2) + 3.93 * (d - 0.55) + 5.0 * (m1 - 0.3);
if kkk = 0.0 then kkk:= 0.0000001; end_if;

if LG.GTU_work then
	//'Мощность сжатия компрессора по формуле (12), кВт 
	Ns:= kkk * Zsr * R * (T2n - T1n) * Gtehg / 1000.0;
	//'Политропный КПД компрессора по формуле (17)
	KPD_p:= (1.0/kkk) * (1.0/m1);
	//'Рассеиваемая мощность ГТУ по формуле (18), кВт
	N:= Ns/0.98;
else
	N:= 0.0;
	KPD_p:= 0.0;
	Ns:= 0.0;
end_if;

//Объемная низшая теплота сгорания  по формуле (21), кДж/м3
Qn:= 0.0;
for i:= 0 to 11 do
	Qn:= Qn + (RP_GTU_const1.Qnj[i] * RP_GTU_const1.Mxj[i] * RP_GTU_const1.k[i] / 100.0);
end_for;

//Массовая низшая теплота сгорания  по формуле (22), кДж/кг
Qm:= Qn / (1.2044 * d);

//Массовый расход топливного газа по формуле (20), кг/с
Gtg:= RTG_OUT.q_m;// / 3600.0;

// КПД ГТУ по формуле (19)
if (Gtg * Qm) <> 0.0 then
	KPD:= N/ (Gtg * Qm);
else
	KPD:= 0.0000001;
end_if;	
(**)
(**)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if LG.GTU_work AND DGI.Kr2_ON then

// Накопление часового,суточного расхода
if T_SEC then 
 Q_SEC := Vn / 60.0;				   // текущий	
 Q_HOUR  := Q_HOUR + Q_SEC ;            // накопленный часовой расход
 Q_DAY 	 := Q_DAY + Q_SEC ;              // накопленный суточный расход
 Q_MONTH := Q_MONTH + Q_SEC ;          // накопленный месячный расход
 COUNTER_SEC := COUNTER_SEC + 1 ;
end_if;

if COUNTER_SEC = 60 then  
 	COUNTER_MIN := COUNTER_MIN + 1 ;
 	COUNTER_SEC := 0 ;
end_if;

if COUNTER_MIN = 60 then
 	COUNTER_HOUR := COUNTER_HOUR +1 ;
 	COUNTER_MIN := 0 ;
 	Q_LAST_HOUR := Q_HOUR ;            // накопленный часовой расход за прошедший час
    Q_HOUR := 0.0 ;
end_if;
(*
if COUNTER_HOUR = 23 then
 	COUNTER_HOUR := 0 ; 
 	Q_LAST_DAY := Q_DAY ;              // накопленный часовой расход за прошедшие сутки
 	Q_DAY := 0.0 ;
end_if;

if COUNTER_DAY = 30 then
 	COUNTER_DAY := 0 ; 
 	Q_LAST_MONTH := Q_MONTH ;         // накопленный часовой расход за прошедший месяц
 	Q_MONTH := 0.0 ;
end_if;
*)

//Выделяем начало смены, например в 10 час утра, и начало первого числа каждого месяца
//Делаем это 1 раз в секунду
//decDT(NOW());
if T_SEC then 
	decDT(IN:=NOW(), HOURS=>hhh, DAY=>ddd);
	R_TRIG_H(hhh = UINT#10, new_day);
	R_TRIG_D(ddd = UINT#1,  new_mon);
end_if;


if new_day then
 Q_LAST_DAY := Q_DAY ;                 // накопленный часовой расход за прошедшие сутки
 Q_DAY := 0.0 ;
end_if;

if new_mon then
 Q_LAST_MONTH := Q_MONTH ;             // накопленный часовой расход за прошедший месяц
 Q_MONTH := 0.0 ;
end_if;

new_day := FALSE;
new_mon := FALSE;

end_if;

QG_SUM[0] := Vn; 	//Объемная производительность по формуле (1), м3/мин
QG_SUM[1] := Gtehg; //Массовый расход технологического газа по формуле (13), кг/с
QG_SUM[2] := Ns;	//Мощность сжатия компрессора по формуле (12), кВт 
QG_SUM[3] := N;		//Рассеиваемая мощность ГТУ по формуле (18), кВт
QG_SUM[4] := Gtg;	//Массовый расход топливного газа по формуле (20), кг/с
QG_SUM[5] := KPD;	// КПД ГТУ по формуле (19)
QG_SUM[6] := KPD_p;	//'Политропный КПД компрессора по формуле (17)
QG_SUM[7] := Vn;
QG_SUM[8] := Q_HOUR;
QG_SUM[9] := Q_LAST_HOUR;
QG_SUM[10] :=Q_DAY ;
QG_SUM[11] :=Q_LAST_DAY;
QG_SUM[12] :=Q_MONTH ;
QG_SUM[13] :=Q_LAST_MONTH;

]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="LEV_AI_DI" Comment="" Data="" UUID="D46C1DB74D83DCECB413E6B779E77F69">
            <Function UUID="B25B2103401BD548180996876CD4529E" Name="FC_AI_Processing" Comment="функция обработки аналоговых входов" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="4A783DA7429CEE13A3682F999DF227E3" Name="DRV" Comment="код АЦП из драйвера" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="546AC9254DE47F03D545859A54481BDE" Name="setting" Comment="настройки канала" Type="T_AI_Settings" TypeUUID="668FE9B94A603427C8EDBBB8917A7594" Usage="input" />
                    <Variable UUID="49D3A8EE456EB312ECD78584C4F1C7F0" Name="fromHMI" Comment="команды из ЧМИ" Type="T_AI_ToProcessing" TypeUUID="187F76AE49C59E950138DDA3067101D0" Usage="input" />
                    <Variable UUID="D00DFC4E44C7E98973946796CF5916FB" Name="out" Comment="результаты" Type="T_AI_FromProcessing" TypeUUID="2318F94F4C3CEA2681DE4C8C432A66E9" Usage="output" />
                </Variables>
                <ST><![CDATA[]]></ST>
            </Function>
            <Function UUID="878A972A4E6C50539EA698B6884FF989" Name="FC_DI_Processing" Comment="функция обработки дискретных входов" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="FB2EEB7E4DE917AD852F538BE37AB6DB" Name="drv" Comment="Измеренные значения" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="5494E4A44D3F14647CD71E981353FE10" Name="brk" Comment="Неисправности входных д.каналов" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="6360510D41CCA0E2F7EABCAAF56A237E" Name="setting" Comment="Настройки входных д.каналов" Type="T_DI_Setting" TypeUUID="94C521C642227325371AE7BCC363E527" Usage="input" />
                    <Variable UUID="74F05C6347A4DBF234A8188248E91F64" Name="cmd" Comment="данные из ЧМИ в программу обработки ДИ" Type="T_DI_ToProcessing" TypeUUID="55B37D104E6E69A8BD7466B4968651A1" Usage="input" />
                    <Variable UUID="AFFF5D2F45B094091448A3843FCB0983" Name="out" Comment="данные из программы обработки" Type="T_DI_FromProcessing" TypeUUID="9F0EDD3143DC10ACF03CBA8C4A870F2D" Usage="output" />
                </Variables>
                <ST><![CDATA[]]></ST>
            </Function>
            <Function UUID="9F63B4FE45981F24B340179FB61F8871" Name="FC_SP_ Processing" Comment="функция обработки уставок" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="994A61804F3A69AD6CA586A908BD2B22" Name="PV" Comment="значение аналогового канала" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="526EA915437D38427FF56FB1D4101689" Name="brk" Comment="неисправность аналогового канала" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="28133C9B462654AF0BD8E5A94C33BF13" Name="setColor" Comment="установка цвета отображения аналогового" Type="T_AI_OnlyToHMI" TypeUUID="FE06CA77455905083F02AA9B952DCC88" Usage="input" />
                    <Variable UUID="D6CCCEB04E34DD383D4BEEB03CCB95D7" Name="setting" Comment="настройки уставки" Type="T_SP_Settings" TypeUUID="F35CE5474F9ED831D3CDE984BA397134" Usage="input" />
                    <Variable UUID="D3C4866A4C15C89D8D159DBEA81FDA11" Name="sp" Comment="результат" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                </Variables>
                <ST><![CDATA[]]></ST>
            </Function>
        </Folder>
        <Folder Name="LEV_AM" Comment="Программы обработки ИМ" Data="" UUID="FD91816B4366776A66695FA5661F9509">
            <Function UUID="5FFFCCE1473C70A3657CE8A5356CDB64" Name="FC_InitAM" Comment="Инициализация ИМ" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="A6A06E22448B5F3FDA5D56865166E6BE" Name="initIM" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                </Variables>
                <ST><![CDATA[]]></ST>
            </Function>
            <Function UUID="E6F491984F1A80D7AE01F089442B2F27" Name="FC_ProcessingAM" Comment="Обработка ИМ" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="7D90C2D245863AE0FC6962ACC6511038" Name="posOn" Comment="Конечник &quot;открыт/включен&quot;" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="B2B938FF46E5C6DE12980CA5F63C604D" Name="posOff" Comment="Конечник &quot;закрыт/выключен&quot;" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="28CD9363475BC0F1F632A894074D29AF" Name="settings" Comment="Настройки" Type="T_AM_Setting" TypeUUID="256A18694412558E2A55A4B7624DD172" Usage="input" />
                    <Variable UUID="AD8246AE46B5B1101ACA2C81EFF3DEFA" Name="btn" Comment="Кнопки" Type="T_AM_Btn" TypeUUID="EFC2F1704642389525D840801681051A" Usage="input" />
                    <Variable UUID="3D0A7D804EE64EC645932D82A2185BC2" Name="alg" Comment="Сигналы из алгоритма" Type="T_AM_ToProcessing" TypeUUID="779CB6804A1EFE299C44259879EE559D" Usage="input" />
                    <Variable UUID="512605FD4FE1B3E7562993A84D04F818" Name="int" Comment="Внутренние сигналы" Type="T_AM_Internal" TypeUUID="32BA558A424E0C22E51AEAB8F6691BB0" Usage="inout" />
                    <Variable UUID="F68E89A3473C0327D7BB1EADC96929CB" Name="out" Comment="Команды и сигнализация" Type="T_AM_FromProcessing" TypeUUID="A6D7875840F9E702E7824F8046D18141" Usage="output" />
                </Variables>
                <ST><![CDATA[]]></ST>
            </Function>
            <Function UUID="63599E1847A3FFA42911B5A31E4E1FD7" Name="FC_SimulAM" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="18BCB06B4BEB095D317A96AF65A2FCA1" Name="dgoOn" Comment="Команда вкл/откр" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="15F8AE034BA5DA1B4A7E8885148CE5A5" Name="dgoOff" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="input" />
                    <Variable UUID="FAD802244D173BFB8685568B3FAE0112" Name="data" Type="T_AM_Simulaton" TypeUUID="88DE60EF4F8C47FD69A9F1B469621C9A" Usage="inout" />
                    <Variable UUID="09FA8882465ECE79CE4C76A375B675FB" Name="dgiOn" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                    <Variable UUID="9E892B5743BF4BDFE6C021AEABE78550" Name="dgiOff" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="output" />
                </Variables>
                <ST><![CDATA[]]></ST>
            </Function>
        </Folder>
        <Folder Name="LEV_GRAPH" Comment="Всё для графов, режимов и подрежимов" Data="" UUID="A95AD9DF481C235D87808D80389835D4">
            <Function UUID="5AF011674741411D293C47BE7100E2B8" Name="FC_DrumAPK" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="3EF6E0FA4813FA89A13E56A220B38E8B" Name="cycle" Comment="Время цикла из вызывающей программы" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="8F1D65444B5AD88854999585E1012CC2" Name="i" Comment="Счётчик циклов для оператора FOR" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                </Variables>
                <ST><![CDATA[if Drum.APK.enable then //Режим "Автоматический пуск на Кольцо"
	//--------------------------- Обнуление таймеров при старте графа --------------------
	if Drum.APK.state = 0 then				
		for i = 0 to 9 do					
			Drum.APK.timer[i] = 0.0;		
		end_for;
		Drum.APK.state := 1;				
	end_if;
	//------------------------------------------------------
	elsif Drum.APK.state = 1 then			
		Drum.APK.timer[1] := Drum.APK.timer[1] + cycle;									
		if 	Drum.APK.timer[1]>= Drum.APK.limTimer[1]	then Drum.APK.state := 2;	end_if;
	//------------------------------------------------------
	elsif Drum.APK.state = 2 then
		if 	Drum.PMS.complete							then Drum.APK.state := 3;	end_if;
	//------------------------------------------------------
	elsif Drum.APK.state = 3 then
		if 	Drum.FillingN.complete						then Drum.APK.state := 4;	end_if;
	//------------------------------------------------------
	elsif Drum.APK.state = 4 then
		if 	Drum.StartD.complete						then Drum.APK.state := 5;	end_if;
	//----------------- Последовательность завершена -------------------
	elsif Drum.APK.state = 5 then
		Drum.APK.complete := true;
	end_if;
	//--- выходы барабана ---
	DGO.sirena := Drum.APK.state = 1;				// включение серены
	subMode.PPS := Drum.APK.state = 1;				// подрежим "Предпусковая сигнализация
	Drum.PMS.enable := Drum.APK.state = 2;			// запуск барабана "Пуск маслосистемы"
	Drum.FillingN.enable := Drum.APK.state = 3;		// запуск барабана "Заполнение контура"
	Drum.StartD.enable := Drum.APK.state = 4;		// запуск барабана "Запуск двигателя"
else	//---------- действия при отключённом барабане --------------
	if Drum.APK.state <> 0 then
		Drum.APK.state := 0;
		//--- обнуление выходов при досрочном выходе из барабана
		DGO.sirena 				:= false;
		subMode.PPS 			:= false;				
		Drum.PMS.enable 		:= false;
		Drum.FillingN.enable 	:= false;
		Drum.StartD.enable 		:= false;
	end_if;
end_if;]]></ST>
            </Function>
            <Function UUID="1FE76DE94AA4DDC8F42914944F2C30B2" Name="FC_DrumPMS" Comment="Барабан &quot;Пуск маслосистемы&quot;" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables>
                    <Variable UUID="F7280E864FB70A2B95A43987D84ABBCF" Name="cycle" Comment="Время цикла из вызывающей программы" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="input" />
                    <Variable UUID="ADD68E504F985A0ECD747C8437CE6E82" Name="i" Comment="Счётчик циклов для оператора FOR" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                </Variables>
                <ST><![CDATA[if Drum.PMS.enable then
	//--------------------- Обнуление таймеров при старте графа --------------------------
	if Drum.PMS.state = 0 then				
		for i = 0 to 9 do					
			Drum.PMS.timer[i] = 0.0;		
		end_for;
		Drum.PMS.state := 1;				//автоматический переход на начало выполнения
	end_if;
	//------------------------------------------------------
	elsif Drum.PMS.state = 1 then			
		if DGI.PNS_ON and ANB.PmsmN_U1v 				then Drum.PMS.state := 2; 	end_if;
	//------------------------------------------------------
	elsif Drum.PMS.state = 2 then
		Drum.PMS.timer[1] := Drum.PMS.timer[1] + cycle;									
		if 	Drum.PMS.timer[1]>= Drum.PMS.limTimer[1]	then Drum.PMS.state := 3;	end_if; 
	//------------------------------------------------------
	elsif Drum.PMS.state = 3 then			
		if DGI.PNU_ON and ANB.dPm_g_U1v 				then Drum.PMS.state := 4; 	end_if;
	//------------------------------------------------------
	elsif Graph.PMS.state = 5 then
		Graph.PMS.complete := true;
	end_if;
	//--- выходы барабана ---
	subMode.PMS := Drum.PMS.state = 1 or Drum.PMS.state = 2 or Drum.PMS.state = 3;
	drm.PNS_ON 	:= Drum.PMS.state = 1;
	TS.StabMsmN := Drum.PMS.state = 2;
	drm.PNU_ON 	:= Drum.PMS.state = 3;
else
	if Drum.APK.state <> 0 then
		Drum.PMS.state := 0;
		//--- обнуление выходов при досрочном выходе из барабана
		drm.PNS_ON 	:= false;
		TS.StabMsmN := false;
		drm.PNU_ON 	:= false;
		subMode.PMS := false;
	end_if;
end_if;]]></ST>
            </Function>
            <Function UUID="53C128BA4C43EB0E3D7F21AF3AE615B6" Name="FC_ModeGraph" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables />
                <ST><![CDATA[//---------------------------------------- Определение режима при запуске программы ---------------------------------
if mi.curMode = 0 then
	if 	LG.AOs or															//Если есть сигналы АОсс или
		not LG.GPAisStop and not LG.isGasInN								//ГПА не остановлен и нет газа в контуре
												then mi.curMode := mi.AOss;		//Переходим в режим "АОсс"
	elsif LG.AOb or															//Если есть сигналы АОбс или
		not LG.GPAisStop													//ГПА не остановлен
												then mi.curMode := mi.AObs;		//Переходим в режим "АОбс"
	elsif true;  									 mi.curMode := mi.Repair;	//Переходим в режим "АОбс"
	end_if;

//-------------------------------------------- Переходы из режима Ремонт ----------------------------------------------
elsif mi.curMode = mi.Repair then
	if 	subMode.wontHR and ppu.HR											//Была нажата кнопка "ХР" и есть условия ХР
												then mi.curMode := mi.HR;		//Переходим в режим "ХР"
	elsif subMode.wontGR and ppu.GR											//Была нажата кнопка "ГР" и есть условия ГР
												then mi.curMode := mi.GR;		//Переходим в режим "ГР"
	end_if;
//-------------------------------------------- Переходы из режима ХР ----------------------------------------------
elsif mi.curMode = mi.HR then
	if subMode.wontGR (* and ppu.GR		*)									//Была нажата кнопка "ГР" и есть условия ГР
												then mi.curMode := mi.GR;		//Переходим в режим "ГР"
	elsif 	not subMode.wontHR or not ppu.HR								//Была нажата кнопка "Ремонт" или нет условий ХР
												then mi.curMode := mi.Repair;	//Переходим в режим "Ремонт"
	end_if;
//-------------------------------------------- Переходы из режима ГР ----------------------------------------------
elsif mi.curMode = mi.HR then
	if 		(not ppu.GR or not subMode.wontGR) and 							//Нет условий или требования ГР и
	   		(not ppu.HR or not subMode.wontHR)								//Нет устовий или требования ХР
												then mi.curMode := mi.Repair;	//Переходим в режим "Ремонт"
	elsif 	subMode.wontHR and ppu.HR or									//Есть требование ХР и условия ХР или
			subMode.wontGR and not ppu.GR and ppu.HR						//Есть требование ГР и нет условий ГР и есть условия ХР
												then mi.curMode := mi.HR;		//Переходим в режим "ХР"
	elsif 	subMode.readyAPK and BTN.Pusk 									//Есть готовность к АПК и нажата кнопка "ПУСК"
												then mi.curMode := mi.APK;		//Переходим в режим "АПК"
	elsif 	subMode.readyAPM and BTN.Pusk									//Есть готовность к АПК и нажата кнопка "ПУСК"
												then mi.curMode := mi.APM;		//Переходим в режим "АПМ"
	end_if;
//-------------------------------------------- Переходы из режима АПК ----------------------------------------------
elsif mi.curMode = mi.APK then
	if 		LG.AOs or 														//Есть сигнала АОсс или 
			LG.AOb and not LG.fillingN_complit								//есть сигналы АОбс и нет завершения заполнения контура Нагнетателя
												then mi.curMode := mi.AOss;		//Переходим в режим "АОсс"
	elsif 	LG.AOb															//Есть сигналы АОбс
												then mi.curMode := mi.AObs;		//Переходим в режим "АОбс"
	elsif 	Drum.APK.complit												//Последовательность АПК завершена 
												then mi.curMode := mi.K;		//Переходим в режим "Кольцо"
	end_if;
//-------------------------------------------- Переходы из режима АПМ ----------------------------------------------
elsif mi.curMode = mi.APM then
	if 		LG.AOs or 														//Есть сигнала АОсс или
			LG.AOb and not LG.fillingN_complit								//есть сигналы АОбс и нет завершения заполнения контура Нагнетателя
												then mi.curMode := mi.AOss;		//Переходим в режим "АОсс"
	elsif 	LG.AOb															//Есть сигналы АОбс
												then mi.curMode := mi.AObs;		//Переходим в режим "АОбс"
	elsif 	Drum.APM.complit												//Последовательность АПМ завершена
												then mi.curMode := mi.M;		//Переходим в режим "Магистраль"
	end_if;
end_if;
//---------------------------------- Выставление режимов ------------------------------
mode.Repair	:= mi.curMode = mi.Repair	;//	Ремонт
mode.HR		:= mi.curMode = mi.HR	;//	Холодный резерв
mode.GR		:= mi.curMode = mi.GR	;//	Горячий резерв
mode.APK	:= mi.curMode = mi.APK	;//	Автоматический пуск на кольцо
mode.APM	:= mi.curMode = mi.APM	;//	Автоматический пуск в магистраль
mode.K		:= mi.curMode = mi.K	;//	Кольцо
mode.M		:= mi.curMode = mi.M	;//	Магистраль
mode.K_M	:= mi.curMode = mi.K_M	;//	Переход "Кольцо-Магистраль"
mode.M_K	:= mi.curMode = mi.M_K	;//	Переход "Магистраль-Кольцо"
mode.NOss	:= mi.curMode = mi.NOss	;//	НОсс
mode.NObs	:= mi.curMode = mi.NObs	;//	НОбс
mode.AOss	:= mi.curMode = mi.AOss	;//	АОсс
mode.AObs	:= mi.curMode = mi.AObs	;//	АОбс

//---------------------------------- Запуск барабанов режимов -------------------------
Drum.APK.enable 	:= mi.curMode = mi.APK	;//	Автоматический пуск на кольцо
Drum.APM.enable 	:= mi.curMode = mi.APM	;//	Автоматический пуск в магистраль
Drum.K_M.enable		:= mi.curMode = mi.K_M	;//	Переход "Кольцо-Магистраль"
Drum.M_K.enable		:= mi.curMode = mi.M_K	;//	Переход "Магистраль-Кольцо"
Drum.NOss.enable	:= mi.curMode = mi.NOss	;//	НОсс
Drum.NObs.enable	:= mi.curMode = mi.NObs	;//	НОбс
Drum.AOss.enable	:= mi.curMode = mi.AOss	;//	АОсс
Drum.AObs.enable	:= mi.curMode = mi.AObs	;//	АОбс
]]></ST>
            </Function>
            <Function UUID="EB76E71E47E7FA2B36B5ED86C5141B76" Name="FC_initGraph" Comment="Инициализация для графов" ResultTypeUUID="EC797BDD4541F500AD80A78F1F991834">
                <Variables />
                <ST><![CDATA[mi.Repair 	:= 1;//Ремонт
mi.HR 		:= 2;//Холодный резерв
mi.GR 		:= 3;//Горячий резерв
mi.APK 		:= 4;//Автоматический пуск на кольцо
mi.APM 		:= 5;//Автоматический пуск в магистраль
mi.K 		:= 6;//Кольцо
mi.M 		:= 7;//Магистраль
mi.K_M 		:= 8;//Переход "Кольцо-Магистраль"
mi.M_K 		:= 9;//Переход "Магистраль-Кольцо"
mi.NOss 	:= 10;//НОсс
mi.NObs 	:= 11;//НОбс
mi.AOss 	:= 12;//АОсс
mi.AObs 	:= 13;//АОбс

if NOT initGraph then
	initGraph := true;
	Drum.APK.limTimer[1] = 10.0;
	Drum.PMS.limTimer[1] = 15.0;
end_if;]]></ST>
            </Function>
        </Folder>
        <FunctionBlock UUID="A56D90B14BA959B7654CEF9FE3802AB6" Name="FB_Drum_Submode">
            <Variables>
                <Variable UUID="0782650341DEC0C4CD04B586153E7E2A" Name="Proc_Drum_AOss" Type="FB_Drum_AOss" TypeUUID="0E5A7D974AE6EF1DEBF0E3911CC8F422" Usage="internal" />
                <Variable UUID="D10E3A9844E85798470F18AD6AF88171" Name="Proc_Drum_AObs" Type="FB_Drum_AObs" TypeUUID="6F892D004CF538040E590793DDFC895F" Usage="internal" />
                <Variable UUID="C981DE2E49EC8FE6845DFDB39C6724C9" Name="Proc_Drum_APK" Type="FB_Drum_APK" TypeUUID="94C4623E44FC3C5D3E86FBA8C8E3B38E" Usage="internal" />
                <Variable UUID="07C99F954E4CE09360B854AEA19BF24D" Name="Proc_Drum_APM" Type="FB_Drum_APM" TypeUUID="0924CD4740B288986B46E096BBF3CF18" Usage="internal" />
                <Variable UUID="512863D14F251B9013362C965ACE3447" Name="Proc_Drum_HP" Type="FB_Drum_HP" TypeUUID="598EF6F44AF530E7C944218DBF0491D2" Usage="internal" />
                <Variable UUID="1AE105EB4ADC77FAC4CEF5B24CCAF9BB" Name="Proc_Drum_K_M" Type="FB_Drum_K_M" TypeUUID="A39920804913839AE9F50295E67EC571" Usage="internal" />
                <Variable UUID="D3CA5BD4486A3739AE2ADBB85BBD1B9C" Name="Proc_Drum_KPK" Type="FB_Drum_KPK" TypeUUID="0C2C65FF48674ACCC2DFC886E538A79C" Usage="internal" />
                <Variable UUID="4C29C71E418AC4A9871AA981F896E984" Name="Proc_Drum_M_K" Type="FB_Drum_M_K" TypeUUID="0E213BB141F4188A9DCD1C8A2BB97581" Usage="internal" />
                <Variable UUID="9C8CEEE145207C7149620AAB009761DB" Name="Proc_Drum_NObs" Type="FB_Drum_NObs" TypeUUID="459B939E405A0B807918848D68B596CD" Usage="internal" />
                <Variable UUID="B0295A314A13BAA984BB85BA8493DC6D" Name="Proc_Drum_NOss" Type="FB_Drum_NOss" TypeUUID="0749D9FA488D0AE814D3C4841FFAC681" Usage="internal" />
                <Variable UUID="FB65EA274E9144499F3E3C802383CA96" Name="Proc_Drum_OR" Type="FB_Drum_OGR" TypeUUID="BBA0D9514CCE8E6A8AF810B096B18F2E" Usage="internal" />
                <Variable UUID="4FB7EBCA457823DA5E5D29BA4AD15020" Name="Proc_Drum_PZ" Type="FB_Drum_PZ" TypeUUID="9F5D4F3D4E1719E01D59E1A63D10A395" Usage="internal" />
                <Variable UUID="D1E7A18E4797562B7680B7926715DF98" Name="Proc_Drum_PMZ" Type="FB_Drum_PZM" TypeUUID="531BFD404BD572C978DCBEBABA3149D6" Usage="internal" />
                <Variable UUID="EFF994A2448501D5946618B43BF2548E" Name="Proc_sm_BleedingN" Type="FB_sm_BleedingN" TypeUUID="43F3FB7D40D8A0182F1F9AB882FA964D" Usage="internal" />
                <Variable UUID="0C698DE64EA270BF9DCEEFA1DB8911E5" Name="Proc_sm_Check" Type="FB_sm_Check" TypeUUID="D04EF8A24CDB67FDA2C6629AAB3CBF64" Usage="internal" />
                <Variable UUID="B890D2394A1193F1AE02D0913D8CCF6D" Name="Proc_sm_CoolingD" Type="FB_sm_CoolingD" TypeUUID="955AAF5144644E86D20617B1164FE7CA" Usage="internal" />
                <Variable UUID="7AC0C2DC4312F6CC95080BAED7321CD3" Name="Proc_sm_fillingN" Type="FB_sm_fillingN" TypeUUID="3E86F4BF4574B454B12A788A97A7AE63" Usage="internal" />
                <Variable UUID="09CBCE864DEE342F6BE5B896158BC21F" Name="Proc_sm_K_M" Type="FB_sm_K_M" TypeUUID="CC09F373429CE992D3A904B3BC9B9162" Usage="internal" />
                <Variable UUID="54C6544D491846D99B0BA086330C7611" Name="Proc_sm_M_K" Type="FB_sm_M_K" TypeUUID="B293D03F4399BC79558059A706F28045" Usage="internal" />
                <Variable UUID="E9C5BB414316B6FB319EAB8C7BDAB2F6" Name="Proc_sm_Sound" Type="FB_sm_Sound" TypeUUID="B53DFE614BD1386157A761B4DB85BD22" Usage="internal" />
                <Variable UUID="535F41BB49BD84CCE7A02CB0A1AFA538" Name="Proc_sm_startD" Type="FB_sm_startD" TypeUUID="A847F6C34202EB3A9564E3B64402DC27" Usage="internal" />
                <Variable UUID="11B2345647BE8BCF977146AE674FB8A3" Name="Proc_sm_startMD" Type="FB_sm_startMD" TypeUUID="8D09F7AF41F1E725587393B24FDF4904" Usage="internal" />
                <Variable UUID="A63E1123453C3BD95251E98B2FA4F49D" Name="Proc_sm_startMN" Type="FB_sm_startMN" TypeUUID="58062A234964DEE3A0E7F6965A1EA485" Usage="internal" />
                <Variable UUID="7479872D407703965C9E52B251382638" Name="Proc_sm_Stop" Type="FB_sm_Stop" TypeUUID="AB48193F4D3996BBA8C7229302E8E655" Usage="internal" />
                <Variable UUID="2F4ADF9943353C05CAD30B8D63B4105A" Name="curTP" Type="INT" TypeUUID="47B58C4E4726C8B230965EBE77F1169E" Usage="internal" />
                <Variable UUID="1810BC5145E1773310586EA85530F864" Name="FRONT_TP" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                <Variable UUID="8A0559A348C7550D8268148E96AB3DA1" Name="frTP" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                <Variable UUID="3EA7E4064B6B8D26FBCDDC9312C8B443" Name="Proc_Drum_PBZ" Type="FB_Drum_PBZ" TypeUUID="AA3C9B394D92076AB130E89F291BA876" Usage="internal" />
                <Variable UUID="1789EA61473F5E05CB1237A4BC263BBC" Name="Proc_startTG" Type="FB_sm_startTG" TypeUUID="2367C5FF49C361A94CE7F29F68D6135D" Usage="internal" />
                <Variable UUID="9EFB02B54AB1F502B62E0DACD5CDB34D" Name="Proc_sm_warmD" Type="FB_sm_warmD" TypeUUID="4A8CB5D54266B0B74107B78C73600F24" Usage="internal" />
                <Variable UUID="1445EA1D41B01906B7C4CFAC24C80789" Name="Proc_Drum_TP" Type="FB_Drum_TP" TypeUUID="B8894D5D491AF9E2CD1BB29AED4DF4F3" Usage="internal" />
            </Variables>
            <ST><![CDATA[// Вызов режимов ---------------------------------------------- 
Proc_Drum_AOss();
Proc_Drum_AObs();
Proc_Drum_APK();
Proc_Drum_APM();
Proc_Drum_HP();
Proc_Drum_K_M();
Proc_Drum_KPK();
Proc_Drum_M_K();
Proc_Drum_NObs();
Proc_Drum_NOss();
Proc_Drum_OR();
Proc_Drum_PZ();
Proc_Drum_PMZ();
Proc_Drum_PBZ();
Proc_Drum_TP();
// Вызов подрежимов ---------------------------------------------- 
Proc_sm_BleedingN();
Proc_sm_Check();
Proc_sm_CoolingD();
Proc_sm_fillingN();
Proc_sm_K_M();
Proc_sm_M_K();
Proc_sm_Sound();
Proc_sm_startD();
Proc_sm_startMD();
Proc_sm_startMN();
Proc_sm_Stop();
Proc_startTG();
Proc_sm_warmD();

//-------------------------------------Передача сигналов DRUM
Calc_AI.Drum_AObs_Step := Drum_AObs.STEP ; //Шаг АОбс
Calc_AI.Drum_AOss_Step := Drum_AOss.STEP ; //Шаг АОсс
Calc_AI.Drum_APK_Step := Drum_APK.STEP ; //Шаг АПК
Calc_AI.Drum_APM_Step := Drum_APM.STEP ; //Шаг АПМ
Calc_AI.Drum_HP_Step := Drum_HP.STEP;//Шаг  ХП
Calc_AI.Drum_K_M_Step := Drum_K_M.STEP;//Шаг  К-М
Calc_AI.Drum_KPK_Step := Drum_KPK.STEP ; //Шаг КПК
Calc_AI.Drum_M_K_Step := Drum_M_K.STEP;//Шаг  М-К
Calc_AI.Drum_NObs_Step := Drum_NObs.STEP ; //Шаг НОбс
Calc_AI.Drum_NOss_Step := Drum_NOss.STEP ; //Шаг НОсс
Calc_AI.Drum_OGR_Step := Drum_OGR.STEP ; //Шаг ОГР
Calc_AI.Drum_PZ_Step := Drum_PZ.STEP ; //Шаг ПЗ
Calc_AI.Drum_PZM_Step := Drum_PZM.STEP ; //Шаг ПЗМ
Calc_AI.Drum_PBZ_Step := Drum_PBZ.STEP ; //Шаг ПБЗ
Calc_AI.Drum_TP_Step := Drum_TP.STEP;//Шаг  ТП
//-------------------------------------Передача сигналов SM
Calc_AI.sm_BleedingN_Step := sm_BleedingN.STEP; //Шаг стравливание Н
Calc_AI.sm_Check_Step := sm_Check.STEP; //Шаг контроль
Calc_AI.sm_CoolingD_Step := sm_CoolingD.STEP; //Шаг охлаждение Д
Calc_AI.sm_fillingN_Step := sm_fillingN.STEP; //Шаг заполнение Н
Calc_AI.sm_K_M_Step := sm_K_M.STEP;//K-M
Calc_AI.sm_M_K_Step := sm_M_K.STEP;//M-К
Calc_AI.sm_Sound_Step := sm_Sound.STEP;//Звуковая сигнализация
Calc_AI.sm_startD_Step := sm_startD.STEP ; //Шаг старт Д
Calc_AI.sm_startMD_Step := sm_startMD.STEP ; //Шаг пуск МД
Calc_AI.sm_startMN_Step := sm_startMN.STEP ; //Шаг пуск МН
Calc_AI.sm_Stop_Step := sm_Stop.STEP ; //Шаг останов
Calc_AI.sm_startTG_Step := sm_startTG.STEP; //ШАГ пуск ТГ
Calc_AI.sm_warmD_Step := sm_warmD.STEP; //ШАГ прогрев
//-------------------------------------------------------

]]></ST>
        </FunctionBlock>
        <FunctionBlock UUID="065D61C444E01D8F22C9379B416DF4A7" Name="FB_LG">
            <Variables>
                <Variable UUID="4F316C204A152EFDDD215282D45F74F7" Name="TMRCheck_SAU" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                <Variable UUID="AAD07DCE4BCFAF75A9795987BF17B7D2" Name="LG_Kr1_fault" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                <Variable UUID="4005AEB64B3D3C1D731F0CA8AAB6EAE6" Name="Proc_Kr1_fault" Type="FB_Analysis_AI" TypeUUID="F3E060074330CC4FF31FEBBC1C6F9352" Usage="internal" />
                <Variable UUID="D66D3D6847E07773EE4759B357E9D3D9" Name="T_isFlame" Type="REAL" TypeUUID="42E054C8453789BBDD3594B53BDC7DE5" Usage="internal" />
                <Variable UUID="06ADDB2544A58FC4D6FC988DD7076CC1" Name="isFlame_fixT" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                <Variable UUID="6B93FFCA4F98701E5EC657A705DC20A7" Name="TMRCheck_SAU_12" Type="TON" TypeUUID="EAA43B6B4DCDCEA72AB748B4554FD2AD" Usage="internal" />
                <Variable UUID="A0CB8DDB4318F5C5C65EF49855F4CA8D" Name="Check_SAU_last" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                <Variable UUID="D2FC7E9F4E7286DABECA16BD6D4CC911" Name="TMO_Check_SAU_12" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                <Variable UUID="540C853B453B59E5CFEE469D75FB346A" Name="TMR_Check_SAU_12" Type="TIME" TypeUUID="3EFD49044E055B696F5570BA288FA8D5" Usage="internal" />
                <Variable UUID="7DE359FC45F42F044BDC1F87CA8B90CF" Name="TRIG_APK_RA_ON" Type="F_TRIG" TypeUUID="F64DAE304009E1613B4AB4AF27532AEF" Usage="internal" />
                <Variable UUID="34E837C74CD4E3538BAC318466935BE6" Name="TRIG_APK_RA_OF" Type="R_TRIG" TypeUUID="D90E3B974D4D8C72877123B1A897EB52" Usage="internal" />
                <Variable UUID="D70C7034499FC1873C6129BD4B1DF8A5" Name="tmp_bool_apk" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" Usage="internal" />
                <Variable UUID="B6E54F3847011499FCE8729788A18792" Name="FST_EXE" Type="BOOL" TypeUUID="EC797BDD4541F500AD80A78F1F991834" InitialValue="TRUE" Usage="internal" />
            </Variables>
            <ST><![CDATA[LG.Force_DO:= BTN.Force_DO AND (us.Repair OR us.HR OR us.GR OR us.PZ);
LG.Force_DI:= BTN.Force_DI AND (us.Repair OR us.HR OR us.GR OR us.PZ);

LG.noG_inN := (HMI_APR.Pg_in_N.PV < 0.05) AND (HMI_APR.Pg_out_N.PV < 0.05) (*AND DGI.Kr5_ON*);

LG.G_inN := (HMI_APR.Pg_in_N.PV > 0.05) AND (HMI_APR.Pg_out_N.PV > 0.05) AND DGI.Kr5_OF OR (HMI_APR.Pg_in_N.PV > 0.05) AND (HMI_APR.Pg_out_N.PV > 0.05);
LG.deblock := BTN.Deblock OR (us.Repair AND BTN.cancel) OR LG.PRU_deblock;

// формирование сигнализации "Есть горение"
LG.is_flame := FRS.isFire;



//-------------------------------------------------------
LG.Stop := (us.AOss OR us.AObs OR us.NOss OR us.NObs) AND NOT (LG.AObs_finish OR LG.AOss_finish) ;
LG.AObs_finish := Drum_AObs.ACC[2];
LG.AOss_finish := Drum_AOss.ACC[2];

//Сигналы для записи архивов по событию
ASArchive.Stop  := us.Stop;
ASArchive.Start  := Drum_APK.Start OR Drum_APM.Start;
//Контроль ГР
LG.PPU_GR_Check := BTN.GR OR (Drum_KPK.Finish OR Drum_HP.Finish OR Drum_NOss.Finish OR Drum_NObs.Finish OR LG.PPU_GR_Check AND (us.Repair OR us.HR) ) ;
			//		AND NOT ( btn.HR OR btn.Repair OR us.Stop OR BTN.Start OR us.Repair OR LG.PPU_HR_notReady OR BTN.AutoStart) ;
//Контроль ХР
LG.PPU_HR_Check := BTN.GR  OR BTN.HR  OR (LG.PPU_GR_Check OR LG.PPU_HR_Check AND (us.Repair));  
			//	   AND NOT (btn.Repair OR us.Stop OR BTN.Start  OR BTN.AutoStart) ;

LG.PPU_GR_Check := LG.V_000 AND (BTN.GR OR Drum_KPK.Finish OR Drum_HP.Finish  OR Drum_TP.Finish OR Drum_NOss.Finish OR Drum_NObs.Finish OR LG.PPU_GR_Check) AND NOT (BTN.HR OR BTN.Repair OR BTN.Start OR us.Stop);
LG.PPU_HR_Check := LG.V_000 AND (BTN.HR OR BTN.GR OR Drum_KPK.Finish OR Drum_HP.Finish OR Drum_TP.Finish OR Drum_NOss.Finish OR Drum_NObs.Finish OR LG.PPU_HR_Check) AND NOT (BTN.Repair OR BTN.Start OR us.Stop);
LG.V_000 := NOT (us.Start OR us.Stop OR us.Work OR us.Check);

(*
//Таймер 12ч
TMR_Check_SAU_12h(Check_SAU_last, ustT.Check_SAU_12h, TMO.Check_SAU_12h, TMR.Check_SAU_12h);

TMR_Check_SAU_6s(Check_SAU_last, ustT.Check_SAU_6s, TMO.Check_SAU_6s, TMR.Check_SAU_6s );
TMR_Check_SAU_4s(Check_SAU_last, ustT.Check_SAU_4s, TMO.Check_SAU_4s, TMR.Check_SAU_4s );


LG.Check_SAU := us.GR AND (BTN.KPK OR BTN.APK OR BTN.APM OR BTN.PZM OR BTN.HP OR BTN.TP OR LG.needTP OR BTN.AutoStart) OR
				TMO_Check_SAU_12 AND NOT (us.K_M OR us.M_K)	OR LG.Check_SAU AND NOT (BTN.cancel OR TMO.Check_SAU);
TMRCheck_SAU(LG.Check_SAU, ustT.Check_SAU, TMO.Check_SAU, TMR.Check_SAU );
LG.SVK_D_fault := TMR.Check_SAU > T#4s AND TMR.Check_SAU < T#6s AND NOT (DGI.V_D_Av AND ANB.V_psu_TK_Av AND ANB.V_zo_TK_Av AND ANB.V_o_ST_Av) OR LG.SVK_D_fault AND NOT LG.Check_SAU_OK AND NOT (DGI.V_D_Av AND ANB.V_psu_TK_Av AND ANB.V_zo_TK_Av AND ANB.V_o_ST_Av);
LG.SVK_N_fault := TMR.Check_SAU > T#4s AND TMR.Check_SAU < T#6s AND NOT (ANB.V_Poy_N_Av AND ANB.V_Pox_N_Av AND ANB.V_Zoy_N_Av AND ANB.V_Zox_N_Av AND (ANB.OS_N_An OR ANB.OS_N_Av)) OR LG.SVK_N_fault AND NOT LG.Check_SAU_OK AND NOT (ANB.V_Poy_N_Av AND ANB.V_Pox_N_Av AND ANB.V_Zoy_N_Av AND ANB.V_Zox_N_Av AND (ANB.OS_N_An OR ANB.OS_N_Av));
LG.Check_SAU_OK := NOT LG.SVK_D_fault AND NOT LG.SVK_N_fault;
Check_SAU_last := TMO.Check_SAU OR Check_SAU_last AND NOT TMO_Check_SAU_12;
LG.BZA_check_fault := (us.K OR us.M) AND NOT AS.AO_from_BZA AND TMR.Check_SAU > T#2s AND TMR.Check_SAU < T#3s  OR LG.BZA_check_fault AND NOT LG.Check_SAU;
)
LG.Check_SAU_OK := TRUE;
//----------ПЗ
//TMRCheck_PZ(LG.was_Check_PZ, T#1s, TMO_Check_PZ, TMR_Check_PZ );
//LG.was_Check_PZ := LG.Check_PZ AND BTN.cancel OR LG.was_Check_PZ AND NOT TMO_Check_PZ; 
//LG.Check_PZ := us.Repair AND  BTN.PZ AND LG.noG_inN OR LG.Check_PZ AND NOT BTN.cancel;
LG.deblock := BTN.Deblock OR (us.Repair AND BTN.cancel) OR LG.PRU_deblock;

//-------------------------------------
//АОбс
//LG.ARM_AObs := BTN.ARM_AObs;
LG.BZA_fault :=  (Drum_StartD.Start OR LG.Check_PZ) AND (Calc_AI.N_ST >= 0.3 * 9020.0 AND Calc_AI.N_TK >= 0.3*(gt_Mstruct.pid_struct[2].real_SP + 0.03 * gt_Mstruct.pid_struct[2].real_SP)  AND NOT DGI.BZA_ready2 
				 OR Calc_AI.N_ST < 0.1 * 9020.0 AND Calc_AI.N_TK <= 0.1*(gt_Mstruct.pid_struct[2].real_SP + 0.03 * gt_Mstruct.pid_struct[2].real_SP) AND  DGI.BZA_ready2);
LG.Kr6r_fault := (Drum_StartD.Start OR LG.Check_PZ) AND NOT DGI.Kr6r_ON AND Calc_AI.N_ST > 300.0;
LG.PRU_AObs := PRU.AObs;
LG.A_wrong_TRK := ABS(HMI_FR.Pos_TRK.PV - Calc_AI.Set_TRK) > 5.0;
LG.A_wrong_VNA := ABS(HMI_ALG.Pos_VNA.PV - Calc_AI.Set_VNA) > 2.5;
//AOcc
LG.AOss_tech := LG.G_inN AND NOT LG.G_inAVO AND NOT HMI_ALG.Pg_in_Kr2.Condition.fault_common;
LG.ARM_AOss := BTN.ARM_AOss;
LG.ARM_AVOG := BTN.AOss_AVOG;
Proc_Kr1_fault(AI := HMI_ALG.Pg_in_N, Permit:= (LG.GPA_Work OR  LG.Check_PZ) , Ust := 10.0, Alarm_out => LG_Kr1_fault);
LG.Kr1_fault := NOT DGI.Kr1_ON AND LG_Kr1_fault ;
LG.Kr2_1_fault := NOT DGI.Kr2_1_ON AND ANB.Pg_out_N_Pv AND (LG.GPA_Work OR  LG.Check_PZ);
LG.Kr6_fault := NOT DGI.Kr6_ON AND ANB.Pg_out_N_Pv AND (us.K OR us.M_K OR LG.Check_PZ);
LG.PRU_AOss := PRU.AOss;
//НОбс
LG.ARM_NObs := BTN.ARM_NObs;
LG.PRU_NObs := PRU.NObs;
//НОсс
LG.ARM_NOss := BTN.ARM_NOss;
LG.PRU_NOss := PRU.NOss;
//ПС
LG.P_wrong_TRK := ABS(HMI_FR.Pos_TRK.PV - Calc_AI.Set_TRK) > 3.0;
LG.P_wrong_VNA := ABS(HMI_ALG.Pos_VNA.PV - Calc_AI.Set_VNA) > 1.5;
*)



]]></ST>
        </FunctionBlock>
        <FunctionBlock UUID="F05BF1B44C3DEBD0E5FBFBB6BE9DE0FD" Name="FB_Time_Init">
            <Variables />
            <ST><![CDATA[IF APP_FST_SCN THEN
//------------Управляющие--------------------
//------------Таймеры управления--------------------
ustT.stabMN := T#30s ;//Задержка стабилизация МН +
ustT.stabMUN := T#10s ;//Задержка стабилизация маслоуплотнений +
ustT.startMD := T#10s ;//Задержка стабилизация МД
ustT.prodN := T#10s ;//Задержка продувка Н
ustT.stabN := T#60s ;//Задержка стабилизация Н
ustT.startTG:=T#5s;//Задержка продувки ТГ
ustT.RUS_ON := T#170s;// Включить РУС
ustT.RPS_ON := T#15s; //Включить РПС
ustT.BP_ON := T#8s ; //Включить БП плазменных воспламенителей СПВ
ustT.SK_ON := T#3s ;//Задержка включения СК
ustT.SK_Control := T#8s ;//Взвести защиту по контролю открытого СК
ustT.BP_OF := T#81s ; //Отключить БП плазменных воспламенителей СПВ
ustT.warm_HH := T#600s; //Прогрев на ХХ T#600s
ustT.warm_NARR := T#300s; //Прогрев на НАРР T#300s
ustT.Check_SAU_12h := T#12h ;//Контроль системы
ustT.Check_SAU_12s := T#12s ;//Контроль системы 
ustT.Check_SAU_6s := T#6s ;//Контроль системы
ustT.Check_SAU_4s := T#4s ;//Контроль системы
ustT.CoolingGTD_NARR := T#300s ;//Охлаждение ГТД на НАРР
ustT.CoolingGTD_HH := T#300s ;//Охлаждение ГТД на ХХ
ustT.OpenKPG := T#5s ;//Открытие КАО
ustT.OpenSK := T#1s ;//Открытие СК
ustT.RazgonGT := T#7s; //Разгон
ustT.Sound_ON := T#10s; //Предпусковая сигнализация
ustT.StartGTD := T#600s ;//Запуск ГТД
ustT.is_flame := T#20s ;//Есть розж. камеры сгорания
ustT.StabMD := T#10s ; //Cтабилизация МД
ustT.ES_Work_HP := T#170s ;//ЭС: откл нп ХП или ТП
ustT.ES_Work_TP := T#900s ;//ЭС: откл нп ХП или ТП
ustT.KAO_ON := T#5s ;//Задержка включения КАО 5с
ustT.KPG_1s := T#1s ;//Задержка включения КПГ 1c
ustT.KPG_1_1s := T#1s ;//Задержка включения КПГ 1c
ustT.OpenSK := T#3s ; //Задержка АГЗ
//ustT.PRU_NObs := T#1s ;
//ustT.PRU_NOss := T#1s ;
//ustT.PRU_AObs := T#1s ;
//ustT.PRU_AOss := T#1s ;
ustT.KPK := T#10s ;
ustT.Check_Chips := T#6s ;
ustT.Filling_oil_Kr1 := T#17s;//Задержка на управление смазкой Кр1
ustT.Filling_oil_Kr2 := T#17s;//Задержка на управление смазкой Кр2
ustT.KPR1_ON := T#10s;//
ustT.KPR2_ON := T#10s;//
ustT.BP_SPV_OF := T#10s;//Включить БП плазменных воспламенителей СПВ
ustT.ORT := T#10s;//Задержка отключения ОРТ
ustT.MNU_OF := T#900s;//Задержка на отключение МНУ
ustT.Pm_D := T#2s; //Таймер для давлений МННД
ustT.Modes := T#3600s; //Таймер для режимов  МННД
ustT.Pm_MNOD_004 := T#2s; //Задержка сигнала давление масла за нав. МНОД  больше 0,04
ustT.Pm_MNOD := T#2s; //Задержка давлений мсм МНОД
ustT.MNOD_PZM_OF := T#300s; //Задержка выключения МНОД 300с
ustT.MNOD_OF :=T#3900s; //Таймер для режимов  МНОД 65мин
ustT.Pm_in_D_002 :=T#5s; //Задержка Давление масла на входе в Д больше 0.02 
ustT.Gas_N1 := T#3s; //
ustT.Gas_N2 := T#2s; //
ustT.Tv_KGT50 := T#3s; //
ustT.Tv_KGT30 := T#300s; //
ustT.Tv_KGT70 := T#3s; //
ustT.Tv_KGT60 := T#3s; //
ustT.Check_Chips := T#6s ;


END_IF;]]></ST>
        </FunctionBlock>
        <FunctionBlock UUID="8B9AB9814ED47321E618BE864C0B4427" Name="FB_UnitState">
            <Variables />
            <ST><![CDATA[
//---------------------------------------------------
//Условия формирования режима
//Режимы останова
us_condition.AOss:= LG.AOs AND NOT us.PZ  ;
us_condition.AObs:= LG.AOb AND NOT us.PZ  ;
us_condition.NOss:= LG.NOs AND NOT us.PZ  ;
us_condition.NObs:= LG.NOb AND NOT us.PZ  ;
//Режимы резерва
us_condition.Repair:= LG.PPU_HR_notReady OR BTN.Repair OR (Drum_AOss.Finish OR Drum_AObs.Finish) OR (Drum_NObs.Finish OR Drum_NOss.Finish) OR APP_FST_SCN OR Drum_PZ.Finish ;
us_condition.HR:= LG.PPU_HR_Ready AND NOT LG.PPU_GR_Ready OR us.GR AND LG.PPU_GR_notReady;
us_condition.GR:= LG.PPU_GR_Ready OR Drum_PZM.Finish OR Drum_KPK.Finish  OR Drum_HP.Finish OR Drum_TP.Finish ;
//Режимы проверок
us_condition.PZ:=  TS.Check_PZ AND BTN.Start  ;
us_condition.PZM:= TS.Ready_PZM AND BTN.Start   ;  
//Режимы работы
us_condition.HP:=  TS.Ready_HP AND BTN.Start    ;  
us_condition.TP:=  TS.Ready_TP AND BTN.Start    ;  
us_condition.KPK:= TS.Ready_KPK AND BTN.Start   ;
us_condition.APK:= TS.Ready_APK AND BTN.Start   ;
us_condition.APM:= TS.Ready_APM AND BTN.Start   ;
us_condition.PBZ:= TS.Ready_PBZ AND BTN.Start   ;
us_condition.K:=    (sm_M_K.Finish AND NOT us.OGR) OR 
					Drum_APK.Finish OR 
					us.NOss AND NOT LG.NOs  AND BTN.cancel OR 
					us.NObs AND NOT LG.NOb AND BTN.cancel OR 
					(Drum_OGR.Finish (*AND (BTN.cancel OR LG.deblock)*));
us_condition.M:=    sm_K_M.Finish OR Drum_APM.Finish;
us_condition.K_M:=   (us.K OR us.M_K) AND BTN.M ;
us_condition.M_K:=   (us.M OR us.K_M) AND BTN.K  ;
// Ограничение режима
us_condition.OGR:= (us.M OR us.K OR us.K_M OR us.M_K) AND LG.OGR   ;
//Нет режима
us_condition.Fault:= False ;


//---------------------------------------------------
//Блокировка формирования режима
//Режимы останова
us_exception.AOss:= us.PZ  OR us.PZM OR us.Repair AND LG.noG_inN ;
us_exception.AObs:= us.PZ  OR us.PZM OR us.Repair AND LG.noG_inN OR LG.AOs;
us_exception.NOss:= us.PZ  OR us.PZM OR us.Repair AND LG.noG_inN OR LG.AOs  OR LG.AOb;
us_exception.NObs:= us.PZ  OR us.PZM OR us.Repair AND LG.noG_inN OR LG.AOs  OR LG.AOb OR LG.NOs  ;
//Режимы резерва
us_exception.Repair:= us.Stop AND NOT LG.deblock OR us.K OR us.M OR us.K_M OR us.M_K OR us.HP OR us.TP;
us_exception.HR:= us.Stop OR LG.PPU_HR_notReady OR us.GR AND LG.PPU_GR_Ready  OR LG.Check_SAU ;
us_exception.GR:= us.Stop OR LG.PPU_HR_notReady OR LG.PPU_GR_notReady  ;
//Режимы проверок
us_exception.PZ:= us.Stop  ;
us_exception.PZM:= us.Stop OR Drum_PZM.Finish ;
//Режимы работы
us_exception.HP:= us.Stop ;
us_exception.TP:= us.Stop ;
us_exception.KPK:= us.Stop OR Drum_KPK.Finish ;
us_exception.APK:= us.Stop  ;
us_exception.APM:= us.Stop  ;
us_exception.PBZ:= us.Stop  ;
us_exception.K:= us.Stop  ;
us_exception.M:= us.Stop  ;
us_exception.K_M:= us.Stop OR LG.AOb ;
us_exception.M_K:= us.Stop OR LG.AOb ;
// Ограничение режима
us_exception.OGR:= us.Stop OR LG.AOb  ;
//Нет режима
us_exception.Fault:= False  ;


//---------------------------------------------------
//Режимы останова
//АОсс   
IF us_condition.AOss  AND NOT us_exception.AOss   THEN UnitState :=  us_Const.AOss   ;
//АОбс   
ELSIF us_condition.AObs  AND NOT us_exception.AObs   THEN UnitState :=  us_Const.AObs   ;
//НОсс   
ELSIF us_condition.NOss  AND NOT us_exception.NOss   THEN UnitState :=  us_Const.NOss   ;
//НОбс   
ELSIF us_condition.NObs  AND NOT us_exception.NObs   THEN UnitState :=  us_Const.NObs   ;
//Режимы резерва
//Ремонт   
ELSIF us_condition.Repair  AND NOT us_exception.Repair   THEN UnitState :=  us_Const.Repair   ;
//ХР   
ELSIF us_condition.HR  AND NOT us_exception.HR   THEN UnitState :=  us_Const.HR   ;
//ГР   
ELSIF us_condition.GR  AND NOT us_exception.GR   THEN UnitState :=  us_Const.GR   ;
//Режимы проверок
//ПЗ   
ELSIF us_condition.PZ  AND NOT us_exception.PZ   THEN UnitState :=  us_Const.PZ   ;
//ПМЗ   
ELSIF us_condition.PZM  AND NOT us_exception.PZM   THEN UnitState :=  us_Const.PZM   ;
//Режимы работы
//ХП   
ELSIF us_condition.HP  AND NOT us_exception.HP   THEN UnitState :=  us_Const.HP   ;
//ТП   
ELSIF us_condition.TP  AND NOT us_exception.TP   THEN UnitState :=  us_Const.TP   ;
//КПК   
ELSIF us_condition.KPK  AND NOT us_exception.KPK   THEN UnitState :=  us_Const.KPK   ;
//АПК   
ELSIF us_condition.APK  AND NOT us_exception.APK   THEN UnitState :=  us_Const.APK   ;
//АПМ   
ELSIF us_condition.APM  AND NOT us_exception.APM   THEN UnitState :=  us_Const.APM   ;
//ПБЗ
ELSIF us_condition.PBZ  AND NOT us_exception.PBZ   THEN UnitState :=  us_Const.PBZ   ;
//К   
ELSIF us_condition.K  AND NOT us_exception.K   THEN UnitState :=  us_Const.K   ;
//М   
ELSIF us_condition.M  AND NOT us_exception.M   THEN UnitState :=  us_Const.M   ;
//К-М   
ELSIF us_condition.K_M  AND NOT us_exception.K_M   THEN UnitState :=  us_Const.K_M   ;
//М-К   
ELSIF us_condition.M_K  AND NOT us_exception.M_K   THEN UnitState :=  us_Const.M_K   ;
// Ограничение режима
ELSIF us_condition.OGR AND NOT us_exception.OGR   THEN UnitState :=  us_Const.OGR   ;
//Нет режима
ELSIF us_condition.Fault  AND NOT us_exception.Fault   THEN UnitState :=  us_Const.Fault   ;
END_IF;


//---------------------------------------------------
//Режимы останова
us.AOss:= UnitState = us_Const.AOss   ;
us.AObs:= UnitState = us_Const.AObs   ;
us.NOss:= UnitState = us_Const.NOss   ;
us.NObs:= UnitState = us_Const.NObs   ;
//Режимы резерва
us.Repair:= UnitState = us_Const.Repair   ;
us.HR:= UnitState = us_Const.HR   ;
us.GR:= UnitState = us_Const.GR   ;
//Режимы проверок
us.PZ:= UnitState = us_Const.PZ   ;
us.PZM:= UnitState = us_Const.PZM   ;
//Режимы работы
us.HP:= UnitState = us_Const.HP   ;
us.TP:= UnitState = us_Const.TP   ;
us.KPK:= UnitState = us_Const.KPK   ;
us.APK:= UnitState = us_Const.APK   ;
us.APM:= UnitState = us_Const.APM   ;
us.PBZ:= UnitState = us_Const.PBZ   ;
us.K:= UnitState = us_Const.K   ;
us.M:= UnitState = us_Const.M   ;
us.K_M:= UnitState = us_Const.K_M   ;
us.M_K:= UnitState = us_Const.M_K   ;
// Ограничение режима
us.OGR:= UnitState = us_Const.OGR   ;
//Нет режима
us.Fault:= UnitState = us_Const.Fault   ;
//Обобщенные режимы
us.Stop := (us.AOss OR us.AObs OR us.NOss OR us.NObs) AND NOT (Drum_AOss.ACC[2] OR Drum_AObs.ACC[2]) ; //Режимы останова
us.Start := us.APK OR us.APM OR us.PBZ; //Пусковые режимы
us.Work := us.K OR us.M OR us.K_M OR us.M_K OR us.OGR ; //Режимы работы
us.Reserv := us.Repair OR us.HR OR us.GR;  //Режимы резерва 
us.Check := us.KPK OR us.HP OR us.TP OR us.PZ OR us.PZM; //Проверочные режимы







]]></ST>
        </FunctionBlock>
    </FBLibrary>
</Program>
